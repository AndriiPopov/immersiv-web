[{"/home/andrii/work/immersiv/immersiv-web/src/index.js":"1","/home/andrii/work/immersiv/immersiv-web/src/App.js":"2","/home/andrii/work/immersiv/immersiv-web/src/reportWebVitals.js":"3","/home/andrii/work/immersiv/immersiv-web/src/context/UserContext.jsx":"4","/home/andrii/work/immersiv/immersiv-web/src/helpers/history.js":"5","/home/andrii/work/immersiv/immersiv-web/src/layout/Layout.jsx":"6","/home/andrii/work/immersiv/immersiv-web/src/pages/Admins.jsx":"7","/home/andrii/work/immersiv/immersiv-web/src/pages/AnalyticClient.jsx":"8","/home/andrii/work/immersiv/immersiv-web/src/pages/Constants.jsx":"9","/home/andrii/work/immersiv/immersiv-web/src/pages/CreateProject.jsx":"10","/home/andrii/work/immersiv/immersiv-web/src/pages/Login.jsx":"11","/home/andrii/work/immersiv/immersiv-web/src/pages/ProjectDetails.jsx":"12","/home/andrii/work/immersiv/immersiv-web/src/pages/PropertiesAdmin.jsx":"13","/home/andrii/work/immersiv/immersiv-web/src/pages/Projects.jsx":"14","/home/andrii/work/immersiv/immersiv-web/src/pages/MediaAdmin.jsx":"15","/home/andrii/work/immersiv/immersiv-web/src/pages/ProjectA.jsx":"16","/home/andrii/work/immersiv/immersiv-web/src/pages/PropertiesClient.jsx":"17","/home/andrii/work/immersiv/immersiv-web/src/pages/Home.jsx":"18","/home/andrii/work/immersiv/immersiv-web/src/pages/Project.jsx":"19","/home/andrii/work/immersiv/immersiv-web/src/pages/ResetPassword.jsx":"20","/home/andrii/work/immersiv/immersiv-web/src/helpers/WithAxios.js":"21","/home/andrii/work/immersiv/immersiv-web/src/services/auth.service.js":"22","/home/andrii/work/immersiv/immersiv-web/src/pages/Properties.jsx":"23","/home/andrii/work/immersiv/immersiv-web/src/services/admin.service.js":"24","/home/andrii/work/immersiv/immersiv-web/src/services/project.service.js":"25","/home/andrii/work/immersiv/immersiv-web/src/services/ga.service.js":"26","/home/andrii/work/immersiv/immersiv-web/src/services/constant.service.js":"27","/home/andrii/work/immersiv/immersiv-web/src/helpers/useQuery.js":"28","/home/andrii/work/immersiv/immersiv-web/src/services/property.service.js":"29","/home/andrii/work/immersiv/immersiv-web/src/helpers/uploadMedia.js":"30","/home/andrii/work/immersiv/immersiv-web/src/services/utils.service.js":"31","/home/andrii/work/immersiv/immersiv-web/src/hooks/useLoginCheck.js":"32","/home/andrii/work/immersiv/immersiv-web/src/components/ForgotPasswordModal.jsx":"33","/home/andrii/work/immersiv/immersiv-web/src/components/ProjectFormFields.jsx":"34","/home/andrii/work/immersiv/immersiv-web/src/components/ProjectView/Layout/ProjectView.jsx":"35","/home/andrii/work/immersiv/immersiv-web/src/api/axios.config.js":"36","/home/andrii/work/immersiv/immersiv-web/src/components/DashboardItem/DataItems/index.js":"37","/home/andrii/work/immersiv/immersiv-web/src/components/ProjectView/Components/PropertiesTable.jsx":"38","/home/andrii/work/immersiv/immersiv-web/src/components/ProjectView/Layout/PoweredLogo.jsx":"39","/home/andrii/work/immersiv/immersiv-web/src/components/DashboardItem/DataItems/ChartItem/ChartItem.js":"40","/home/andrii/work/immersiv/immersiv-web/src/components/DashboardItem/DataItems/TextItem/TextItem.js":"41","/home/andrii/work/immersiv/immersiv-web/src/components/ProjectView/Layout/Button.jsx":"42","/home/andrii/work/immersiv/immersiv-web/src/components/ProjectView/Components/StreamView/StreamView.jsx":"43","/home/andrii/work/immersiv/immersiv-web/src/components/ProjectView/Components/Loading/Loading.jsx":"44","/home/andrii/work/immersiv/immersiv-web/src/components/ProjectView/Log.js":"45","/home/andrii/work/immersiv/immersiv-web/src/components/ProjectView/Components/EmbededView/EmbededView.jsx":"46","/home/andrii/work/immersiv/immersiv-web/src/components/ProjectView/Components/LoadingView/LoadingView.jsx":"47","/home/andrii/work/immersiv/immersiv-web/src/stories/Header.stories.jsx":"48","/home/andrii/work/immersiv/immersiv-web/src/stories/Button.stories.jsx":"49","/home/andrii/work/immersiv/immersiv-web/src/stories/Page.stories.jsx":"50","/home/andrii/work/immersiv/immersiv-web/src/stories/Button.jsx":"51","/home/andrii/work/immersiv/immersiv-web/src/stories/Header.jsx":"52","/home/andrii/work/immersiv/immersiv-web/src/stories/Page.jsx":"53","/home/andrii/work/immersiv/immersiv-web/src/components/ProjectView/Components/ProjectUI/AppUI/index.jsx":"54","/home/andrii/work/immersiv/immersiv-web/src/components/ProjectView/Components/ProjectUI/Bottom/InfoButton/index.jsx":"55","/home/andrii/work/immersiv/immersiv-web/src/components/ProjectView/Components/ProjectUI/Bottom/UIButtons/index.jsx":"56","/home/andrii/work/immersiv/immersiv-web/src/components/ProjectView/Components/ProjectUI/Bottom/ButtonUI/index.jsx":"57","/home/andrii/work/immersiv/immersiv-web/src/components/ProjectView/Components/ProjectUI/Bottom/SunControls/index.jsx":"58","/home/andrii/work/immersiv/immersiv-web/src/components/ProjectView/Components/ProjectUI/Bottom/FilterControls/index.jsx":"59","/home/andrii/work/immersiv/immersiv-web/src/components/ProjectView/Components/ProjectUI/Bottom/Gallery/index.jsx":"60","/home/andrii/work/immersiv/immersiv-web/src/components/ProjectView/Components/ProjectUI/Bottom/LocationControls/index.jsx":"61","/home/andrii/work/immersiv/immersiv-web/src/components/ProjectView/Components/ProjectUI/Bottom/ApartmentContols/index.jsx":"62","/home/andrii/work/immersiv/immersiv-web/src/pages/UIAdmin.jsx":"63","/home/andrii/work/immersiv/immersiv-web/src/components/ProjectView/Components/ProjectUI/Bottom/AdminButton/index.jsx":"64"},{"size":672,"mtime":1667049080918,"results":"65","hashOfConfig":"66"},{"size":2889,"mtime":1666474648443,"results":"67","hashOfConfig":"66"},{"size":362,"mtime":1662899769151,"results":"68","hashOfConfig":"66"},{"size":2031,"mtime":1662899769151,"results":"69","hashOfConfig":"66"},{"size":87,"mtime":1662899769151,"results":"70","hashOfConfig":"66"},{"size":805,"mtime":1662899769151,"results":"71","hashOfConfig":"66"},{"size":7572,"mtime":1662899769151,"results":"72","hashOfConfig":"66"},{"size":8153,"mtime":1662899769151,"results":"73","hashOfConfig":"66"},{"size":4139,"mtime":1662899769151,"results":"74","hashOfConfig":"66"},{"size":2976,"mtime":1662899769151,"results":"75","hashOfConfig":"66"},{"size":3911,"mtime":1662899769151,"results":"76","hashOfConfig":"66"},{"size":6884,"mtime":1666474514834,"results":"77","hashOfConfig":"66"},{"size":2404,"mtime":1662899769151,"results":"78","hashOfConfig":"66"},{"size":8642,"mtime":1662899769151,"results":"79","hashOfConfig":"66"},{"size":12321,"mtime":1662899769151,"results":"80","hashOfConfig":"66"},{"size":1885,"mtime":1666762441724,"results":"81","hashOfConfig":"66"},{"size":4311,"mtime":1662899769151,"results":"82","hashOfConfig":"66"},{"size":289,"mtime":1664117165291,"results":"83","hashOfConfig":"66"},{"size":1211,"mtime":1662899769151,"results":"84","hashOfConfig":"66"},{"size":5587,"mtime":1662899769151,"results":"85","hashOfConfig":"66"},{"size":1488,"mtime":1662899769151,"results":"86","hashOfConfig":"66"},{"size":1319,"mtime":1662899769151,"results":"87","hashOfConfig":"66"},{"size":981,"mtime":1662899769151,"results":"88","hashOfConfig":"66"},{"size":317,"mtime":1662899769151,"results":"89","hashOfConfig":"66"},{"size":907,"mtime":1666590674788,"results":"90","hashOfConfig":"66"},{"size":404,"mtime":1662899769151,"results":"91","hashOfConfig":"66"},{"size":251,"mtime":1662899769151,"results":"92","hashOfConfig":"66"},{"size":158,"mtime":1662899769151,"results":"93","hashOfConfig":"66"},{"size":676,"mtime":1662899769151,"results":"94","hashOfConfig":"66"},{"size":956,"mtime":1662899769151,"results":"95","hashOfConfig":"66"},{"size":265,"mtime":1662899769151,"results":"96","hashOfConfig":"66"},{"size":905,"mtime":1662899769151,"results":"97","hashOfConfig":"66"},{"size":2844,"mtime":1662899769147,"results":"98","hashOfConfig":"66"},{"size":7046,"mtime":1666783654645,"results":"99","hashOfConfig":"66"},{"size":7051,"mtime":1662985463453,"results":"100","hashOfConfig":"66"},{"size":543,"mtime":1662899769147,"results":"101","hashOfConfig":"66"},{"size":132,"mtime":1662899769147,"results":"102","hashOfConfig":"66"},{"size":11536,"mtime":1662899769151,"results":"103","hashOfConfig":"66"},{"size":483,"mtime":1662899769151,"results":"104","hashOfConfig":"66"},{"size":1530,"mtime":1662899769147,"results":"105","hashOfConfig":"66"},{"size":384,"mtime":1662899769147,"results":"106","hashOfConfig":"66"},{"size":468,"mtime":1662899769151,"results":"107","hashOfConfig":"66"},{"size":10574,"mtime":1662899769151,"results":"108","hashOfConfig":"66"},{"size":8000,"mtime":1662986181977,"results":"109","hashOfConfig":"66"},{"size":107,"mtime":1662899769151,"results":"110","hashOfConfig":"66"},{"size":3606,"mtime":1662899769147,"results":"111","hashOfConfig":"66"},{"size":5021,"mtime":1662899769147,"results":"112","hashOfConfig":"66"},{"size":485,"mtime":1663417865369,"results":"113","hashOfConfig":"114"},{"size":980,"mtime":1663417865369,"results":"115","hashOfConfig":"114"},{"size":767,"mtime":1663417865369,"results":"116","hashOfConfig":"114"},{"size":1101,"mtime":1663417865369,"results":"117","hashOfConfig":"114"},{"size":1594,"mtime":1663417865369,"results":"118","hashOfConfig":"114"},{"size":2503,"mtime":1663417865369,"results":"119","hashOfConfig":"114"},{"size":1930,"mtime":1667044924033,"results":"120","hashOfConfig":"66"},{"size":242,"mtime":1663452854901,"results":"121","hashOfConfig":"66"},{"size":4876,"mtime":1667048961504,"results":"122","hashOfConfig":"66"},{"size":1361,"mtime":1667048705887,"results":"123","hashOfConfig":"66"},{"size":3150,"mtime":1666761421658,"results":"124","hashOfConfig":"66"},{"size":5925,"mtime":1666910840942,"results":"125","hashOfConfig":"66"},{"size":5153,"mtime":1666591758051,"results":"126","hashOfConfig":"66"},{"size":1171,"mtime":1666791986388,"results":"127","hashOfConfig":"66"},{"size":4808,"mtime":1667045113136,"results":"128","hashOfConfig":"66"},{"size":4222,"mtime":1667049153579,"results":"129","hashOfConfig":"66"},{"size":2328,"mtime":1666910925992,"results":"130","hashOfConfig":"66"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1dahao6",{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"135"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"135"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"135"},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"135"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"135"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"135"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"135"},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"135"},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"176","messages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"135"},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"185","messages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"135"},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"196","messages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"204","messages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"135"},{"filePath":"207","messages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"209","messages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"135"},{"filePath":"212","messages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"135"},{"filePath":"215","messages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"217","messages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"135"},{"filePath":"222","messages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"224","messages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"226","messages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"230","messages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"135"},{"filePath":"233","messages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"135"},{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"238","messages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"240","messages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"242","messages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1k6he7a",{"filePath":"244","messages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"246","messages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"248","messages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"250","messages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"252","messages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"254","messages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"256","messages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"258","messages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"260","messages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"262","messages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"264","messages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"266","messages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"135"},{"filePath":"269","messages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"271","messages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"273","messages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"275","messages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},"/home/andrii/work/immersiv/immersiv-web/src/index.js",[],"/home/andrii/work/immersiv/immersiv-web/src/App.js",[],["277","278"],"/home/andrii/work/immersiv/immersiv-web/src/reportWebVitals.js",[],"/home/andrii/work/immersiv/immersiv-web/src/context/UserContext.jsx",[],"/home/andrii/work/immersiv/immersiv-web/src/helpers/history.js",[],"/home/andrii/work/immersiv/immersiv-web/src/layout/Layout.jsx",[],"/home/andrii/work/immersiv/immersiv-web/src/pages/Admins.jsx",["279"],"import LayoutHOC from \"layout/Layout\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\n\r\nimport {\r\n    Button,\r\n    Dropdown,\r\n    Form,\r\n    Input,\r\n    Layout,\r\n    List,\r\n    Menu,\r\n    Modal,\r\n    PageHeader,\r\n    Popconfirm,\r\n} from \"antd\";\r\nimport { Content } from \"antd/lib/layout/layout\";\r\nimport { MoreOutlined } from \"@ant-design/icons\";\r\nimport { useUser } from \"context/UserContext\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport toast from \"react-hot-toast\";\r\nimport adminService from \"services/admin.service\";\r\nimport useLoginCheck from \"hooks/useLoginCheck\";\r\n\r\nconst Admins = (props) => {\r\n    const formRef = useRef(null);\r\n    const [admins, setAdmins] = useState(null);\r\n    const [editModalOpen, setEditModalOpen] = useState(null);\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        adminService.getAdmin().then((response) => {\r\n            setAdmins(response.data);\r\n        });\r\n    }, []);\r\n\r\n    useLoginCheck();\r\n\r\n    const onFinish = async (values) => {\r\n        const response = await adminService.createAdmin(values);\r\n        if (response.data) {\r\n            toast.success(\"Saved\");\r\n            setAdmins(response.data);\r\n            setEditModalOpen(null);\r\n            if (formRef.current) formRef.current.resetFields();\r\n        }\r\n    };\r\n\r\n    const deleteAdmin = async (id) => {\r\n        const response = await adminService.deleteAdmin(id);\r\n        if (response.data) setAdmins(response.data);\r\n    };\r\n\r\n    return (\r\n        <LayoutHOC loading={!admins}>\r\n            <Layout\r\n                style={{\r\n                    height: \"100%\",\r\n                    display: \"flex\",\r\n                    flex: 1,\r\n                    background: \"white\",\r\n                }}\r\n            >\r\n                <PageHeader\r\n                    onBack={() => navigate(`/admin`)}\r\n                    title={`Admins`}\r\n                    style={{\r\n                        boxShadow: \"1px 1px 10px 1px #ccc\",\r\n                        position: \"fixed\",\r\n                        zIndex: 100,\r\n                        width: \"100%\",\r\n                    }}\r\n                />\r\n\r\n                <Content\r\n                    style={{\r\n                        flex: 1,\r\n                        overflow: \"auto\",\r\n                        padding: \"16px\",\r\n                        paddingTop: \"100px\",\r\n                        maxWidth: \"800px\",\r\n                        width: \"100%\",\r\n                        margin: \"auto\",\r\n                    }}\r\n                >\r\n                    <Button\r\n                        onClick={() => setEditModalOpen({})}\r\n                        style={{ margin: \"16px\" }}\r\n                    >\r\n                        Add admin\r\n                    </Button>\r\n                    <Modal\r\n                        visible={!!editModalOpen}\r\n                        onCancel={() => setEditModalOpen(null)}\r\n                        footer={null}\r\n                    >\r\n                        <Form\r\n                            onFinish={onFinish}\r\n                            style={{\r\n                                padding: \" 16px\",\r\n                                maxWidth: \"500px\",\r\n                                margin: \"auto\",\r\n                            }}\r\n                            ref={formRef}\r\n                        >\r\n                            <Form.Item\r\n                                name=\"email\"\r\n                                rules={[\r\n                                    {\r\n                                        required: true,\r\n                                        message: \"Please add name!\",\r\n                                        type: \"email\",\r\n                                    },\r\n                                ]}\r\n                            >\r\n                                <Input placeholder=\"Email\" />\r\n                            </Form.Item>\r\n\r\n                            <Form.Item>\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    htmlType=\"submit\"\r\n                                    style={{ width: \"100%\" }}\r\n                                >\r\n                                    Save\r\n                                </Button>\r\n                            </Form.Item>\r\n                        </Form>\r\n                    </Modal>\r\n                    {admins && (\r\n                        <List\r\n                            itemLayout=\"horizontal\"\r\n                            dataSource={admins.sort((a, b) =>\r\n                                a.name > b.name ? 1 : -1\r\n                            )}\r\n                            renderItem={(admin) => (\r\n                                <List.Item\r\n                                    actions={[\r\n                                        <Dropdown\r\n                                            overlay={\r\n                                                <Menu>\r\n                                                    <Popconfirm\r\n                                                        title=\"Are you sure to delete this admin?\"\r\n                                                        onConfirm={() =>\r\n                                                            deleteAdmin(\r\n                                                                admin.email\r\n                                                            )\r\n                                                        }\r\n                                                        okText=\"Yes\"\r\n                                                        cancelText=\"No\"\r\n                                                    >\r\n                                                        <Menu.Item\r\n                                                            key=\"3\"\r\n                                                            danger\r\n                                                        >\r\n                                                            Delete\r\n                                                        </Menu.Item>\r\n                                                    </Popconfirm>\r\n                                                </Menu>\r\n                                            }\r\n                                            trigger={[\"click\"]}\r\n                                        >\r\n                                            <MoreOutlined\r\n                                                style={{ fontSize: \"30px\" }}\r\n                                            />\r\n                                        </Dropdown>,\r\n                                    ]}\r\n                                    style={{\r\n                                        borderBottom: \"3px solid #ccc\",\r\n                                        paddingLeft: \"16px\",\r\n                                    }}\r\n                                >\r\n                                    <List.Item.Meta\r\n                                        title={admin.email}\r\n                                        description={\r\n                                            admin.locked\r\n                                                ? \"Locked\"\r\n                                                : \"Not locked\"\r\n                                        }\r\n                                    />\r\n                                </List.Item>\r\n                            )}\r\n                        />\r\n                    )}\r\n                </Content>\r\n            </Layout>\r\n        </LayoutHOC>\r\n    );\r\n};\r\n\r\nexport default Admins;\r\n","/home/andrii/work/immersiv/immersiv-web/src/pages/AnalyticClient.jsx",["280","281","282","283","284","285"],"import LayoutHOC from \"layout/Layout\";\nimport React, { useEffect, useState } from \"react\";\n\nimport { DatePicker, Layout, PageHeader } from \"antd\";\n\nimport { Content } from \"antd/lib/layout/layout\";\n\nimport { useNavigate, useParams } from \"react-router-dom\";\n\nimport projectService from \"services/project.service\";\nimport moment from \"moment\";\nimport gaService from \"services/ga.service\";\nimport toast from \"react-hot-toast\";\nimport { ChartItem } from \"components/DashboardItem/DataItems\";\nimport useLoginCheck from \"hooks/useLoginCheck\";\nimport { useUser } from \"context/UserContext\";\n\nconst AnalyticClient = (props) => {\n    const { id } = useParams();\n\n    const [project, setProject] = useState(null);\n    const [dateData, setDateData] = useState(null);\n    const [cityData, setCityData] = useState(null);\n    const [deviceData, setDeviceData] = useState(null);\n    const [sourceData, setSourceData] = useState(null);\n    const [period, setPeriod] = useState([\n        moment().subtract(7, \"day\").format(),\n        moment().format(),\n    ]);\n    const navigate = useNavigate();\n    const { logout, isLoggedIn, authData } = useUser();\n\n    useEffect(() => {\n        if (\n            !isLoggedIn ||\n            (!authData?.super &&\n                id.toString() !== authData?.projectId.toString())\n        ) {\n            logout();\n            navigate(\"/login\");\n            return null;\n        }\n    }, [isLoggedIn, authData?.super, authData?.projectId]);\n\n    useEffect(() => {\n        projectService.getProject(id).then((response) => {\n            setProject(response.data);\n        });\n    }, []);\n\n    useEffect(() => {\n        if (period.length === 2 && project?.id) {\n            setDateData(null);\n            setCityData(null);\n            setDeviceData(null);\n            setSourceData(null);\n            getMetricData();\n        }\n    }, [period[0], period[1], project?.id]);\n\n    const getMetricData = () => {\n        gaService\n            .getGA(\n                project.id,\n                \"ga:users,ga:newUsers,ga:pageviews,ga:sessions,ga:sessionDuration\",\n                \"ga:date\",\n                period\n            )\n            .then((res) => {\n                setDateData(res.data.data);\n            })\n            .catch((err) => {\n                toast.error(\"Users analytics data not loaded\");\n            });\n\n        gaService\n            .getGA(project.id, \"ga:users\", \"ga:city\", period)\n            .then((res) => {\n                setCityData(res.data.data);\n            })\n            .catch((err) => {\n                toast.error(\"Location analytics data not loaded\");\n            });\n\n        gaService\n            .getGA(project.id, \"ga:users\", \"ga:deviceCategory\", period)\n            .then((res) => {\n                setDeviceData(res.data.data);\n            })\n            .catch((err) => {\n                toast.error(\"Device analytics data not loaded\");\n            });\n\n        gaService\n            .getGA(project.id, \"ga:users\", \"ga:source\", period)\n            .then((res) => {\n                setSourceData(res.data.data);\n            })\n            .catch((err) => {\n                toast.error(\"Source analytics data not loaded\");\n            });\n    };\n\n    return (\n        <LayoutHOC>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => navigate(`/p-admin/${id}`)}\n                    title={\n                        <>\n                            Analytics\n                            <br />\n                            <DatePicker.RangePicker\n                                size=\"large\"\n                                defaultValue={[\n                                    moment().subtract(7, \"day\"),\n                                    moment(),\n                                ]}\n                                onChange={(m) =>\n                                    setPeriod([m[0].format(), m[1].format()])\n                                }\n                                allowClear={false}\n                            />\n                        </>\n                    }\n                    style={{ borderBottom: \"1px #ccc solid\" }}\n                />\n                {project && (\n                    <Content\n                        style={{\n                            flex: 1,\n                            overflow: \"auto\",\n                            paddingTop: \"100px\",\n                            padding: \"16px\",\n\n                            width: \"100%\",\n                            margin: \"auto\",\n                        }}\n                    >\n                        <div\n                            style={{\n                                textAlign: \"center\",\n                                display: \"flex\",\n                                flexDirection: \"row\",\n                                flexWrap: \"wrap\",\n                                alignItems: \"center\",\n                                justifyContent: \"center\",\n                            }}\n                        >\n                            <ChartItem\n                                data={dateData}\n                                title=\"Users\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                column={1}\n                            />\n                            <ChartItem\n                                data={dateData}\n                                title=\"New users\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                column={2}\n                            />\n                            <ChartItem\n                                data={dateData}\n                                title=\"Page views\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                column={3}\n                            />\n                            <ChartItem\n                                data={dateData}\n                                title=\"Sessions\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                column={4}\n                            />\n                            <ChartItem\n                                data={dateData}\n                                title=\"Session duration (minutes)\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                column={5}\n                                seconds\n                            />\n                            <ChartItem\n                                data={deviceData}\n                                title=\"Device type\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                type=\"PieChart\"\n                                column={1}\n                                seconds\n                                isDate={false}\n                            />\n                            <ChartItem\n                                data={sourceData}\n                                title=\"Source\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                type=\"BarChart\"\n                                column={1}\n                                isDate={false}\n                            />\n                            <ChartItem\n                                data={cityData}\n                                title=\"Source\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                type=\"Table\"\n                                column={1}\n                                isDate={false}\n                            />\n                        </div>\n                    </Content>\n                )}\n            </Layout>\n        </LayoutHOC>\n    );\n};\n\nexport default AnalyticClient;\n","/home/andrii/work/immersiv/immersiv-web/src/pages/Constants.jsx",[],"/home/andrii/work/immersiv/immersiv-web/src/pages/CreateProject.jsx",[],"/home/andrii/work/immersiv/immersiv-web/src/pages/Login.jsx",["286"],"// import { Button, HelperText, Input, Label } from \"@windmill/react-ui\";\r\nimport ForgotPasswordModal from \"components/ForgotPasswordModal\";\r\nimport { useUser } from \"context/UserContext\";\r\nimport Layout from \"layout/Layout\";\r\nimport React, { useState } from \"react\";\r\nimport toast from \"react-hot-toast\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport authService from \"services/auth.service\";\r\nimport { Form, Input, Button, Typography } from \"antd\";\r\nimport { UserOutlined, LockOutlined } from \"@ant-design/icons\";\r\n\r\nconst Login = () => {\r\n    const { isLoggedIn, setUserState, authData } = useUser();\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [redirectToReferrer, setRedirectToReferrer] = useState(false);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const onFinish = async (data) => {\r\n        const { email, password } = data;\r\n\r\n        try {\r\n            setIsLoading(true);\r\n            const data = await authService.login(email, password);\r\n            toast.success(\"Login successful 🔓\");\r\n\r\n            setTimeout(() => {\r\n                setUserState(data);\r\n                setRedirectToReferrer(true);\r\n                setIsLoading(false);\r\n            }, 1500);\r\n        } catch (error) {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    if (\r\n        (isLoggedIn || redirectToReferrer) &&\r\n        (authData?.super || authData?.projectId)\r\n    ) {\r\n        navigate(\"/admin\");\r\n    }\r\n\r\n    return (\r\n        <Layout title=\"Login\" loading={isLoading}>\r\n            <Form\r\n                name=\"normal_login\"\r\n                onFinish={onFinish}\r\n                style={{\r\n                    padding: \"100px 16px\",\r\n                    maxWidth: \"500px\",\r\n                    margin: \"auto\",\r\n                }}\r\n            >\r\n                <Typography.Title\r\n                    style={{ textAlign: \"center\", marginBottom: \"50px\" }}\r\n                >\r\n                    Manage IMMERSIVE\r\n                </Typography.Title>\r\n                <Form.Item\r\n                    name=\"email\"\r\n                    rules={[\r\n                        {\r\n                            type: \"email\",\r\n                            message: \"The input is not valid E-mail!\",\r\n                        },\r\n                        {\r\n                            required: true,\r\n                            message: \"Please input your E-mail!\",\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input\r\n                        prefix={\r\n                            <UserOutlined className=\"site-form-item-icon\" />\r\n                        }\r\n                        placeholder=\"Email\"\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"password\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: \"Please input your Password!\",\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input.Password\r\n                        prefix={\r\n                            <LockOutlined className=\"site-form-item-icon\" />\r\n                        }\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <a>\r\n                        <ForgotPasswordModal />\r\n                    </a>\r\n                </Form.Item>\r\n\r\n                <Form.Item>\r\n                    <Button\r\n                        type=\"primary\"\r\n                        htmlType=\"submit\"\r\n                        style={{ width: \"100%\" }}\r\n                    >\r\n                        Log in\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","/home/andrii/work/immersiv/immersiv-web/src/pages/ProjectDetails.jsx",["287","288"],"import LayoutHOC from \"layout/Layout\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport projectService from \"services/project.service\";\n\nimport { Button, Layout, PageHeader, Form, Typography } from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\n\nimport { useNavigate } from \"react-router-dom\";\nimport { useParams } from \"react-router-dom\";\nimport toast from \"react-hot-toast\";\nimport ProjectFormFields from \"components/ProjectFormFields\";\nimport useLoginCheck from \"hooks/useLoginCheck\";\nimport copy from \"copy-to-clipboard\";\n\nconst ProjectDetails = (props) => {\n  const [project, setProject] = useState(null);\n\n  const [form] = Form.useForm();\n\n  const { id } = useParams();\n\n  useEffect(() => {\n    projectService.getProject(id).then((response) => {\n      setProject(response.data);\n    });\n  }, [id]);\n\n  const navigate = useNavigate();\n  useLoginCheck();\n\n  const onFinish = async (values) => {\n    const response = await projectService.saveProject(project.id, values);\n    if (response.data) toast.success(\"Saved\");\n  };\n\n  const projectAddress = project?.url\n    ? `https://tour.immersiv.com.au/p/${project.url}`\n    : \"not set yet\";\n  const galleryAddress = project?.url\n    ? `https://tour.immersiv.com.au/gallery?project=${project.url}`\n    : \"not set yet\";\n  const propertiesAddress = project?.url\n    ? `https://tour.immersiv.com.au/api/properties/properties-ue/${project.url}`\n    : \"not set yet\";\n\n  const setFieldsValue = (val) => {\n    if (form) {\n      form.setFieldsValue({\n        ...form.getFieldsValue(),\n        ...val,\n      });\n    }\n  };\n\n  const description = Form.useWatch(\"description\", form);\n  const projectName = Form.useWatch(\"projectName\", form);\n  const clientLogo = Form.useWatch(\"clientLogo\", form);\n  const clientLogoMaxWidth = Form.useWatch(\"clientLogoMaxWidth\", form);\n  const clientLogoMaxHeight = Form.useWatch(\"clientLogoMaxHeight\", form);\n  const projectLogo = Form.useWatch(\"projectLogo\", form);\n  const projectLogoMaxWidth = Form.useWatch(\"projectLogoMaxWidth\", form);\n  const projectLogoMaxHeight = Form.useWatch(\"projectLogoMaxHeight\", form);\n  return (\n    <LayoutHOC loading={!project}>\n      <Layout\n        style={{\n          height: \"100%\",\n          display: \"flex\",\n          flex: 1,\n          background: \"white\",\n        }}\n      >\n        <PageHeader\n          onBack={() => navigate(\"/admin\")}\n          title={`Project - ${project?.name}`}\n          style={{\n            boxShadow: \"1px 1px 10px 1px #ccc\",\n            position: \"fixed\",\n            zIndex: 100,\n            width: \"100%\",\n          }}\n        />\n\n        <Content\n          style={{\n            flex: 1,\n            overflow: \"auto\",\n            padding: \"16px\",\n            paddingTop: \"100px\",\n            maxWidth: \"800px\",\n            width: \"100%\",\n            margin: \"auto\",\n          }}\n        >\n          {project && (\n            <>\n              <Button\n                onClick={() => navigate(`/p-admin/${id}`)}\n                style={{ margin: \"16px\" }}\n              >\n                See client admin panel\n              </Button>\n              <Button\n                onClick={() =>\n                  navigate(`/admin/projects/${project.id}/properties`)\n                }\n                style={{ margin: \"16px\" }}\n              >\n                Manage properties\n              </Button>\n              <Button\n                onClick={() => navigate(`/admin/projects/${project.id}/media`)}\n                style={{ margin: \"16px\" }}\n              >\n                Manage media\n              </Button>\n              <Button\n                onClick={() => navigate(`/admin/projects/${project.id}/ui`)}\n                style={{ margin: \"16px\" }}\n              >\n                Manage UI\n              </Button>\n              <Typography.Paragraph>\n                {`The project full url is ${projectAddress}`}\n                <Button onClick={() => copy(projectAddress)} type=\"link\">\n                  Copy\n                </Button>\n              </Typography.Paragraph>\n\n              <Typography.Paragraph>\n                {`The project gallery url is ${galleryAddress} `}\n                <Button onClick={() => copy(galleryAddress)} type=\"link\">\n                  Copy\n                </Button>\n              </Typography.Paragraph>\n\n              <Typography.Paragraph>\n                {`The project properties api link ${propertiesAddress} `}\n                <Button onClick={() => copy(propertiesAddress)} type=\"link\">\n                  Copy\n                </Button>\n              </Typography.Paragraph>\n\n              <Form\n                form={form}\n                onFinish={onFinish}\n                style={{\n                  padding: \" 16px\",\n                  maxWidth: \"500px\",\n                  margin: \"auto\",\n                }}\n                initialValues={project}\n                labelCol={{ span: 8 }}\n                wrapperCol={{ span: 16 }}\n              >\n                <ProjectFormFields setFieldsValue={setFieldsValue} />\n\n                <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n                  <Button\n                    onClick={() => {\n                      if (form.current) form.current.resetFields();\n                    }}\n                    style={{ width: \"100%\" }}\n                  >\n                    Reset\n                  </Button>\n                </Form.Item>\n              </Form>\n              <div>\n                <div>Project details preview</div>\n                <div\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    flex: 1,\n                    alignItems: \"center\",\n                  }}\n                >\n                  <img\n                    src={clientLogo}\n                    alt=\"logo\"\n                    style={{\n                      maxHeight: clientLogoMaxHeight + \"px\",\n                      maxWidth: clientLogoMaxWidth + \"px\",\n                      marginBottom: \"36px\",\n                    }}\n                  />\n                  {projectLogo ? (\n                    <img\n                      src={projectLogo}\n                      alt=\"logo\"\n                      style={{\n                        maxHeight: projectLogoMaxHeight + \"px\",\n                        maxWidth: projectLogoMaxWidth + \"px\",\n                        marginBottom: \"36px\",\n                      }}\n                    />\n                  ) : (\n                    <h6 style={{ textAlign: \"center\" }}>{projectName}</h6>\n                  )}\n                  {/* <p style={{ textAlign: \"center\" }}>\n                                        {description}\n                                    </p> */}\n                </div>\n              </div>\n            </>\n          )}\n        </Content>\n      </Layout>\n    </LayoutHOC>\n  );\n};\n\nexport default ProjectDetails;\n","/home/andrii/work/immersiv/immersiv-web/src/pages/PropertiesAdmin.jsx",["289"],"import React, { useEffect, useState } from \"react\";\n\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport Properties from \"./Properties\";\nimport LayoutHOC from \"layout/Layout\";\nimport { Layout, PageHeader } from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\nimport propertyService from \"services/property.service\";\nimport projectService from \"services/project.service\";\nimport useLoginCheck from \"hooks/useLoginCheck\";\n\nconst PropertiesAdmin = (props) => {\n    const { id } = useParams();\n\n    const navigate = useNavigate();\n    const [project, setProject] = useState(null);\n    const [properties, setProperties] = useState(null);\n    useLoginCheck();\n\n    useEffect(() => {\n        propertyService.getProperty(id).then((response) => {\n            setProperties(response.data);\n        });\n\n        projectService.getProject(id).then((response) => {\n            setProject(response.data);\n        });\n    }, []);\n    return (\n        <LayoutHOC>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => navigate(`/admin/projects/${id}`)}\n                    title={`Properties of project id: ${id}`}\n                    style={{\n                        boxShadow: \"1px 1px 10px 1px #ccc\",\n                        position: \"fixed\",\n                        zIndex: 100,\n                        width: \"100%\",\n                    }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        paddingTop: \"100px\",\n                        maxWidth: \"1200px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    <Properties\n                        admin\n                        id={id}\n                        setProject={setProject}\n                        setProperties={setProperties}\n                        project={project}\n                        properties={properties}\n                    />\n                </Content>\n            </Layout>\n        </LayoutHOC>\n    );\n};\n\nexport default PropertiesAdmin;\n","/home/andrii/work/immersiv/immersiv-web/src/pages/Projects.jsx",[],"/home/andrii/work/immersiv/immersiv-web/src/pages/MediaAdmin.jsx",["290","291","292","293","294","295"],"import React, { useEffect, useState, useRef } from \"react\";\n\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport LayoutHOC from \"layout/Layout\";\nimport {\n    Button,\n    Form,\n    Input,\n    Layout,\n    List,\n    PageHeader,\n    Popconfirm,\n    Select,\n    Space,\n    Typography,\n    Upload,\n} from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\nimport projectService from \"services/project.service\";\nimport useLoginCheck from \"hooks/useLoginCheck\";\nimport toast from \"react-hot-toast\";\nimport YouTube from \"react-youtube\";\nimport { UploadOutlined } from \"@ant-design/icons\";\nimport axios from \"axios\";\nimport utilsService from \"services/utils.service\";\nimport videojs from \"video.js\";\nimport \"video.js/dist/video-js.css\";\nimport uploadMedia from \"helpers/uploadMedia\";\n\nconst MediaAdmin = (props) => {\n    const { id } = useParams();\n    const formRef = useRef(null);\n\n    const navigate = useNavigate();\n    const [project, setProject] = useState(null);\n    useLoginCheck();\n\n    useEffect(() => {\n        projectService.getProject(id).then((response) => {\n            setProject(response.data);\n        });\n    }, []);\n\n    const onFinish = async (values) => {\n        const response = await projectService.addMedia(id, values);\n        if (response.data) {\n            toast.success(\"Saved\");\n            setProject(response.data);\n            if (formRef.current) formRef.current.resetFields();\n        }\n    };\n    const handleMove = async (mediaId, down) => {\n        const response = await projectService.moveMedia(id, mediaId, down);\n        if (response.data) {\n            toast.success(\"Moved\");\n            setProject(response.data);\n        }\n    };\n    const handleDelete = async (mediaId) => {\n        const response = await projectService.deleteMedia(id, mediaId);\n        if (response.data) {\n            toast.success(\"Deleted\");\n            setProject(response.data);\n        }\n    };\n\n    const customUpload = uploadMedia((values) => {\n        if (formRef.current) {\n            formRef.current.setFieldsValue({\n                ...formRef.current.values,\n                ...values,\n            });\n        }\n    }, formRef?.current?.getFieldValue(\"type\") === \"video\");\n\n    return (\n        <LayoutHOC>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => navigate(`/admin/projects/${id}`)}\n                    title={`Media of project id: ${id}`}\n                    style={{\n                        boxShadow: \"1px 1px 10px 1px #ccc\",\n                        position: \"fixed\",\n                        zIndex: 100,\n                        width: \"100%\",\n                    }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        paddingTop: \"100px\",\n                        maxWidth: \"1200px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    {project && project.media && (\n                        <div>\n                            <List\n                                itemLayout=\"vertical\"\n                                size=\"large\"\n                                dataSource={project.media}\n                                renderItem={(item, index) => (\n                                    <List.Item\n                                        key={item.id}\n                                        actions={[\n                                            <Button\n                                                size=\"small\"\n                                                key=\"up\"\n                                                onClick={() =>\n                                                    handleMove(item.id, false)\n                                                }\n                                            >\n                                                Move up\n                                            </Button>,\n                                            <Button\n                                                size=\"small\"\n                                                key=\"down\"\n                                                onClick={() =>\n                                                    handleMove(item.id, true)\n                                                }\n                                            >\n                                                Move down\n                                            </Button>,\n                                            <Popconfirm\n                                                title=\"Are you sure to delete this media?\"\n                                                onConfirm={() =>\n                                                    handleDelete(item.id)\n                                                }\n                                                okText=\"Yes\"\n                                                cancelText=\"No\"\n                                                key=\"delete\"\n                                            >\n                                                <Button size=\"small\" danger>\n                                                    Delete\n                                                </Button>\n                                            </Popconfirm>,\n                                        ]}\n                                        extra={\n                                            item.type === \"video\" ? (\n                                                <video\n                                                    id=\"my-player\"\n                                                    class=\"video-js\"\n                                                    controls\n                                                    preload=\"auto\"\n                                                    data-setup=\"{}\"\n                                                >\n                                                    <source\n                                                        src={item.url}\n                                                        type=\"video/mp4\"\n                                                    ></source>\n                                                    <p class=\"vjs-no-js\">\n                                                        To view this video\n                                                        please enable\n                                                        JavaScript, and consider\n                                                        upgrading to a web\n                                                        browser that\n                                                        <a\n                                                            href=\"https://videojs.com/html5-video-support/\"\n                                                            target=\"_blank\"\n                                                            rel=\"noreferrer\"\n                                                        >\n                                                            supports HTML5 video\n                                                        </a>\n                                                    </p>\n                                                </video>\n                                            ) : (\n                                                <img\n                                                    width=\"100%\"\n                                                    style={{\n                                                        maxWidth: \"300px\",\n                                                    }}\n                                                    alt=\"logo\"\n                                                    src={item.url}\n                                                />\n                                            )\n                                        }\n                                    >\n                                        <List.Item.Meta\n                                            description={item.type}\n                                            title={`${index + 1}. ${\n                                                item.name || \"no name\"\n                                            }`}\n                                        />\n                                        {item.url}\n                                    </List.Item>\n                                )}\n                            />\n                            <Form\n                                onFinish={onFinish}\n                                style={{\n                                    padding: \" 16px\",\n                                    maxWidth: \"500px\",\n                                    margin: \"auto\",\n                                    backgroundColor: \"#eee\",\n                                }}\n                                ref={formRef}\n                            >\n                                <Typography.Title level={4}>\n                                    Add new media\n                                </Typography.Title>\n                                <Form.Item\n                                    name=\"type\"\n                                    rules={[{ required: true }]}\n                                >\n                                    <Select placeholder=\"Choose type\">\n                                        <Select.Option value=\"photo\">\n                                            Photo\n                                        </Select.Option>\n                                        <Select.Option value=\"plan\">\n                                            Plan\n                                        </Select.Option>\n                                        <Select.Option value=\"video\">\n                                            Video\n                                        </Select.Option>\n                                    </Select>\n                                </Form.Item>\n                                <Form.Item\n                                    name=\"name\"\n                                    rules={[{ required: true }]}\n                                >\n                                    <Input placeholder=\"Name\" />\n                                </Form.Item>\n                                <Form.Item\n                                    name=\"url\"\n                                    rules={[{ required: true }]}\n                                >\n                                    <Input placeholder=\"Url\" readOnly />\n                                </Form.Item>\n                                <Form.Item name=\"thumbnail\" hidden>\n                                    <Input placeholder=\"Thumbnail\" />\n                                </Form.Item>\n                                <Form.Item>\n                                    <Upload\n                                        accept=\"image/*,video/*\"\n                                        listType=\"picture\"\n                                        maxCount={1}\n                                        customRequest={customUpload}\n                                    >\n                                        <Button icon={<UploadOutlined />}>\n                                            Upload (Max: 1)\n                                        </Button>\n                                    </Upload>\n                                </Form.Item>\n\n                                <Form.Item>\n                                    <Button\n                                        type=\"primary\"\n                                        htmlType=\"submit\"\n                                        style={{ width: \"100%\" }}\n                                    >\n                                        Add media\n                                    </Button>\n                                </Form.Item>\n                            </Form>\n                        </div>\n                    )}\n                </Content>\n            </Layout>\n        </LayoutHOC>\n    );\n};\n\nexport default MediaAdmin;\n","/home/andrii/work/immersiv/immersiv-web/src/pages/ProjectA.jsx",["296"],"import React, { useEffect, useRef, useState } from \"react\";\nimport { WebRTCClient } from \"@arcware/webrtc-plugin\";\nimport { AppUI } from \"components/ProjectView/Components/ProjectUI/AppUI\";\n\nconst ProjectA = (props) => {\n  const { project, setVideoInitialized } = props;\n\n  const sizeContainerRef = useRef(null);\n  const containerRef = useRef(null);\n  const videoRef = useRef(null);\n  const [webrtcClient, setWebrtcClient] = useState();\n  const webrtcClientInit = useRef();\n\n  const responseCallback = (message) => {\n    console.log(message);\n  };\n\n  const videoInitialized = () => {\n    setVideoInitialized(true);\n  };\n\n  useEffect(() => {\n    const args = {\n      address:\n        props.project.arcwareAddress ||\n        \"wss://signalling-client.ragnarok.arcware.cloud/\",\n      packageId:\n        props.project.arcwarePackageId ||\n        \"ff41fd0c-cac9-4e4c-abe5-3ada402f57cc\",\n      settings: {},\n      autoplay: { video: true, audio: true },\n      sizeContainer: sizeContainerRef.current,\n      container: containerRef.current,\n      videoRef: videoRef.current,\n      playOverlay: false,\n      loader: () => {},\n      applicationResponse: responseCallback,\n      videoInitializeCallback: videoInitialized,\n    };\n\n    // double load protection\n    if (!webrtcClientInit.current) {\n      webrtcClientInit.current = true;\n      setWebrtcClient(new WebRTCClient(args));\n    }\n  }, []);\n\n  return (\n    <>\n      <div ref={sizeContainerRef} style={{ flex: 1 }}>\n        <div ref={containerRef} style={{ zIndex: 1 }}>\n          <video ref={videoRef} />\n          {/* <Responses responses={responses} /> */}\n        </div>\n      </div>\n      {webrtcClient != null && project?.newUI && (\n        <AppUI\n          emitUIInteraction={webrtcClient.emitUIInteraction}\n          project={project}\n          uiData={project.uiData}\n        />\n      )}\n    </>\n  );\n};\n\nexport default ProjectA;\n","/home/andrii/work/immersiv/immersiv-web/src/pages/PropertiesClient.jsx",["297","298"],"import LayoutHOC from \"layout/Layout\";\nimport React, { useEffect, useState } from \"react\";\n\nimport { Drawer, Layout, Menu, PageHeader } from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\nimport { MenuOutlined } from \"@ant-design/icons\";\nimport { useUser } from \"context/UserContext\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport Properties from \"./Properties\";\nimport projectService from \"services/project.service\";\nimport propertyService from \"services/property.service\";\n\nconst PropertiesClient = (props) => {\n    const { id } = useParams();\n    const { logout, isLoggedIn, authData } = useUser();\n    const navigate = useNavigate();\n    const [project, setProject] = useState(null);\n    const [properties, setProperties] = useState(null);\n\n    const [openDrawer, setOpenDrawer] = useState(false);\n\n    useEffect(() => {\n        propertyService.getProperty(id).then((response) => {\n            setProperties(response.data);\n        });\n\n        projectService.getProject(id).then((response) => {\n            setProject(response.data);\n        });\n    }, []);\n\n    useEffect(() => {\n        if (\n            !isLoggedIn ||\n            (!authData?.super &&\n                id.toString() !== authData?.projectId.toString())\n        ) {\n            logout();\n            navigate(\"/login\");\n            return null;\n        }\n    }, [isLoggedIn, authData?.super, authData?.projectId]);\n\n    return (\n        <LayoutHOC loading={!properties || !project}>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => setOpenDrawer(true)}\n                    backIcon={<MenuOutlined />}\n                    title={\"Appartments\"}\n                    style={{\n                        boxShadow: \"1px 1px 10px 1px #ccc\",\n                        position: \"fixed\",\n                        zIndex: 100,\n                        width: \"100%\",\n                    }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        paddingTop: \"100px\",\n                        maxWidth: \"1200px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    <Properties\n                        id={id}\n                        setProject={setProject}\n                        setProperties={setProperties}\n                        project={project}\n                        properties={properties}\n                    />\n                </Content>\n            </Layout>\n            <Drawer\n                title=\"Menu\"\n                placement=\"left\"\n                onClose={() => setOpenDrawer(false)}\n                visible={openDrawer}\n            >\n                <Menu\n                    mode=\"inline\"\n                    style={{ width: \"100%\" }}\n                    onClick={({ item, key }) => {\n                        setOpenDrawer(false);\n                        switch (key) {\n                            case \"logout\":\n                                logout();\n                                break;\n                            case \"visit\":\n                                navigate(`/p/${project.url}`);\n                                break;\n                            case \"analytics\":\n                                navigate(`/p-admin/${project.id}/analytics`);\n                                break;\n                            default:\n                                return;\n                        }\n                    }}\n                    activeKey=\"properties\"\n                    selectedKeys={[\"properties\"]}\n                >\n                    <Menu.Item key=\"properties\">Properties</Menu.Item>\n                    <Menu.Item key=\"analytics\">Analytics</Menu.Item>\n                    <Menu.Item key=\"visit\">Visit project</Menu.Item>\n                    <Menu.Item key=\"logout\">Logout</Menu.Item>\n                </Menu>\n            </Drawer>\n        </LayoutHOC>\n    );\n};\n\nexport default PropertiesClient;\n","/home/andrii/work/immersiv/immersiv-web/src/pages/Home.jsx",[],"/home/andrii/work/immersiv/immersiv-web/src/pages/Project.jsx",[],"/home/andrii/work/immersiv/immersiv-web/src/pages/ResetPassword.jsx",[],"/home/andrii/work/immersiv/immersiv-web/src/helpers/WithAxios.js",["299"],"import { useEffect } from \"react\";\nimport API from \"api/axios.config\";\nimport { useUser } from \"context/UserContext\";\nimport history from \"helpers/history\";\n\nconst WithAxios = ({ children }) => {\n    const { isInitiated, logout } = useUser();\n\n    useEffect(() => {\n        API.interceptors.response.use(\n            (response) => response,\n            async (error) => {\n                const originalRequest = error.config;\n                if (\n                    error.response.status === 401 &&\n                    originalRequest.url === \"/auth/refresh-token\"\n                ) {\n                    return new Promise((resolve, reject) => {\n                        logout();\n                        history.push(\"/login\");\n                        reject(error);\n                    });\n                }\n\n                if (error.response.status === 401 && !originalRequest._retry) {\n                    try {\n                        originalRequest._retry = true;\n                        const res = await API.post(\"/auth/refresh-token\");\n                        localStorage.setItem(\"token\", res.data.token);\n                        return API(originalRequest);\n                    } catch (error) {\n                        logout();\n                        history.push(\"/login\");\n                    }\n                }\n                return Promise.reject(error);\n            }\n        );\n    }, []);\n\n    return isInitiated ? children : null;\n};\n\nexport default WithAxios;\n","/home/andrii/work/immersiv/immersiv-web/src/services/auth.service.js",[],"/home/andrii/work/immersiv/immersiv-web/src/pages/Properties.jsx",["300"],"import React, { useEffect } from \"react\";\n\nimport propertyService from \"services/property.service\";\nimport PropertiesTable from \"components/ProjectView/Components/PropertiesTable\";\nimport projectService from \"services/project.service\";\nimport useLoginCheck from \"hooks/useLoginCheck\";\n\nconst Properties = (props) => {\n    const { admin, id, project, properties, setProject, setProperties } = props;\n\n    useEffect(() => {\n        propertyService.getProperty(id).then((response) => {\n            setProperties(response.data);\n        });\n\n        projectService.getProject(id).then((response) => {\n            setProject(response.data);\n        });\n    }, []);\n\n    useLoginCheck();\n\n    return (\n        properties &&\n        project && (\n            <PropertiesTable\n                properties={properties}\n                setProperties={setProperties}\n                project={project}\n                admin={admin}\n            />\n        )\n    );\n};\n\nexport default Properties;\n","/home/andrii/work/immersiv/immersiv-web/src/services/admin.service.js",[],"/home/andrii/work/immersiv/immersiv-web/src/services/project.service.js",[],"/home/andrii/work/immersiv/immersiv-web/src/services/ga.service.js",[],"/home/andrii/work/immersiv/immersiv-web/src/services/constant.service.js",[],"/home/andrii/work/immersiv/immersiv-web/src/helpers/useQuery.js",[],"/home/andrii/work/immersiv/immersiv-web/src/services/property.service.js",[],"/home/andrii/work/immersiv/immersiv-web/src/helpers/uploadMedia.js",[],"/home/andrii/work/immersiv/immersiv-web/src/services/utils.service.js",[],"/home/andrii/work/immersiv/immersiv-web/src/hooks/useLoginCheck.js",["301"],"import { useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useUser } from \"context/UserContext\";\n\nconst useLoginCheck = () => {\n    const navigate = useNavigate();\n    const { isLoggedIn, authData, logout, isInitiated } = useUser();\n    useEffect(() => {\n        if (isInitiated) {\n            if (!isLoggedIn) {\n                logout();\n                navigate(\"/login\");\n                return null;\n            }\n\n            if (!authData?.super) {\n                if (authData?.projectId) {\n                    navigate(`/p-admin/${authData.projectId}`);\n                    return null;\n                } else {\n                    logout();\n                    navigate(\"/login\");\n                    return null;\n                }\n            }\n        }\n    }, [isLoggedIn, authData?.super, authData?.projectId, isInitiated]);\n};\n\nexport default useLoginCheck;\n","/home/andrii/work/immersiv/immersiv-web/src/components/ForgotPasswordModal.jsx",[],"/home/andrii/work/immersiv/immersiv-web/src/components/ProjectFormFields.jsx",["302","303"],"import { LoadingOutlined } from \"@ant-design/icons\";\nimport {\n  Button,\n  Checkbox,\n  Form,\n  Image,\n  Input,\n  InputNumber,\n  Switch,\n  Upload,\n} from \"antd\";\nimport TextArea from \"antd/lib/input/TextArea\";\nimport uploadMedia from \"helpers/uploadMedia\";\nimport React, { useEffect, useState } from \"react\";\n\nconst Logo = (props) => {\n  const customUploadClientLogo = uploadMedia(\n    (values) => {\n      props.setFieldsValue({ [props.id]: values.url });\n    },\n    props.isVideo,\n    true\n  );\n  const [image, setImage] = useState(\"\");\n  useEffect(() => {\n    setTimeout(() => setImage(props[props.id]), 5000);\n  }, [props[props.id]]);\n  return (\n    <>\n      {image === props[props.id] ? (\n        props.isVideo ? (\n          <video\n            id=\"my-player\"\n            class=\"video-js\"\n            controls\n            preload=\"auto\"\n            data-setup=\"{}\"\n          >\n            <source src={image} type=\"video/mp4\"></source>\n            <p class=\"vjs-no-js\">\n              To view this video please enable JavaScript, and consider\n              upgrading to a web browser that\n              <a\n                href=\"https://videojs.com/html5-video-support/\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                supports HTML5 video\n              </a>\n            </p>\n          </video>\n        ) : (\n          <Image src={image} style={{ maxHeight: \"50px\" }} />\n        )\n      ) : (\n        <LoadingOutlined />\n      )}\n      <div style={{ marginTop: \"10px\" }}>\n        <Upload\n          customRequest={customUploadClientLogo}\n          showUploadList={false}\n          maxCount={1}\n          getValueFromEvent={() => {}}\n        >\n          <Button>Change</Button>\n        </Upload>\n      </div>\n    </>\n  );\n};\n\nconst ProjectFormFields = ({ setFieldsValue }) => {\n  return (\n    <>\n      <Form.Item\n        name=\"name\"\n        label=\"Name\"\n        rules={[\n          {\n            required: true,\n            message: \"Please set name!\",\n          },\n        ]}\n      >\n        <Input placeholder=\"Name\" />\n      </Form.Item>\n\n      <Form.Item\n        name=\"url\"\n        label=\"Url\"\n        rules={[\n          {\n            required: true,\n            message: \"Please add url!\",\n          },\n        ]}\n        extra=\"This is only what should appear at the end of url, for example 'best-hotel', 'sky_mall'... Do not put https://tour.immersiv.com.au/ here!\"\n      >\n        <Input placeholder=\"Url\" />\n      </Form.Item>\n\n      <Form.Item label=\"New UI\" name=\"newUI\" valuePropName=\"checked\">\n        <Checkbox />\n      </Form.Item>\n\n      <Form.Item\n        label=\"Arcware project\"\n        name=\"isArcware\"\n        valuePropName=\"checked\"\n      >\n        <Checkbox />\n      </Form.Item>\n\n      <Form.Item name=\"arcwareAddress\" label=\"Arcware address\">\n        <Input placeholder=\"Arcware address\" />\n      </Form.Item>\n\n      <Form.Item name=\"arcwarePackageId\" label=\"Arcware project id\">\n        <Input placeholder=\"Arcware project id\" />\n      </Form.Item>\n\n      <Form.Item name=\"projectId\" label=\"Project id\" hidden>\n        <Input placeholder=\"Project id\" />\n      </Form.Item>\n\n      <Form.Item name=\"modelId\" label=\"Model id\" hidden>\n        <Input placeholder=\"Model id\" />\n      </Form.Item>\n\n      <Form.Item name=\"levelsCount\" label=\"Number of levels\">\n        <InputNumber placeholder=\"Number of levels\" />\n      </Form.Item>\n\n      <Form.Item\n        label=\"Custom background\"\n        name=\"backgroundOn\"\n        valuePropName=\"checked\"\n      >\n        <Checkbox />\n      </Form.Item>\n      <Form.Item\n        label=\"Background video\"\n        name=\"backgroundTypeVideo\"\n        valuePropName=\"checked\"\n      >\n        <Checkbox />\n      </Form.Item>\n      <Form.Item\n        label=\"Background video\"\n        valuePropName=\"backgroundVideo\"\n        name=\"backgroundVideo\"\n      >\n        <Logo setFieldsValue={setFieldsValue} isVideo />\n      </Form.Item>\n      <Form.Item\n        label=\"Background image\"\n        valuePropName=\"backgroundImage\"\n        name=\"backgroundImage\"\n      >\n        <Logo setFieldsValue={setFieldsValue} />\n      </Form.Item>\n\n      <Form.Item name=\"adminEmail\" label=\"Client login\">\n        <Input placeholder=\"Admin email\" />\n      </Form.Item>\n\n      <Form.Item\n        name=\"adminPassword\"\n        label=\"Client password\"\n        rules={[\n          {\n            min: 6,\n            message: \"Must have length at least 6!\",\n          },\n        ]}\n      >\n        <Input placeholder=\"Admin password\" />\n      </Form.Item>\n\n      <Form.Item name=\"analytic\" label=\"Analytics property\">\n        <Input placeholder=\"Google analytics property id\" />\n      </Form.Item>\n\n      <Form.Item\n        name=\"mobileNativeEvents\"\n        label=\"Mobile native events\"\n        valuePropName=\"checked\"\n      >\n        <Switch>Mobile native events</Switch>\n      </Form.Item>\n      <Form.Item\n        name=\"desktopNativeEvents\"\n        label=\"Desktop native events\"\n        valuePropName=\"checked\"\n      >\n        <Switch />\n      </Form.Item>\n\n      <Form.Item name=\"published\" valuePropName=\"checked\" label=\"Published\">\n        <Checkbox />\n      </Form.Item>\n\n      <Form.Item\n        label=\"Project details on\"\n        name=\"projectDetailsOn\"\n        valuePropName=\"checked\"\n      >\n        <Checkbox />\n      </Form.Item>\n      <Form.Item label=\"Project details duration\" name=\"projectDetailsDuraton\">\n        <Input type=\"number\" />\n      </Form.Item>\n\n      <Form.Item\n        label=\"Client logo\"\n        valuePropName=\"clientLogo\"\n        name=\"clientLogo\"\n      >\n        <Logo setFieldsValue={setFieldsValue} />\n      </Form.Item>\n      <Form.Item label=\"Client logo max width\" name=\"clientLogoMaxWidth\">\n        <Input type=\"number\" />\n      </Form.Item>\n      <Form.Item label=\"Client logo max height\" name=\"clientLogoMaxHeight\">\n        <Input type=\"number\" />\n      </Form.Item>\n\n      <Form.Item\n        label=\"Project logo\"\n        valuePropName=\"projectLogo\"\n        name=\"projectLogo\"\n      >\n        <Logo setFieldsValue={setFieldsValue} />\n      </Form.Item>\n      <Form.Item label=\"Project logo max width\" name=\"projectLogoMaxWidth\">\n        <Input type=\"number\" />\n      </Form.Item>\n      <Form.Item label=\"Project logo max height\" name=\"projectLogoMaxHeight\">\n        <Input type=\"number\" />\n      </Form.Item>\n      <Form.Item\n        name=\"projectName\"\n        label=\"Project name\"\n        extra=\"This text will appear on the screen where the project is being loaded if there is no logo\"\n      >\n        <Input placeholder=\"projectName\" />\n      </Form.Item>\n      <Form.Item\n        name=\"description\"\n        label=\"Description\"\n        extra=\"This text will appear on the screen where the project is being loaded\"\n      >\n        <TextArea placeholder=\"Description\" rows={4} />\n      </Form.Item>\n\n      <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n        <Button type=\"primary\" htmlType=\"submit\" style={{ width: \"100%\" }}>\n          Save\n        </Button>\n      </Form.Item>\n    </>\n  );\n};\n\nexport default ProjectFormFields;\n","/home/andrii/work/immersiv/immersiv-web/src/components/ProjectView/Layout/ProjectView.jsx",["304","305","306"],"import React, { useState } from \"react\";\nimport { Button } from \"./Button\";\n\nimport StreamViewWrapper from \"../Components/StreamView/StreamView\";\nimport { PoweredLogo } from \"./PoweredLogo\";\n\nimport styles from \"./ProjectView.module.css\";\nimport { MailFilled, PhoneFilled } from \"@ant-design/icons\";\nimport { isMobile as isMobileAgent } from \"react-device-detect\";\n\nimport { useWindowSize } from \"@react-hook/window-size\";\nimport { Loading } from \"components/ProjectView/Components/Loading/Loading\";\nimport ProjectA from \"pages/ProjectA\";\nconst ProjectView = (props) => {\n    const { project, constant } = props;\n    const [width, height] = useWindowSize();\n    // const isMobile = isMobileAgent || width < 1200 || height < 700;\n    const isMobile = true;\n    const [loaded, setLoaded] = useState(false);\n    const [videoInitialized, setVideoInitialized] = useState(false);\n    const [status, setStatus] = useState(false);\n\n    return (\n        <>\n            <div className={isMobile ? styles.flex1 : styles.wrap}>\n                {!isMobile && <div className={styles.top}>{project.name}</div>}\n                <div className={isMobile ? styles.flex1 : styles.center}>\n                    {!isMobile && <PoweredLogo invisible />}\n                    <div className={isMobile ? styles.flex1 : styles.viewWrap}>\n                        <div\n                            className={\n                                isMobile ? styles.flex1 : styles.viewInner\n                            }\n                        >\n                            {project && project.isArcware ? (\n                                <ProjectA\n                                    project={project}\n                                    setLoaded={setLoaded}\n                                    setVideoInitialized={setVideoInitialized}\n                                />\n                            ) : (\n                                <StreamViewWrapper\n                                    setLoaded={setLoaded}\n                                    setStatus={setStatus}\n                                    project={project}\n                                />\n                            )}\n                            {loaded && (\n                                <img\n                                    src=\"/images/logo-white.png\"\n                                    alt=\"logo\"\n                                    className={styles.mLogo}\n                                />\n                            )}\n                            {!isMobile && (\n                                <>\n                                    {loaded && (\n                                        <img\n                                            src=\"/images/logo-white.png\"\n                                            alt=\"logo\"\n                                            className={styles.mLogo}\n                                        />\n                                    )}\n                                    <div className={styles.mCenter}>\n                                        <Button\n                                            link={`tel:${constant.call}`}\n                                            name=\"phone\"\n                                        ></Button>\n                                        <Button\n                                            link={`mailto:${constant.email}`}\n                                            name=\"mail\"\n                                        ></Button>\n                                    </div>\n                                </>\n                            )}\n                        </div>\n                    </div>\n                    {!isMobile && <PoweredLogo />}\n                </div>\n                {!isMobile && (\n                    <div className={styles.bottomWrap}>\n                        <PoweredLogo invisible />\n\n                        <div className={styles.bottomCenter}>\n                            <div className={styles.bottomCenterLeft}>\n                                <img\n                                    src=\"/images/controls.png\"\n                                    alt=\"logo\"\n                                    style={{ width: \"100%\" }}\n                                />\n                            </div>\n                            <div className={styles.bottomCenterCenter}>\n                                {project.logo && (\n                                    <img\n                                        src=\"/images/imperial-logo.png\"\n                                        alt=\"logo\"\n                                        style={{ height: \"120px\" }}\n                                    />\n                                )}\n                            </div>\n                            <div className={styles.bottomCenterRight}>\n                                <a\n                                    href={`tel:${constant.call}`}\n                                    className={styles.contactWrap}\n                                >\n                                    <div className={styles.contactIconWrap}>\n                                        <PhoneFilled\n                                            name=\"phone\"\n                                            className={styles.contactIcon}\n                                        />\n                                    </div>\n                                    <div style={{ width: \"10px\" }}></div>\n                                    <div className={styles.contactText}>\n                                        {constant.phone}\n                                    </div>\n                                </a>\n                                {/* <div style={{ height: \"20px\" }}></div> */}\n                                <a\n                                    href={`mailto:${constant.email}`}\n                                    className={styles.contactWrap}\n                                >\n                                    <div className={styles.contactIconWrap}>\n                                        <MailFilled\n                                            name=\"mail\"\n                                            size=\"small\"\n                                            className={styles.contactIcon}\n                                        />\n                                    </div>\n                                    <div style={{ width: \"10px\" }}></div>\n                                    <div className={styles.contactText}>\n                                        {constant.email}\n                                    </div>\n                                </a>\n                            </div>\n                        </div>\n                        <PoweredLogo invisible />\n                    </div>\n                )}\n            </div>\n            <Loading\n                loaded={loaded}\n                status={status}\n                project={project}\n                setLoaded={setLoaded}\n                videoInitialized={videoInitialized}\n            />\n        </>\n    );\n};\n\nexport default ProjectView;\n","/home/andrii/work/immersiv/immersiv-web/src/api/axios.config.js",[],"/home/andrii/work/immersiv/immersiv-web/src/components/DashboardItem/DataItems/index.js",[],"/home/andrii/work/immersiv/immersiv-web/src/components/ProjectView/Components/PropertiesTable.jsx",["307","308"],"import {\n    Button,\n    Form,\n    Input,\n    InputNumber,\n    Popconfirm,\n    Select,\n    Table,\n    Typography,\n} from \"antd\";\nimport React, { useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport propertyService from \"services/property.service\";\n\nconst { Option } = Select;\n\nconst transferOrientationToObject = (data) => {\n    if (!data.Orientation) return data;\n    const o = {};\n    if (data.Orientation.indexOf(\"N\") !== -1) o.N = true;\n    else if (data.Orientation.indexOf(\"S\") !== -1) o.S = true;\n    if (data.Orientation.indexOf(\"E\") !== -1) o.E = true;\n    else if (data.Orientation.indexOf(\"W\") !== -1) o.W = true;\n    return { ...data, Orientation: o };\n};\n\nconst transferOrientationToString = (data) => {\n    let o = \"\";\n    if (data.Orientation.N) o = o + \"N\";\n    else if (data.Orientation.S) o = o + \"S\";\n    if (data.Orientation.E) o = o + \"E\";\n    else if (data.Orientation.W) o = o + \"W\";\n    return { ...data, Orientation: o };\n};\n\nconst EditableCell = ({\n    editing,\n    dataIndex,\n    title,\n    inputType,\n    property,\n    index,\n    children,\n    ...restProps\n}) => {\n    let inputNode = <InputNumber />;\n\n    switch (inputType) {\n        case \"number\":\n            inputNode = <InputNumber />;\n            break;\n        case \"orientation\":\n            inputNode = (\n                <Select>\n                    <Option value=\"N\">North</Option>\n                    <Option value=\"NE\">North-East</Option>\n                    <Option value=\"E\">East</Option>\n                    <Option value=\"SE\">South-East</Option>\n                    <Option value=\"S\">South</Option>\n                    <Option value=\"SW\">South-West</Option>\n                    <Option value=\"W\">West</Option>\n                    <Option value=\"NW\">North-West</Option>\n                </Select>\n            );\n            break;\n        case \"availability\":\n            inputNode = (\n                <Select>\n                    <Option value=\"available\">Available</Option>\n                    <Option value=\"reserved\">Reserved</Option>\n                    <Option value=\"sold\">Sold</Option>\n                </Select>\n            );\n            break;\n        default:\n            inputNode = <Input />;\n    }\n    return (\n        <td {...restProps}>\n            {editing ? (\n                <Form.Item\n                    name={dataIndex}\n                    style={{\n                        margin: 0,\n                        width: \"100%\",\n                    }}\n                    rules={[\n                        {\n                            required: true,\n                            message: `Please Input ${title}!`,\n                        },\n                    ]}\n                >\n                    {inputNode}\n                </Form.Item>\n            ) : (\n                children\n            )}\n        </td>\n    );\n};\n\nconst capitalize = (str) => str.charAt(0).toUpperCase() + str.slice(1);\n\nconst PropertiesTable = (props) => {\n    const { properties, project, setProperties, admin, setEditModalOpen } =\n        props;\n    const [selectedProperties, setSelectedProperties] = useState([]);\n    const [editingKey, setEditingKey] = useState(\"\");\n\n    const [form] = Form.useForm();\n    const isEditing = (property) => property.id === editingKey;\n\n    const edit = (property) => {\n        form.setFieldsValue(property);\n        setEditingKey(property.id);\n    };\n\n    const cancel = () => {\n        setEditingKey(\"\");\n    };\n\n    const save = async (key) => {\n        try {\n            const values = await form.validateFields();\n            const response = await propertyService.saveProperty(\n                project.id,\n                key,\n                transferOrientationToObject(values)\n            );\n\n            if (response.data) {\n                toast.success(\"Saved\");\n                setProperties(response.data);\n                setEditingKey(\"\");\n            }\n        } catch (errInfo) {\n            console.log(\"Validate Failed:\", errInfo);\n        }\n    };\n\n    const deleteProperty = async () => {\n        const response = await propertyService.deleteProperty(\n            project.id,\n            selectedProperties\n        );\n        if (response.data) setProperties(response.data);\n    };\n\n    const columns = [\n        {\n            title: \"Name\",\n            dataIndex: \"Name\",\n            sorter: (a, b) => (a.Name > b.Name ? 1 : -1),\n            sortDirections: [\"descend\", \"ascend\"],\n            editable: admin,\n            inputType: \"text\",\n            width: 100,\n        },\n        {\n            title: \"Availability\",\n            dataIndex: \"Availability\",\n            sorter: (a, b) => (a.Availability > b.Availability ? 1 : -1),\n            sortDirections: [\"descend\", \"ascend\"],\n            onFilter: (value, property) =>\n                property.Availability.indexOf(value) === 0,\n            editable: true,\n            inputType: \"availability\",\n            width: 100,\n            render: (_, property) => capitalize(property.Availability),\n        },\n        {\n            title: \"Surface\",\n            dataIndex: \"Surface\",\n            sorter: (a, b) => a.Surface - b.Surface,\n            sortDirections: [\"descend\", \"ascend\"],\n            editable: admin,\n            inputType: \"number\",\n            width: 100,\n        },\n        {\n            title: \"Price\",\n            dataIndex: \"Price\",\n            sorter: (a, b) => a.Price - b.Price,\n            sortDirections: [\"descend\", \"ascend\"],\n            editable: true,\n            inputType: \"number\",\n            width: 100,\n        },\n        {\n            title: \"Bedrooms\",\n            dataIndex: \"BedroomsCount\",\n            key: \"bedrooms\",\n            sortDirections: [\"descend\", \"ascend\"],\n            editable: admin,\n            inputType: \"number\",\n            width: 100,\n        },\n        {\n            title: \"Bathrooms\",\n            dataIndex: \"BathroomsCount\",\n            sorter: (a, b) => a.BathroomsCount - b.BathroomsCount,\n            sortDirections: [\"descend\", \"ascend\"],\n            editable: admin,\n            inputType: \"number\",\n            width: 100,\n        },\n        ...(project.url.toLowerCase() === \"Imperial_Square\".toLowerCase()\n            ? []\n            : [\n                  {\n                      title: \"Frontage\",\n                      dataIndex: \"Frontage\",\n                      sorter: (a, b) => a.Frontage - b.Frontage,\n                      sortDirections: [\"descend\", \"ascend\"],\n                      editable: admin,\n                      inputType: \"number\",\n                      width: 100,\n                  },\n                  {\n                      title: \"Depth\",\n                      dataIndex: \"Depth\",\n                      sorter: (a, b) => a.Depth - b.Depth,\n                      sortDirections: [\"descend\", \"ascend\"],\n                      editable: admin,\n                      inputType: \"number\",\n                      width: 100,\n                  },\n              ]),\n        {\n            title: \"Orientation\",\n            dataIndex: \"Orientation\",\n\n            sorter: (a, b) =>\n                transferOrientationToString(a).Orientation >\n                transferOrientationToString(b).Orientation\n                    ? 1\n                    : -1,\n            sortDirections: [\"descend\", \"ascend\"],\n            editable: admin,\n            inputType: \"orientation\",\n            width: 100,\n        },\n        {\n            title: \"Actions\",\n            dataIndex: \"actions\",\n            width: 80,\n            render: (_, property) => {\n                const editable = isEditing(property);\n                return editable ? (\n                    <span>\n                        <Typography.Link\n                            onClick={() => save(property.id)}\n                            style={{\n                                marginRight: 8,\n                            }}\n                        >\n                            Save\n                        </Typography.Link>\n\n                        <Typography.Link onClick={cancel}>\n                            Cancel\n                        </Typography.Link>\n                    </span>\n                ) : (\n                    <span>\n                        <Typography.Link\n                            disabled={editingKey !== \"\"}\n                            onClick={() => edit(property)}\n                        >\n                            Edit\n                        </Typography.Link>\n                    </span>\n                );\n            },\n        },\n    ];\n\n    const mergedColumns = columns.map((col) => {\n        if (!col.editable) {\n            return col;\n        }\n\n        return {\n            ...col,\n            onCell: (property) => ({\n                property,\n                inputType: col.inputType,\n                dataIndex: col.dataIndex,\n                title: col.title,\n                editing: isEditing(property),\n            }),\n        };\n    });\n\n    const onAddProperty = async () => {\n        const response = await propertyService.createProperty(\n            project.id,\n            properties.length ? properties[properties.length - 1].id : \"\"\n        );\n        if (response.data) {\n            toast.success(\"Added\");\n            setProperties(response.data.newProperties);\n            setEditingKey(response.data.newProperty.id);\n            form.setFieldsValue(\n                transferOrientationToString(response.data.newProperty)\n            );\n            document.querySelector(\"div.ant-table-body\").scrollTop = 1000000;\n        }\n    };\n    return (\n        <>\n            <Form form={form} component={false}>\n                <Table\n                    components={{\n                        body: {\n                            cell: EditableCell,\n                        },\n                    }}\n                    size=\"small\"\n                    bordered\n                    dataSource={properties.map((i) => {\n                        const d = transferOrientationToString(i);\n                        return { ...d, key: d.id };\n                    })}\n                    columns={mergedColumns}\n                    rowClassName=\"editable-row\"\n                    rowSelection={\n                        admin\n                            ? {\n                                  type: \"checkbox\",\n                                  onChange: (_, selectedRows) => {\n                                      setSelectedProperties(\n                                          selectedRows.map((i) => i.id)\n                                      );\n                                  },\n                              }\n                            : null\n                    }\n                    pagination={false}\n                    tableLayout=\"fixed\"\n                    scroll={{\n                        y: \"calc(100vh - 230px)\",\n                    }}\n                />\n            </Form>\n            {admin && (\n                <Button\n                    onClick={onAddProperty}\n                    style={{ margin: \"16px\" }}\n                    type=\"primary\"\n                >\n                    Add property\n                </Button>\n            )}\n            {!!selectedProperties.length && admin && (\n                <Typography.Link\n                    onClick={() => deleteProperty()}\n                    type=\"danger\"\n                    disabled={editingKey}\n                >\n                    Delete\n                </Typography.Link>\n            )}\n        </>\n    );\n};\n\nexport default PropertiesTable;\n","/home/andrii/work/immersiv/immersiv-web/src/components/ProjectView/Layout/PoweredLogo.jsx",[],"/home/andrii/work/immersiv/immersiv-web/src/components/DashboardItem/DataItems/ChartItem/ChartItem.js",[],"/home/andrii/work/immersiv/immersiv-web/src/components/DashboardItem/DataItems/TextItem/TextItem.js",[],"/home/andrii/work/immersiv/immersiv-web/src/components/ProjectView/Layout/Button.jsx",[],"/home/andrii/work/immersiv/immersiv-web/src/components/ProjectView/Components/StreamView/StreamView.jsx",["309","310","311"],"import {\n    ModelDefinition,\n    PlatformNext,\n    UndefinedModelDefinition,\n    DefaultStreamerOptions,\n    StreamerStatus,\n} from \"@pureweb/platform-sdk\";\n\nimport {\n    useStreamer,\n    useLaunchRequest,\n    System,\n} from \"@pureweb/platform-sdk-react\";\n\nimport React, { useEffect, useState } from \"react\";\nimport useAsyncEffect from \"use-async-effect\";\nimport \"./StreamView.css\";\n\nimport { EmbeddedView } from \"../EmbededView/EmbededView\";\n\nimport logger from \"../../Log\";\nimport { isMobile as isMobileAgent } from \"react-device-detect\";\n\nconst audio = new Audio();\naudio.autoplay = true;\naudio.volume = 0.5;\n\n// Initialize platform reference\nconst platform = new PlatformNext();\nplatform.initialize({\n    endpoint: \"https://api.pureweb.io\",\n});\n\nconst StreamView = (props) => {\n    const { project } = props;\n\n    const [modelDefinitionUnavailable, setModelDefinitionUnavailable] =\n        useState(false);\n    const [modelDefinition, setModelDefinition] = useState(\n        new UndefinedModelDefinition()\n    );\n    const [availableModels, setAvailableModels] = useState();\n    const [launchRequestError, setLaunchRequestError] = useState();\n    const streamerOptions = DefaultStreamerOptions;\n\n    const [status, launchRequest, queueLaunchRequest] = useLaunchRequest(\n        platform,\n        modelDefinition,\n        {}\n    );\n    const [streamerStatus, emitter, videoStream, audioStream] = useStreamer(\n        platform,\n        launchRequest,\n        streamerOptions\n    );\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        if (streamerStatus === StreamerStatus.Failed) {\n            platform.disconnect();\n        }\n    }, [streamerStatus]);\n\n    if (audioStream) {\n        audio.srcObject = audioStream;\n    }\n\n    const launch = async () => {\n        setLoading(true);\n        audio.load();\n\n        if (project.LaunchType !== \"local\") {\n            try {\n                await queueLaunchRequest();\n            } catch (err) {\n                setLaunchRequestError(err);\n            }\n        }\n    };\n    useAsyncEffect(async () => {\n        if (project.projectId) {\n            // logger.info(\"Initializing available models: \" + project.projectId);\n            try {\n                await platform.useAnonymousCredentials(project.projectId);\n                await platform.connect();\n                // logger.info(\"Agent Connected: \" + platform.agent.id);\n                streamerOptions.iceServers =\n                    platform.agent.serviceCredentials.iceServers;\n                streamerOptions.forceRelay = project.ForceRelay;\n                const models = await platform.getModels();\n                setAvailableModels(models);\n                // logger.debug(\"Available models\", models);\n            } catch (err) {\n                logger.error(err);\n            }\n        }\n    }, [project]);\n    useEffect(() => {\n        if (availableModels?.length) {\n            const selectedModels = availableModels.filter(function (\n                model: ModelDefinition\n            ): boolean {\n                if (project.modelId === model.id) {\n                    // If there is a version specified and we encounter it\n                    if (project.Version && project.Version === model.version) {\n                        return true;\n                    }\n                    // If there is no version specified and we find the primary version\n                    if (!project.Version && model.active) {\n                        return true;\n                    }\n                }\n                return false;\n            });\n            if (selectedModels?.length) {\n                setModelDefinition(selectedModels[0]);\n            } else {\n                setModelDefinitionUnavailable(true);\n            }\n        }\n    }, [availableModels]);\n\n    useEffect(() => {\n        if (modelDefinition.type === 0) return;\n\n        launch();\n    }, [modelDefinition]);\n\n    // Log status messages\n    useEffect(() => {\n        // logger.info(\"Status\", status, streamerStatus);\n        props.setStatus(status);\n    }, [status, streamerStatus]);\n    // Notify user of missing or errors in configuration\n    if (!project.modelId || !project.projectId) {\n        props.setLoaded(true);\n        return (\n            <div\n                style={{\n                    display: \"flex\",\n                    height: \"100%\",\n                    overflow: \"none\",\n                    textAlign: \"center\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    flex: 1,\n                }}\n            >\n                <p>\n                    Your client has one or more configuration errors. Please\n                    consult the{\" \"}\n                    <a href=\"https://www.npmjs.com/package/@pureweb/cra-template-pureweb-client\">\n                        {\" \"}\n                        README{\" \"}\n                    </a>{\" \"}\n                    for details on how to configure the client template.\n                </p>\n            </div>\n        );\n    }\n\n    if (modelDefinitionUnavailable) {\n        props.setLoaded(true);\n        return (\n            <div\n                style={{\n                    display: \"flex\",\n                    height: \"100%\",\n                    overflow: \"none\",\n                    textAlign: \"center\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    flex: 1,\n                }}\n            >\n                <span>The model that you have requested does not exist</span>\n            </div>\n        );\n    }\n\n    if (launchRequestError) {\n        props.setLoaded(true);\n        return (\n            <div\n                style={{\n                    display: \"flex\",\n                    height: \"100%\",\n                    overflow: \"none\",\n                    textAlign: \"center\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    flex: 1,\n                }}\n            >\n                <span>\n                    {process.env.NODE_ENV === \"development\"\n                        ? `There was an error with the launch request: ${launchRequestError}`\n                        : \"It appears the requested model is currently not online as per your set schedule. Please contact support if it should be available.\"}\n                </span>\n            </div>\n        );\n    }\n\n    // Begin connection\n    if (streamerStatus === StreamerStatus.Disconnected) {\n        props.setLoaded(true);\n        return (\n            <div\n                style={{\n                    display: \"flex\",\n                    height: \"100%\",\n                    overflow: \"none\",\n                    textAlign: \"center\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    flex: 1,\n                }}\n            >\n                <h2>Disconnected from stream</h2>\n            </div>\n        );\n    }\n\n    if (streamerStatus === StreamerStatus.Failed) {\n        props.setLoaded(true);\n        return (\n            <div\n                style={{\n                    display: \"flex\",\n                    height: \"100%\",\n                    overflow: \"none\",\n                    textAlign: \"center\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    flex: 1,\n                }}\n            >\n                <h2>Failure during stream</h2>\n                <h2>Please refresh to request a new session</h2>\n            </div>\n        );\n    }\n\n    if (streamerStatus === StreamerStatus.Withdrawn) {\n        props.setLoaded(true);\n        return (\n            <div\n                style={{\n                    display: \"flex\",\n                    height: \"100%\",\n                    overflow: \"none\",\n                    textAlign: \"center\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    flex: 1,\n                }}\n            >\n                <h2>Streamer contribution withdrawn</h2>\n            </div>\n        );\n    }\n\n    if (loading) {\n        const useNativeTouchEvents =\n            !!project[\n                isMobileAgent ? \"mobileNativeEvents\" : \"desktopNativeEvents\"\n            ];\n        return (\n            <EmbeddedView\n                VideoStream={videoStream}\n                StreamerStatus={streamerStatus}\n                LaunchRequestStatus={status}\n                InputEmitter={emitter}\n                UseNativeTouchEvents={useNativeTouchEvents}\n                UsePointerLock={project.UsePointerLock}\n                PointerLockRelease={project.PointerLockRelease}\n                setLoaded={props.setLoaded}\n            />\n        );\n    } else if (project.LaunchType !== \"local\" && !availableModels) {\n        return (\n            <div\n                style={{\n                    display: \"flex\",\n                    height: \"100%\",\n                    overflow: \"none\",\n                    textAlign: \"center\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    flex: 1,\n                }}\n            >\n                <h2>Initializing...</h2>\n            </div>\n        );\n    } else if (project.LaunchType !== \"local\" && !availableModels?.length) {\n        props.setLoaded(true);\n        return (\n            <div\n                style={{\n                    display: \"flex\",\n                    height: \"100%\",\n                    overflow: \"none\",\n                    textAlign: \"center\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    flex: 1,\n                }}\n            >\n                <h2>No models are currently available in this environment.</h2>\n            </div>\n        );\n    } else {\n        return null;\n    }\n};\n\nconst StreamViewWrapper = (props) => {\n    return System.IsBrowserSupported() ? (\n        <div\n            style={{\n                backgroundColor: \"black\",\n                height: \"100%\",\n                flex: 1,\n                display: \"flex\",\n                color: \"white\",\n            }}\n        >\n            <StreamView\n                setLoaded={props.setLoaded}\n                setStatus={props.setStatus}\n                project={props.project}\n            />\n        </div>\n    ) : (\n        <div className=\"ui red segment center aligned basic\">\n            <h2 className=\"header\">Your browser is currently unsupported</h2>\n        </div>\n    );\n};\n\nexport default StreamViewWrapper;\n","/home/andrii/work/immersiv/immersiv-web/src/components/ProjectView/Components/Loading/Loading.jsx",["312","313","314"],"import { Progress } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\nimport styles from \"./Loading.module.css\";\n\nconst statusMessage = {\n    unknown: { text: \"Initializing your connection\", value: 8, from: 0 },\n    accepted: { text: \"Accepted, requesting model\", value: 40, from: 8 },\n    queued: { text: \"In queue\", value: 40, from: 8 },\n    requested: { text: \"Model requested\", value: 50, from: 40 },\n    ready: { text: \"Ready, 3D session launching\", value: 100, from: 50 },\n    arcware: { text: \"The project is loading\", value: 100, from: 0 },\n    serviced: { text: \"Viewing model\" },\n    cancelled: { text: \"Cancelled\" },\n    modelerror: { text: \"An issue with the model has occurred\" },\n    unavailable: { text: \"The requested model does not exist\" },\n};\n\nlet interval = null;\n\nexport const Loading = (props) => {\n    const { loaded, setLoaded, status, project, videoInitialized } = props;\n    const [message, setMessage] = useState(null);\n    const [nextPercentage, setNextPercentage] = useState(0);\n    const [percentage, setPercentage] = useState(0);\n    useEffect(() => {\n        if (status?.status && statusMessage[status.status])\n            setMessage(statusMessage[status.status]);\n    }, [status?.status]);\n\n    useEffect(() => {\n        if (project.isArcware) setMessage(statusMessage.arcware);\n    }, [project.isArcware]);\n\n    useEffect(() => {\n        if (message?.text)\n            setNextPercentage(\n                message.value ? Math.max(nextPercentage, message.value) : 0\n            );\n    }, [message?.text]);\n\n    useEffect(() => {\n        const speed = project.isArcware ? 100 : 870;\n        if (nextPercentage) {\n            setPercentage(message?.from || 0);\n            if (interval) clearTimeout(interval);\n            interval = setTimeout(\n                () => startPercentage(message?.from || 0, nextPercentage),\n                Math.random() * speed\n            );\n        }\n\n        const startPercentage = (p, nP) => {\n            if (p < nP) {\n                if (interval) clearTimeout(interval);\n                setPercentage(p + 1);\n                interval = setTimeout(\n                    () => startPercentage(p + 1, nP),\n                    Math.random() * speed\n                );\n            }\n        };\n    }, [nextPercentage]);\n\n    useEffect(() => {\n        if (percentage === 100 && project.isArcware && videoInitialized) {\n            setTimeout(() => setLoaded(true), 2000);\n        }\n    }, [percentage, videoInitialized]);\n\n    return loaded ? null : (\n        <div\n            className={styles.wrap}\n            style={\n                project.backgroundOn && !project.backgroundTypeVideo\n                    ? {\n                          backgroundImage: `url(\"${project.backgroundImage}\")`,\n                          backgroundRepeat: \"no-repeat\",\n                          backgroundSize: \"cover\",\n                          backgroundPosition: \"center\",\n                      }\n                    : undefined\n            }\n        >\n            {project.backgroundOn && project.backgroundTypeVideo ? (\n                <video\n                    autoPlay\n                    muted\n                    loop\n                    className={styles.backgroundVideo}\n                    playsInline\n                >\n                    <source src={project.backgroundVideo} type=\"video/mp4\" />\n                </video>\n            ) : null}\n            <div\n                style={{\n                    background: \"rgba(0,0,0,.5)\",\n                    inset: \"0px\",\n                    position: \"absolute\",\n                }}\n            />\n\n            <div className={styles.center}>\n                <div>\n                    {project.projectDetailsOn && (\n                        <div\n                            style={{\n                                display: \"flex\",\n                                flexDirection: \"column\",\n                                alignItems: \"center\",\n                            }}\n                        >\n                            <img\n                                src=\"/images/logo-white.png\"\n                                alt=\"logo\"\n                                className={styles.logo}\n                            />\n                            <img\n                                src={project.clientLogo}\n                                alt=\"logo\"\n                                style={{\n                                    maxHeight:\n                                        project.clientLogoMaxHeight + \"px\",\n                                    maxWidth: project.clientLogoMaxWidth + \"px\",\n                                    width: \"100%\",\n                                    marginBottom: \"36px\",\n                                    marginTop: \"36px\",\n                                }}\n                            />\n                            {project.projectLogo ? (\n                                <img\n                                    src={project.projectLogo}\n                                    alt=\"logo\"\n                                    style={{\n                                        maxHeight:\n                                            project.projectLogoMaxHeight + \"px\",\n                                        maxWidth:\n                                            project.projectLogoMaxWidth + \"px\",\n                                        width: \"100%\",\n                                        marginBottom: \"36px\",\n                                    }}\n                                />\n                            ) : (\n                                <h6 style={{ textAlign: \"center\" }}>\n                                    {project.projectName}\n                                </h6>\n                            )}\n                            {/* <p\n                                style={{\n                                    textAlign: \"center\",\n                                    marginBottom: \"36px\",\n                                }}\n                            >\n                                {project.description}\n                            </p> */}\n                        </div>\n                    )}\n\n                    <div className={styles.video}>\n                        <video\n                            autoPlay\n                            loop\n                            muted\n                            style={{ objectFit: \"contain\" }}\n                            playsInline\n                        >\n                            <source\n                                src=\"https://immersivmedia.s3.ap-southeast-2.amazonaws.com/website-media/navigation-a.mp4\"\n                                type=\"video/mp4\"\n                            />\n                        </video>\n                    </div>\n                </div>\n            </div>\n            <div style={{ zIndex: 1 }}>\n                {message?.text\n                    ? `${message?.text} ${percentage}%`\n                    : \"Initializing...\"}\n            </div>\n            {!!nextPercentage && (\n                <Progress\n                    // size=\"small\"\n                    type=\"line\"\n                    percent={percentage}\n                    style={{ marginBottom: 20 }}\n                    trailColor=\"black\"\n                    strokeColor={{\n                        \"0%\": \"#108ee9\",\n                        \"100%\": \"#87d068\",\n                    }}\n                    strokeWidth={3}\n                    showInfo={false}\n                    format={\n                        percentage !== 100\n                            ? (percent) => (\n                                  <span style={{ color: \"white\" }}>\n                                      {message?.text || \"Initializing...\"}\n                                      {percent}%\n                                  </span>\n                              )\n                            : undefined\n                    }\n                />\n            )}\n        </div>\n    );\n};\n","/home/andrii/work/immersiv/immersiv-web/src/components/ProjectView/Log.js",[],"/home/andrii/work/immersiv/immersiv-web/src/components/ProjectView/Components/EmbededView/EmbededView.jsx",[],"/home/andrii/work/immersiv/immersiv-web/src/components/ProjectView/Components/LoadingView/LoadingView.jsx",[],"/home/andrii/work/immersiv/immersiv-web/src/stories/Header.stories.jsx",[],"/home/andrii/work/immersiv/immersiv-web/src/stories/Button.stories.jsx",[],"/home/andrii/work/immersiv/immersiv-web/src/stories/Page.stories.jsx",[],"/home/andrii/work/immersiv/immersiv-web/src/stories/Button.jsx",[],"/home/andrii/work/immersiv/immersiv-web/src/stories/Header.jsx",[],"/home/andrii/work/immersiv/immersiv-web/src/stories/Page.jsx",[],"/home/andrii/work/immersiv/immersiv-web/src/components/ProjectView/Components/ProjectUI/AppUI/index.jsx",[],"/home/andrii/work/immersiv/immersiv-web/src/components/ProjectView/Components/ProjectUI/Bottom/InfoButton/index.jsx",[],"/home/andrii/work/immersiv/immersiv-web/src/components/ProjectView/Components/ProjectUI/Bottom/UIButtons/index.jsx",[],"/home/andrii/work/immersiv/immersiv-web/src/components/ProjectView/Components/ProjectUI/Bottom/ButtonUI/index.jsx",[],"/home/andrii/work/immersiv/immersiv-web/src/components/ProjectView/Components/ProjectUI/Bottom/SunControls/index.jsx",[],"/home/andrii/work/immersiv/immersiv-web/src/components/ProjectView/Components/ProjectUI/Bottom/FilterControls/index.jsx",[],"/home/andrii/work/immersiv/immersiv-web/src/components/ProjectView/Components/ProjectUI/Bottom/Gallery/index.jsx",["315","316","317"],"import React, { useEffect, useRef, useState } from \"react\";\n\nimport \"react-image-gallery/styles/css/image-gallery.css\";\nimport ImageGallery from \"react-image-gallery\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  top: 20px;\n  bottom: 60px;\n  left: 20px;\n  right: 20px;\n  padding: 10px;\n  position: absolute;\n\n  visibility: ${({ open }) => (open ? \"visible\" : \"hidden\")};\n`;\n\nconst Inner = styled.div`\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n\nconst Gallery = ({ project, activeUI, uiData }) => {\n  const [tab, setTab] = useState(\"\");\n  const [slide, setSlide] = useState(0);\n  const [dimensionsW, setDimensionsW] = useState({});\n  const ref = useRef();\n\n  useEffect(() => {\n    setSlide(0);\n  }, [tab]);\n\n  const getContainerSize = () => {\n    if (ref.current)\n      setDimensionsW({\n        width: ref.current.clientWidth,\n        height: ref.current.clientHeight,\n      });\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", getContainerSize);\n    getContainerSize();\n  }, []);\n  if (!project) return null;\n  const { media } = project;\n\n  const images =\n    media\n      ?.filter((i) => (tab ? tab === i.type : true))\n      .map((i, index) => {\n        if (i.type !== \"video\") {\n          return {\n            ...i,\n            original: i.url,\n            thumbnail: i.thumbnail,\n            description: i.name,\n            originalClass: \"featured-slide\",\n            thumbnailClass: \"featured-thumb\",\n          };\n        } else {\n          return {\n            ...i,\n            index,\n            thumbnail: i.url,\n            renderItem: (k) => {\n              return slide === k.index ? (\n                <video\n                  // id=\"my-player\"\n                  // class=\"video-js\"\n                  controls\n                  preload=\"auto\"\n                  autoPlay\n                  muted\n                  // data-setup=\"{}\"\n                  style={{ width: \"100%\", height: \"100%\" }}\n                >\n                  <source src={i.url} type=\"video/mp4\"></source>\n                  <p class=\"vjs-no-js\">\n                    To view this video please enable JavaScript, and consider\n                    upgrading to a web browser that\n                    <a\n                      href=\"https://videojs.com/html5-video-support/\"\n                      target=\"_blank\"\n                      rel=\"noreferrer\"\n                    >\n                      supports HTML5 video\n                    </a>\n                  </p>\n                </video>\n              ) : null;\n            },\n            renderThumbInner: (k) => (\n              <div style={{ position: \"relative\" }}>\n                <video\n                  id=\"my-player\"\n                  class=\"video-js\"\n                  controls\n                  data-setup=\"{}\"\n                  style={{ width: \"100%\", height: \"100%\" }}\n                >\n                  <source src={i.url} type=\"video/mp4\"></source>\n                  <p class=\"vjs-no-js\">\n                    To view this video please enable JavaScript, and consider\n                    upgrading to a web browser that\n                    <a\n                      href=\"https://videojs.com/html5-video-support/\"\n                      target=\"_blank\"\n                      rel=\"noreferrer\"\n                    >\n                      supports HTML5 video\n                    </a>\n                  </p>\n                </video>\n                <div\n                  style={{\n                    position: \"absolute\",\n                    left: 0,\n                    right: 0,\n                    top: 0,\n                    bottom: 0,\n                  }}\n                />\n              </div>\n            ),\n          };\n        }\n      })\n      .filter((i) => i) || [];\n\n  const handleTabClick = (newTab) => {\n    setTab(newTab === tab ? \"\" : newTab);\n  };\n\n  return (\n    <Container\n      ref={ref}\n      open={activeUI.includes(\"gallery\")}\n      style={{\n        backgroundColor: (uiData?.background?.hex || \"#000000\") + \"CC\",\n      }}\n    >\n      <Inner>\n        <div className=\"buttons\">\n          <div\n            onClick={() => handleTabClick(\"photo\")}\n            className={tab === \"photo\" ? \"active\" : undefined}\n          >\n            <img src=\"/gallery/photo.png\" />\n          </div>\n          <div\n            onClick={() => handleTabClick(\"plan\")}\n            className={tab === \"plan\" ? \"active\" : undefined}\n          >\n            <img src=\"/gallery/plan.png\" />\n          </div>\n          <div\n            onClick={() => handleTabClick(\"video\")}\n            className={tab === \"video\" ? \"active\" : undefined}\n          >\n            <img src=\"/gallery/video.png\" />\n          </div>\n        </div>\n        <ImageGallery\n          items={images}\n          showBullets={false}\n          showFullscreenButton={false}\n          showPlayButton={false}\n          // showNav={false}\n          thumbnailPosition={\n            dimensionsW.height > dimensionsW.width ? \"bottom\" : \"right\"\n          }\n          onSlide={setSlide}\n          startIndex={slide}\n        />\n      </Inner>\n    </Container>\n  );\n};\n\nexport default Gallery;\n","/home/andrii/work/immersiv/immersiv-web/src/components/ProjectView/Components/ProjectUI/Bottom/LocationControls/index.jsx",[],"/home/andrii/work/immersiv/immersiv-web/src/components/ProjectView/Components/ProjectUI/Bottom/ApartmentContols/index.jsx",[],"/home/andrii/work/immersiv/immersiv-web/src/pages/UIAdmin.jsx",["318","319","320"],"/home/andrii/work/immersiv/immersiv-web/src/components/ProjectView/Components/ProjectUI/Bottom/AdminButton/index.jsx",[],{"ruleId":"321","replacedBy":"322"},{"ruleId":"323","replacedBy":"324"},{"ruleId":"325","severity":1,"message":"326","line":18,"column":10,"nodeType":"327","messageId":"328","endLine":18,"endColumn":17},{"ruleId":"325","severity":1,"message":"329","line":15,"column":8,"nodeType":"327","messageId":"328","endLine":15,"endColumn":21},{"ruleId":"330","severity":1,"message":"331","line":43,"column":8,"nodeType":"332","endLine":43,"endColumn":58,"suggestions":"333"},{"ruleId":"330","severity":1,"message":"334","line":49,"column":8,"nodeType":"332","endLine":49,"endColumn":10,"suggestions":"335"},{"ruleId":"330","severity":1,"message":"336","line":59,"column":8,"nodeType":"332","endLine":59,"endColumn":43,"suggestions":"337"},{"ruleId":"330","severity":1,"message":"338","line":59,"column":9,"nodeType":"339","endLine":59,"endColumn":18},{"ruleId":"330","severity":1,"message":"338","line":59,"column":20,"nodeType":"339","endLine":59,"endColumn":29},{"ruleId":"340","severity":1,"message":"341","line":98,"column":21,"nodeType":"342","endLine":98,"endColumn":24},{"ruleId":"325","severity":1,"message":"343","line":2,"column":28,"nodeType":"327","messageId":"328","endLine":2,"endColumn":34},{"ruleId":"325","severity":1,"message":"344","line":55,"column":9,"nodeType":"327","messageId":"328","endLine":55,"endColumn":20},{"ruleId":"330","severity":1,"message":"334","line":28,"column":8,"nodeType":"332","endLine":28,"endColumn":10,"suggestions":"345"},{"ruleId":"325","severity":1,"message":"346","line":14,"column":5,"nodeType":"327","messageId":"328","endLine":14,"endColumn":10},{"ruleId":"325","severity":1,"message":"347","line":22,"column":8,"nodeType":"327","messageId":"328","endLine":22,"endColumn":15},{"ruleId":"325","severity":1,"message":"348","line":24,"column":8,"nodeType":"327","messageId":"328","endLine":24,"endColumn":13},{"ruleId":"325","severity":1,"message":"349","line":25,"column":8,"nodeType":"327","messageId":"328","endLine":25,"endColumn":20},{"ruleId":"325","severity":1,"message":"350","line":26,"column":8,"nodeType":"327","messageId":"328","endLine":26,"endColumn":15},{"ruleId":"330","severity":1,"message":"334","line":42,"column":8,"nodeType":"332","endLine":42,"endColumn":10,"suggestions":"351"},{"ruleId":"330","severity":1,"message":"352","line":46,"column":6,"nodeType":"332","endLine":46,"endColumn":8,"suggestions":"353"},{"ruleId":"330","severity":1,"message":"334","line":30,"column":8,"nodeType":"332","endLine":30,"endColumn":10,"suggestions":"354"},{"ruleId":"330","severity":1,"message":"331","line":42,"column":8,"nodeType":"332","endLine":42,"endColumn":58,"suggestions":"355"},{"ruleId":"330","severity":1,"message":"356","line":39,"column":8,"nodeType":"332","endLine":39,"endColumn":10,"suggestions":"357"},{"ruleId":"330","severity":1,"message":"358","line":19,"column":8,"nodeType":"332","endLine":19,"endColumn":10,"suggestions":"359"},{"ruleId":"330","severity":1,"message":"360","line":27,"column":8,"nodeType":"332","endLine":27,"endColumn":71,"suggestions":"361"},{"ruleId":"330","severity":1,"message":"362","line":27,"column":6,"nodeType":"332","endLine":27,"endColumn":23,"suggestions":"363"},{"ruleId":"330","severity":1,"message":"338","line":27,"column":7,"nodeType":"339","endLine":27,"endColumn":22},{"ruleId":"325","severity":1,"message":"364","line":9,"column":22,"nodeType":"327","messageId":"328","endLine":9,"endColumn":35},{"ruleId":"325","severity":1,"message":"365","line":16,"column":12,"nodeType":"327","messageId":"328","endLine":16,"endColumn":17},{"ruleId":"325","severity":1,"message":"366","line":16,"column":19,"nodeType":"327","messageId":"328","endLine":16,"endColumn":25},{"ruleId":"325","severity":1,"message":"367","line":6,"column":5,"nodeType":"327","messageId":"328","endLine":6,"endColumn":15},{"ruleId":"325","severity":1,"message":"368","line":106,"column":56,"nodeType":"327","messageId":"328","endLine":106,"endColumn":72},{"ruleId":"330","severity":1,"message":"369","line":121,"column":8,"nodeType":"332","endLine":121,"endColumn":25,"suggestions":"370"},{"ruleId":"330","severity":1,"message":"371","line":127,"column":8,"nodeType":"332","endLine":127,"endColumn":25,"suggestions":"372"},{"ruleId":"330","severity":1,"message":"362","line":133,"column":8,"nodeType":"332","endLine":133,"endColumn":32,"suggestions":"373"},{"ruleId":"330","severity":1,"message":"374","line":40,"column":8,"nodeType":"332","endLine":40,"endColumn":23,"suggestions":"375"},{"ruleId":"330","severity":1,"message":"376","line":63,"column":8,"nodeType":"332","endLine":63,"endColumn":24,"suggestions":"377"},{"ruleId":"330","severity":1,"message":"378","line":69,"column":8,"nodeType":"332","endLine":69,"endColumn":38,"suggestions":"379"},{"ruleId":"380","severity":1,"message":"381","line":150,"column":13,"nodeType":"342","endLine":150,"endColumn":45},{"ruleId":"380","severity":1,"message":"381","line":156,"column":13,"nodeType":"342","endLine":156,"endColumn":44},{"ruleId":"380","severity":1,"message":"381","line":162,"column":13,"nodeType":"342","endLine":162,"endColumn":45},{"ruleId":"325","severity":1,"message":"343","line":1,"column":38,"nodeType":"327","messageId":"328","endLine":1,"endColumn":44},{"ruleId":"330","severity":1,"message":"334","line":28,"column":6,"nodeType":"332","endLine":28,"endColumn":8,"suggestions":"382"},{"ruleId":"330","severity":1,"message":"383","line":40,"column":6,"nodeType":"332","endLine":40,"endColumn":23,"suggestions":"384"},"no-native-reassign",["385"],"no-negated-in-lhs",["386"],"no-unused-vars","'useUser' is defined but never used.","Identifier","unusedVar","'useLoginCheck' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'id', 'logout', and 'navigate'. Either include them or remove the dependency array.","ArrayExpression",["387"],"React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["388"],"React Hook useEffect has missing dependencies: 'getMetricData' and 'period.length'. Either include them or remove the dependency array.",["389"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","MemberExpression","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useRef' is defined but never used.","'description' is assigned a value but never used.",["390"],"'Space' is defined but never used.","'YouTube' is defined but never used.","'axios' is defined but never used.","'utilsService' is defined but never used.","'videojs' is defined but never used.",["391"],"React Hook useEffect has missing dependencies: 'props.project.arcwareAddress', 'props.project.arcwarePackageId', and 'videoInitialized'. Either include them or remove the dependency array.",["392"],["393"],["394"],"React Hook useEffect has a missing dependency: 'logout'. Either include it or remove the dependency array.",["395"],"React Hook useEffect has missing dependencies: 'id', 'setProject', and 'setProperties'. Either include them or remove the dependency array.",["396"],"React Hook useEffect has missing dependencies: 'logout' and 'navigate'. Either include them or remove the dependency array.",["397"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["398"],"'isMobileAgent' is defined but never used.","'width' is assigned a value but never used.","'height' is assigned a value but never used.","'Popconfirm' is defined but never used.","'setEditModalOpen' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'project.Version' and 'project.modelId'. Either include them or remove the dependency array.",["399"],"React Hook useEffect has a missing dependency: 'launch'. Either include it or remove the dependency array.",["400"],["401"],"React Hook useEffect has missing dependencies: 'message.value' and 'nextPercentage'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setNextPercentage' needs the current value of 'message.value'.",["402"],"React Hook useEffect has missing dependencies: 'message?.from' and 'project.isArcware'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setPercentage' needs the current value of 'message.from'.",["403"],"React Hook useEffect has missing dependencies: 'project.isArcware' and 'setLoaded'. Either include them or remove the dependency array.",["404"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",["405"],"React Hook useEffect has a missing dependency: 'uiData'. Either include it or remove the dependency array. You can also do a functional update 'setUiData(u => ...)' if you only need 'uiData' in the 'setUiData' call.",["406"],"no-global-assign","no-unsafe-negation",{"desc":"407","fix":"408"},{"desc":"409","fix":"410"},{"desc":"411","fix":"412"},{"desc":"409","fix":"413"},{"desc":"409","fix":"414"},{"desc":"415","fix":"416"},{"desc":"409","fix":"417"},{"desc":"407","fix":"418"},{"desc":"419","fix":"420"},{"desc":"421","fix":"422"},{"desc":"423","fix":"424"},{"desc":"425","fix":"426"},{"desc":"427","fix":"428"},{"desc":"429","fix":"430"},{"desc":"431","fix":"432"},{"desc":"433","fix":"434"},{"desc":"435","fix":"436"},{"desc":"437","fix":"438"},{"desc":"409","fix":"439"},{"desc":"440","fix":"441"},"Update the dependencies array to be: [isLoggedIn, authData?.super, authData?.projectId, id, logout, navigate]",{"range":"442","text":"443"},"Update the dependencies array to be: [id]",{"range":"444","text":"445"},"Update the dependencies array to be: [getMetricData, period.length, project?.id]",{"range":"446","text":"447"},{"range":"448","text":"445"},{"range":"449","text":"445"},"Update the dependencies array to be: [props.project.arcwareAddress, props.project.arcwarePackageId, videoInitialized]",{"range":"450","text":"451"},{"range":"452","text":"445"},{"range":"453","text":"443"},"Update the dependencies array to be: [logout]",{"range":"454","text":"455"},"Update the dependencies array to be: [id, setProject, setProperties]",{"range":"456","text":"457"},"Update the dependencies array to be: [isLoggedIn, authData?.super, authData.projectId, isInitiated, logout, navigate]",{"range":"458","text":"459"},"Update the dependencies array to be: [props]",{"range":"460","text":"461"},"Update the dependencies array to be: [availableModels, project.Version, project.modelId]",{"range":"462","text":"463"},"Update the dependencies array to be: [launch, modelDefinition]",{"range":"464","text":"465"},"Update the dependencies array to be: [props, status, streamerStatus]",{"range":"466","text":"467"},"Update the dependencies array to be: [message?.text, message.value, nextPercentage]",{"range":"468","text":"469"},"Update the dependencies array to be: [message?.from, nextPercentage, project.isArcware]",{"range":"470","text":"471"},"Update the dependencies array to be: [percentage, project.isArcware, setLoaded, videoInitialized]",{"range":"472","text":"473"},{"range":"474","text":"445"},"Update the dependencies array to be: [project?.uiData, uiData]",{"range":"475","text":"476"},[1407,1457],"[isLoggedIn, authData?.super, authData?.projectId, id, logout, navigate]",[1600,1602],"[id]",[1852,1887],"[getMetricData, period.length, project?.id]",[934,936],[1142,1144],[1383,1385],"[props.project.arcwareAddress, props.project.arcwarePackageId, videoInitialized]",[1089,1091],[1364,1414],[1410,1412],"[logout]",[655,657],"[id, setProject, setProperties]",[805,868],"[isLoggedIn, authData?.super, authData.projectId, isInitiated, logout, navigate]",[616,633],"[props]",[3785,3802],"[availableModels, project.Version, project.modelId]",[3902,3919],"[launch, modelDefinition]",[4070,4094],"[props, status, streamerStatus]",[1536,1551],"[message?.text, message.value, nextPercentage]",[2280,2296],"[message?.from, nextPercentage, project.isArcware]",[2467,2497],"[percentage, project.isArcware, setLoaded, videoInitialized]",[971,973],[1264,1281],"[project?.uiData, uiData]"]
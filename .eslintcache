[{"/home/andrii/immersiv-web/src/index.js":"1","/home/andrii/immersiv-web/src/App.js":"2","/home/andrii/immersiv-web/src/reportWebVitals.js":"3","/home/andrii/immersiv-web/src/context/UserContext.jsx":"4","/home/andrii/immersiv-web/src/helpers/history.js":"5","/home/andrii/immersiv-web/src/pages/Login.jsx":"6","/home/andrii/immersiv-web/src/pages/Properties.jsx":"7","/home/andrii/immersiv-web/src/pages/ProjectDetails.jsx":"8","/home/andrii/immersiv-web/src/pages/Admins.jsx":"9","/home/andrii/immersiv-web/src/pages/Constants.jsx":"10","/home/andrii/immersiv-web/src/pages/Home.jsx":"11","/home/andrii/immersiv-web/src/pages/PropertiesClient.jsx":"12","/home/andrii/immersiv-web/src/pages/Projects.jsx":"13","/home/andrii/immersiv-web/src/pages/ResetPassword.jsx":"14","/home/andrii/immersiv-web/src/layout/Layout.jsx":"15","/home/andrii/immersiv-web/src/pages/Project.jsx":"16","/home/andrii/immersiv-web/src/pages/CreateProject.jsx":"17","/home/andrii/immersiv-web/src/pages/AnalyticClient.jsx":"18","/home/andrii/immersiv-web/src/helpers/WithAxios.js":"19","/home/andrii/immersiv-web/src/services/auth.service.js":"20","/home/andrii/immersiv-web/src/services/constant.service.js":"21","/home/andrii/immersiv-web/src/helpers/useQuery.js":"22","/home/andrii/immersiv-web/src/services/admin.service.js":"23","/home/andrii/immersiv-web/src/services/project.service.js":"24","/home/andrii/immersiv-web/src/services/property.service.js":"25","/home/andrii/immersiv-web/src/services/ga.service.js":"26","/home/andrii/immersiv-web/src/components/ProjectFormFields.jsx":"27","/home/andrii/immersiv-web/src/components/ForgotPasswordModal.jsx":"28","/home/andrii/immersiv-web/src/components/ProjectView/ProjectView.jsx":"29","/home/andrii/immersiv-web/src/components/ProjectView/Components/PropertiesTable.jsx":"30","/home/andrii/immersiv-web/src/api/axios.config.js":"31","/home/andrii/immersiv-web/src/components/ProjectView/Components/Loading/Loading.jsx":"32","/home/andrii/immersiv-web/src/components/ProjectView/Layout/MobileLayout/MobileLayout.jsx":"33","/home/andrii/immersiv-web/src/components/ProjectView/Layout/DesktopLayout/DesktopLayout.jsx":"34","/home/andrii/immersiv-web/src/components/ProjectView/Layout/DesktopLayout/PoweredLogo.jsx":"35","/home/andrii/immersiv-web/src/components/ProjectView/Components/StreamView/StreamView.jsx":"36","/home/andrii/immersiv-web/src/components/ProjectView/Layout/MobileLayout/Button.jsx":"37","/home/andrii/immersiv-web/src/components/ProjectView/Log.js":"38","/home/andrii/immersiv-web/src/components/ProjectView/Components/EmbededView/EmbededView.jsx":"39","/home/andrii/immersiv-web/src/components/ProjectView/Components/LoadingView/LoadingView.jsx":"40","/home/andrii/immersiv-web/src/pages/PropertiesAdmin.jsx":"41"},{"size":670,"mtime":1647377509064,"results":"42","hashOfConfig":"43"},{"size":3636,"mtime":1647936971709,"results":"44","hashOfConfig":"43"},{"size":362,"mtime":1640368180000,"results":"45","hashOfConfig":"43"},{"size":1973,"mtime":1647395854751,"results":"46","hashOfConfig":"43"},{"size":87,"mtime":1640368180000,"results":"47","hashOfConfig":"43"},{"size":3911,"mtime":1647385448388,"results":"48","hashOfConfig":"43"},{"size":7430,"mtime":1647940881904,"results":"49","hashOfConfig":"43"},{"size":4866,"mtime":1647941434910,"results":"50","hashOfConfig":"43"},{"size":7904,"mtime":1647386179612,"results":"51","hashOfConfig":"43"},{"size":4458,"mtime":1647386179540,"results":"52","hashOfConfig":"43"},{"size":188,"mtime":1647337840944,"results":"53","hashOfConfig":"43"},{"size":4102,"mtime":1647940441569,"results":"54","hashOfConfig":"43"},{"size":8880,"mtime":1647389477320,"results":"55","hashOfConfig":"43"},{"size":5587,"mtime":1647391907329,"results":"56","hashOfConfig":"43"},{"size":805,"mtime":1646300467353,"results":"57","hashOfConfig":"43"},{"size":1204,"mtime":1647378841361,"results":"58","hashOfConfig":"43"},{"size":3306,"mtime":1647940901386,"results":"59","hashOfConfig":"43"},{"size":2655,"mtime":1647713007127,"results":"60","hashOfConfig":"43"},{"size":2148,"mtime":1647395855063,"results":"61","hashOfConfig":"43"},{"size":1135,"mtime":1640368180000,"results":"62","hashOfConfig":"43"},{"size":251,"mtime":1645578221413,"results":"63","hashOfConfig":"43"},{"size":158,"mtime":1640368180000,"results":"64","hashOfConfig":"43"},{"size":317,"mtime":1647372383591,"results":"65","hashOfConfig":"43"},{"size":614,"mtime":1647394614965,"results":"66","hashOfConfig":"43"},{"size":667,"mtime":1647359130538,"results":"67","hashOfConfig":"43"},{"size":185,"mtime":1647702576320,"results":"68","hashOfConfig":"43"},{"size":2738,"mtime":1647940915527,"results":"69","hashOfConfig":"43"},{"size":2844,"mtime":1645918040931,"results":"70","hashOfConfig":"43"},{"size":1561,"mtime":1646085045017,"results":"71","hashOfConfig":"43"},{"size":4546,"mtime":1647940416555,"results":"72","hashOfConfig":"43"},{"size":555,"mtime":1646135178856,"results":"73","hashOfConfig":"43"},{"size":2507,"mtime":1646086848631,"results":"74","hashOfConfig":"43"},{"size":953,"mtime":1646085024669,"results":"75","hashOfConfig":"43"},{"size":3551,"mtime":1647378708627,"results":"76","hashOfConfig":"43"},{"size":483,"mtime":1645484578692,"results":"77","hashOfConfig":"43"},{"size":10329,"mtime":1647395855083,"results":"78","hashOfConfig":"43"},{"size":468,"mtime":1647377791994,"results":"79","hashOfConfig":"43"},{"size":107,"mtime":1645547392556,"results":"80","hashOfConfig":"43"},{"size":3584,"mtime":1646086965323,"results":"81","hashOfConfig":"43"},{"size":5021,"mtime":1646085095883,"results":"82","hashOfConfig":"43"},{"size":2722,"mtime":1647939577346,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"dgk7vr",{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165"},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176"},"/home/andrii/immersiv-web/src/index.js",[],"/home/andrii/immersiv-web/src/App.js",["177"],"import history from \"helpers/history\";\nimport Layout from \"layout/Layout\";\nimport Admins from \"pages/Admins\";\nimport AnalyticClient from \"pages/AnalyticClient\";\nimport Constants from \"pages/Constants\";\nimport CreateProject from \"pages/CreateProject\";\nimport Login from \"pages/Login\";\nimport ProjectDetails from \"pages/ProjectDetails\";\nimport Projects from \"pages/Projects\";\nimport Properties from \"pages/Properties\";\nimport PropertiesAdmin from \"pages/PropertiesAdmin\";\nimport PropertiesClient from \"pages/PropertiesClient\";\nimport { lazy, Suspense } from \"react\";\nimport { Toaster } from \"react-hot-toast\";\nimport { BrowserRouter, Route, Routes } from \"react-router-dom\";\n\nconst Home = lazy(() => import(\"pages/Home\"));\nconst Project = lazy(() => import(\"pages/Project\"));\n\nconst ResetPassword = lazy(() => import(\"pages/ResetPassword\"));\n// const Preview = lazy(() => import(\"pages/Preview\"));\n\nfunction App() {\n    return (\n        <BrowserRouter history={history}>\n            <Suspense\n                fallback={<Layout>{/* <Spinner size={100} /> */}</Layout>}\n            >\n                <>\n                    <Toaster position=\"top-right\" />\n                    <Routes>\n                        <Route exact path={\"/\"} element={<Home />} />\n                        <Route path=\"/login\" element={<Login />} />\n                        <Route\n                            exact\n                            path=\"/admin\"\n                            element={<Projects />}\n                        ></Route>\n                        <Route\n                            exact\n                            path=\"/admin/projects/:id\"\n                            element={<ProjectDetails />}\n                        ></Route>\n                        <Route\n                            exact\n                            path=\"/admin/projects/create\"\n                            element={<CreateProject />}\n                        ></Route>\n                        <Route\n                            exact\n                            path=\"/admin/projects/:id/properties\"\n                            element={<PropertiesAdmin />}\n                        ></Route>\n                        <Route\n                            exact\n                            path=\"/admin/contant\"\n                            element={<Constants />}\n                        ></Route>\n                        <Route\n                            exact\n                            path=\"/admin/admins\"\n                            element={<Admins />}\n                        ></Route>\n\n                        <Route\n                            path=\"/reset-password\"\n                            element={<ResetPassword />}\n                        ></Route>\n                        <Route\n                            exact\n                            path=\"/p/:id\"\n                            element={<Project />}\n                        ></Route>\n                        <Route\n                            exact\n                            path=\"/p-admin/:id\"\n                            element={<PropertiesClient />}\n                        ></Route>\n\n                        <Route\n                            exact\n                            path=\"/p-admin/:id/analytics\"\n                            element={<AnalyticClient />}\n                        ></Route>\n\n                        <Route\n                            path=\"*\"\n                            element={<h1>404 Error Found</h1>}\n                        ></Route>\n                    </Routes>\n                </>\n            </Suspense>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","/home/andrii/immersiv-web/src/reportWebVitals.js",[],"/home/andrii/immersiv-web/src/context/UserContext.jsx",[],"/home/andrii/immersiv-web/src/helpers/history.js",[],"/home/andrii/immersiv-web/src/pages/Login.jsx",["178"],"// import { Button, HelperText, Input, Label } from \"@windmill/react-ui\";\r\nimport ForgotPasswordModal from \"components/ForgotPasswordModal\";\r\nimport { useUser } from \"context/UserContext\";\r\nimport Layout from \"layout/Layout\";\r\nimport React, { useState } from \"react\";\r\nimport toast from \"react-hot-toast\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport authService from \"services/auth.service\";\r\nimport { Form, Input, Button, Typography } from \"antd\";\r\nimport { UserOutlined, LockOutlined } from \"@ant-design/icons\";\r\n\r\nconst Login = () => {\r\n    const { isLoggedIn, setUserState, authData } = useUser();\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [redirectToReferrer, setRedirectToReferrer] = useState(false);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const onFinish = async (data) => {\r\n        const { email, password } = data;\r\n\r\n        try {\r\n            setIsLoading(true);\r\n            const data = await authService.login(email, password);\r\n            toast.success(\"Login successful 🔓\");\r\n\r\n            setTimeout(() => {\r\n                setUserState(data);\r\n                setRedirectToReferrer(true);\r\n                setIsLoading(false);\r\n            }, 1500);\r\n        } catch (error) {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    if (\r\n        (isLoggedIn || redirectToReferrer) &&\r\n        (authData?.super || authData?.projectId)\r\n    ) {\r\n        navigate(\"/admin\");\r\n    }\r\n\r\n    return (\r\n        <Layout title=\"Login\" loading={isLoading}>\r\n            <Form\r\n                name=\"normal_login\"\r\n                onFinish={onFinish}\r\n                style={{\r\n                    padding: \"100px 16px\",\r\n                    maxWidth: \"500px\",\r\n                    margin: \"auto\",\r\n                }}\r\n            >\r\n                <Typography.Title\r\n                    style={{ textAlign: \"center\", marginBottom: \"50px\" }}\r\n                >\r\n                    Manage IMMERSIVE\r\n                </Typography.Title>\r\n                <Form.Item\r\n                    name=\"email\"\r\n                    rules={[\r\n                        {\r\n                            type: \"email\",\r\n                            message: \"The input is not valid E-mail!\",\r\n                        },\r\n                        {\r\n                            required: true,\r\n                            message: \"Please input your E-mail!\",\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input\r\n                        prefix={\r\n                            <UserOutlined className=\"site-form-item-icon\" />\r\n                        }\r\n                        placeholder=\"Email\"\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"password\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: \"Please input your Password!\",\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input.Password\r\n                        prefix={\r\n                            <LockOutlined className=\"site-form-item-icon\" />\r\n                        }\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <a>\r\n                        <ForgotPasswordModal />\r\n                    </a>\r\n                </Form.Item>\r\n\r\n                <Form.Item>\r\n                    <Button\r\n                        type=\"primary\"\r\n                        htmlType=\"submit\"\r\n                        style={{ width: \"100%\" }}\r\n                    >\r\n                        Log in\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","/home/andrii/immersiv-web/src/pages/Properties.jsx",["179","180","181"],"import React, { useEffect, useRef, useState } from \"react\";\n\nimport { Button, Form, Input, Modal, Select } from \"antd\";\n\nimport { useUser } from \"context/UserContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport propertyService from \"services/property.service\";\nimport toast from \"react-hot-toast\";\nimport PropertiesTable from \"components/ProjectView/Components/PropertiesTable\";\nimport projectService from \"services/project.service\";\n\nconst Properties = (props) => {\n    const { admin, id, project, properties, setProject, setProperties } = props;\n    const formRef = useRef(null);\n\n    const [editModalOpen, setEditModalOpen] = useState(null);\n    const { isLoggedIn, authData, logout } = useUser();\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        propertyService.getProperty(id).then((response) => {\n            setProperties(response.data);\n        });\n\n        projectService.getProject(id).then((response) => {\n            setProject(response.data);\n        });\n    }, []);\n\n    useEffect(() => {\n        if (!isLoggedIn) {\n            logout();\n            navigate(\"/login\");\n            return null;\n        }\n\n        if (!authData?.super) {\n            if (authData?.projectId) {\n                navigate(`/p-admin/${authData.projectId}`);\n                return null;\n            } else {\n                logout();\n                navigate(\"/login\");\n                return null;\n            }\n        }\n    }, [isLoggedIn, authData?.super, authData?.projectId]);\n\n    useEffect(() => {\n        if (formRef.current) {\n            if (editModalOpen)\n                formRef.current.setFieldsValue(\n                    editModalOpen.id\n                        ? transferOrientationToString(editModalOpen)\n                        : editModalOpen\n                );\n        }\n    }, [editModalOpen?.id]);\n\n    const onFinish = async (values) => {\n        const response = editModalOpen?.id\n            ? await propertyService.saveProperty(\n                  id,\n                  editModalOpen.id,\n                  transferOrientationToObject(values)\n              )\n            : await propertyService.createProperty(\n                  id,\n                  transferOrientationToObject(values)\n              );\n        if (response.data) {\n            toast.success(\"Saved\");\n            setProperties(response.data);\n            setEditModalOpen(null);\n            if (formRef.current) formRef.current.resetFields();\n        }\n    };\n\n    const transferOrientationToObject = (data) => {\n        const o = {};\n        if (data.Orientation.indexOf(\"N\") !== -1) o.N = true;\n        else if (data.Orientation.indexOf(\"S\") !== -1) o.S = true;\n        if (data.Orientation.indexOf(\"E\") !== -1) o.E = true;\n        else if (data.Orientation.indexOf(\"W\") !== -1) o.W = true;\n        return { ...data, Orientation: o };\n    };\n\n    const transferOrientationToString = (data) => {\n        let o = \"\";\n        if (data.Orientation.N) o = o + \"N\";\n        else if (data.Orientation.S) o = o + \"S\";\n        if (data.Orientation.E) o = o + \"E\";\n        else if (data.Orientation.W) o = o + \"W\";\n        return { ...data, Orientation: o };\n    };\n    const { Option } = Select;\n\n    return (\n        <>\n            {admin && (\n                <Button\n                    onClick={() => setEditModalOpen({})}\n                    style={{ margin: \"16px\" }}\n                >\n                    Add property\n                </Button>\n            )}\n            <Modal\n                visible={!!editModalOpen}\n                onCancel={() => setEditModalOpen(null)}\n                footer={null}\n            >\n                <Form\n                    name=\"normal_login\"\n                    onFinish={onFinish}\n                    style={{\n                        padding: \" 16px\",\n                        maxWidth: \"500px\",\n                        margin: \"auto\",\n                    }}\n                    ref={formRef}\n                    labelCol={{ span: 8 }}\n                    wrapperCol={{ span: 16 }}\n                >\n                    <Form.Item\n                        name=\"Name\"\n                        label=\"Name\"\n                        rules={[\n                            {\n                                required: true,\n                                message: \"Please add name!\",\n                            },\n                        ]}\n                    >\n                        <Input placeholder=\"Name\" readOnly={!admin} />\n                    </Form.Item>\n\n                    <Form.Item name=\"Surface\" label=\"Surface\">\n                        <Input placeholder=\"Surface\" type=\"number\" />\n                    </Form.Item>\n                    <Form.Item name=\"Price\" label=\"Price\">\n                        <Input placeholder=\"Price\" type=\"number\" />\n                    </Form.Item>\n                    <Form.Item name=\"BedroomsCount\" label=\"Bedrooms\">\n                        <Input placeholder=\"Bedrooms\" type=\"number\" />\n                    </Form.Item>\n                    <Form.Item name=\"BathroomsCount\" label=\"Bathrooms\">\n                        <Input placeholder=\"Bathrooms\" type=\"number\" />\n                    </Form.Item>\n                    <Form.Item name=\"Orientation\" label=\"Orientation\">\n                        <Select>\n                            <Option value=\"N\">North</Option>\n                            <Option value=\"NE\">North-East</Option>\n                            <Option value=\"E\">East</Option>\n                            <Option value=\"SE\">South-East</Option>\n                            <Option value=\"S\">South</Option>\n                            <Option value=\"SW\">South-West</Option>\n                            <Option value=\"W\">West</Option>\n                            <Option value=\"NW\">North-West</Option>\n                        </Select>\n                    </Form.Item>\n                    <Form.Item\n                        name=\"Availability\"\n                        label=\"Availability\"\n                        rules={[\n                            {\n                                required: true,\n                                message: \"Please set the status!\",\n                            },\n                        ]}\n                    >\n                        <Select>\n                            <Option value=\"available\">Available</Option>\n                            <Option value=\"reserved\">Reserved</Option>\n                            <Option value=\"sold\">Sold</Option>\n                        </Select>\n                    </Form.Item>\n                    <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n                        <Button\n                            type=\"primary\"\n                            htmlType=\"submit\"\n                            style={{ width: \"100%\" }}\n                        >\n                            Save\n                        </Button>\n                    </Form.Item>\n                </Form>\n            </Modal>\n            {properties && project && (\n                <PropertiesTable\n                    properties={properties}\n                    setProperties={setProperties}\n                    project={project}\n                    admin={admin}\n                    setEditModalOpen={setEditModalOpen}\n                    transferOrientationToString={transferOrientationToString}\n                />\n            )}\n        </>\n    );\n};\n\nexport default Properties;\n","/home/andrii/immersiv-web/src/pages/ProjectDetails.jsx",["182"],"/home/andrii/immersiv-web/src/pages/Admins.jsx",["183"],"import LayoutHOC from \"layout/Layout\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\n\r\nimport {\r\n    Button,\r\n    Dropdown,\r\n    Form,\r\n    Input,\r\n    Layout,\r\n    List,\r\n    Menu,\r\n    Modal,\r\n    PageHeader,\r\n    Popconfirm,\r\n} from \"antd\";\r\nimport { Content } from \"antd/lib/layout/layout\";\r\nimport { MoreOutlined } from \"@ant-design/icons\";\r\nimport { useUser } from \"context/UserContext\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport toast from \"react-hot-toast\";\r\nimport adminService from \"services/admin.service\";\r\n\r\nconst Admins = (props) => {\r\n    const formRef = useRef(null);\r\n    const [admins, setAdmins] = useState(null);\r\n    const [editModalOpen, setEditModalOpen] = useState(null);\r\n    const { isLoggedIn, authData, logout } = useUser();\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        adminService.getAdmin().then((response) => {\r\n            setAdmins(response.data);\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            logout();\r\n            navigate(\"/login\");\r\n            return null;\r\n        }\r\n\r\n        if (!authData?.super) {\r\n            if (authData?.projectId) {\r\n                navigate(`/p-admin/${authData.projectId}`);\r\n                return null;\r\n            } else {\r\n                logout();\r\n                navigate(\"/login\");\r\n                return null;\r\n            }\r\n        }\r\n    }, [isLoggedIn, authData?.super, authData?.projectId]);\r\n\r\n    const onFinish = async (values) => {\r\n        const response = await adminService.createAdmin(values);\r\n        if (response.data) {\r\n            toast.success(\"Saved\");\r\n            setAdmins(response.data);\r\n            setEditModalOpen(null);\r\n            if (formRef.current) formRef.current.resetFields();\r\n        }\r\n    };\r\n\r\n    const deleteAdmin = async (id) => {\r\n        const response = await adminService.deleteAdmin(id);\r\n        if (response.data) setAdmins(response.data);\r\n    };\r\n\r\n    return (\r\n        <LayoutHOC loading={!admins}>\r\n            <Layout\r\n                style={{\r\n                    height: \"100%\",\r\n                    display: \"flex\",\r\n                    flex: 1,\r\n                    background: \"white\",\r\n                }}\r\n            >\r\n                <PageHeader\r\n                    onBack={() => navigate(`/admin`)}\r\n                    title={`Admins`}\r\n                    style={{ boxShadow: \"1px 1px 10px 1px #ccc\" }}\r\n                />\r\n\r\n                <Content\r\n                    style={{\r\n                        flex: 1,\r\n                        overflow: \"auto\",\r\n                        padding: \"16px\",\r\n                        maxWidth: \"800px\",\r\n                        width: \"100%\",\r\n                        margin: \"auto\",\r\n                    }}\r\n                >\r\n                    <Button\r\n                        onClick={() => setEditModalOpen({})}\r\n                        style={{ margin: \"16px\" }}\r\n                    >\r\n                        Add admin\r\n                    </Button>\r\n                    <Modal\r\n                        visible={!!editModalOpen}\r\n                        onCancel={() => setEditModalOpen(null)}\r\n                        footer={null}\r\n                    >\r\n                        <Form\r\n                            name=\"normal_login\"\r\n                            onFinish={onFinish}\r\n                            style={{\r\n                                padding: \" 16px\",\r\n                                maxWidth: \"500px\",\r\n                                margin: \"auto\",\r\n                            }}\r\n                            ref={formRef}\r\n                        >\r\n                            <Form.Item\r\n                                name=\"email\"\r\n                                rules={[\r\n                                    {\r\n                                        required: true,\r\n                                        message: \"Please add name!\",\r\n                                        type: \"email\",\r\n                                    },\r\n                                ]}\r\n                            >\r\n                                <Input placeholder=\"Email\" />\r\n                            </Form.Item>\r\n\r\n                            <Form.Item>\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    htmlType=\"submit\"\r\n                                    style={{ width: \"100%\" }}\r\n                                >\r\n                                    Save\r\n                                </Button>\r\n                            </Form.Item>\r\n                        </Form>\r\n                    </Modal>\r\n                    {admins && (\r\n                        <List\r\n                            itemLayout=\"horizontal\"\r\n                            dataSource={admins.sort((a, b) =>\r\n                                a.name > b.name ? 1 : -1\r\n                            )}\r\n                            renderItem={(admin) => (\r\n                                <List.Item\r\n                                    actions={[\r\n                                        <Dropdown\r\n                                            overlay={\r\n                                                <Menu>\r\n                                                    <Popconfirm\r\n                                                        title=\"Are you sure to delete this admin?\"\r\n                                                        onConfirm={() =>\r\n                                                            deleteAdmin(\r\n                                                                admin.email\r\n                                                            )\r\n                                                        }\r\n                                                        okText=\"Yes\"\r\n                                                        cancelText=\"No\"\r\n                                                    >\r\n                                                        <Menu.Item\r\n                                                            key=\"3\"\r\n                                                            danger\r\n                                                        >\r\n                                                            Delete\r\n                                                        </Menu.Item>\r\n                                                    </Popconfirm>\r\n                                                </Menu>\r\n                                            }\r\n                                            trigger={[\"click\"]}\r\n                                        >\r\n                                            <MoreOutlined\r\n                                                style={{ fontSize: \"30px\" }}\r\n                                            />\r\n                                        </Dropdown>,\r\n                                    ]}\r\n                                    style={{\r\n                                        borderBottom: \"3px solid #ccc\",\r\n                                        paddingLeft: \"16px\",\r\n                                    }}\r\n                                >\r\n                                    <List.Item.Meta\r\n                                        title={admin.email}\r\n                                        description={\r\n                                            admin.locked\r\n                                                ? \"Locked\"\r\n                                                : \"Not locked\"\r\n                                        }\r\n                                    />\r\n                                </List.Item>\r\n                            )}\r\n                        />\r\n                    )}\r\n                </Content>\r\n            </Layout>\r\n        </LayoutHOC>\r\n    );\r\n};\r\n\r\nexport default Admins;\r\n","/home/andrii/immersiv-web/src/pages/Constants.jsx",["184"],"import LayoutHOC from \"layout/Layout\";\nimport React, { useEffect, useRef, useState } from \"react\";\n\nimport { Button, Layout, PageHeader, Form, Input } from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\n\nimport { useUser } from \"context/UserContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport toast from \"react-hot-toast\";\nimport constantService from \"services/constant.service\";\n\nconst Constants = (props) => {\n    const { isLoggedIn, authData, logout } = useUser();\n    const [constants, setConstants] = useState(null);\n    const formRef = useRef(null);\n\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        constantService\n            .getConstant()\n            .then((response) => {\n                if (response.data) {\n                    setConstants(response.data);\n                    formRef.current &&\n                        formRef.current.setFieldsValue(response.data);\n                } else setConstants({});\n            })\n            .catch(() => {\n                setConstants({});\n            });\n    }, []);\n\n    useEffect(() => {\n        if (!isLoggedIn) {\n            logout();\n            navigate(\"/login\");\n            return null;\n        }\n\n        if (!authData?.super) {\n            if (authData?.projectId) {\n                navigate(`/p-admin/${authData.projectId}`);\n                return null;\n            } else {\n                logout();\n                navigate(\"/login\");\n                return null;\n            }\n        }\n    }, [isLoggedIn, authData?.super, authData?.projectId]);\n    const onFinish = async (values) => {\n        const response = await constantService.saveConstant(values);\n        if (response.data) {\n            setConstants(response.data);\n            toast.success(\"Saved\");\n        }\n    };\n\n    return (\n        <LayoutHOC>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => navigate(\"/admin\")}\n                    title=\"Constants\"\n                    style={{ boxShadow: \"1px 1px 10px 1px #ccc\" }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        maxWidth: \"800px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    <Form\n                        ref={formRef}\n                        name=\"normal_login\"\n                        onFinish={onFinish}\n                        style={{\n                            padding: \" 16px\",\n                            maxWidth: \"500px\",\n                            margin: \"auto\",\n                        }}\n                        initialValues={constants}\n                    >\n                        <Form.Item name=\"email\">\n                            <Input placeholder=\"Email\" />\n                        </Form.Item>\n\n                        <Form.Item name=\"phone\">\n                            <Input placeholder=\"Phone\" />\n                        </Form.Item>\n\n                        <Form.Item name=\"call\">\n                            <Input placeholder=\"Phone in international format\" />\n                        </Form.Item>\n\n                        <Form.Item>\n                            <Button\n                                type=\"primary\"\n                                htmlType=\"submit\"\n                                style={{ width: \"100%\" }}\n                            >\n                                Save\n                            </Button>\n                        </Form.Item>\n                        <Form.Item>\n                            <Button\n                                onClick={() => {\n                                    if (formRef.current)\n                                        formRef.current.resetFields();\n                                }}\n                                style={{ width: \"100%\" }}\n                            >\n                                Reset\n                            </Button>\n                        </Form.Item>\n                    </Form>\n                </Content>\n            </Layout>\n        </LayoutHOC>\n    );\n};\n\nexport default Constants;\n","/home/andrii/immersiv-web/src/pages/Home.jsx",[],"/home/andrii/immersiv-web/src/pages/PropertiesClient.jsx",["185","186"],"import LayoutHOC from \"layout/Layout\";\nimport React, { useEffect, useState } from \"react\";\n\nimport { Drawer, Layout, Menu, PageHeader } from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\nimport { MenuOutlined } from \"@ant-design/icons\";\nimport { useUser } from \"context/UserContext\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport Properties from \"./Properties\";\nimport projectService from \"services/project.service\";\nimport propertyService from \"services/property.service\";\n\nconst PropertiesClient = (props) => {\n    const { id } = useParams();\n    const { logout, isLoggedIn, authData } = useUser();\n    const navigate = useNavigate();\n    const [project, setProject] = useState(null);\n    const [properties, setProperties] = useState(null);\n\n    const [openDrawer, setOpenDrawer] = useState(false);\n\n    useEffect(() => {\n        propertyService.getProperty(id).then((response) => {\n            setProperties(response.data);\n        });\n\n        projectService.getProject(id).then((response) => {\n            setProject(response.data);\n        });\n    }, []);\n\n    useEffect(() => {\n        if (\n            !isLoggedIn ||\n            (!authData?.super &&\n                id.toString() !== authData?.projectId.toString())\n        ) {\n            logout();\n            navigate(\"/login\");\n            return null;\n        }\n    }, [isLoggedIn, authData?.super, authData?.projectId]);\n\n    return (\n        <LayoutHOC loading={!properties || !project}>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => setOpenDrawer(true)}\n                    backIcon={<MenuOutlined />}\n                    title={\"Appartments\"}\n                    style={{ boxShadow: \"1px 1px 10px 1px #ccc\" }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        maxWidth: \"1200px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    <Properties\n                        id={id}\n                        setProject={setProject}\n                        setProperties={setProperties}\n                        project={project}\n                        properties={properties}\n                    />\n                </Content>\n            </Layout>\n            <Drawer\n                title=\"Menu\"\n                placement=\"left\"\n                onClose={() => setOpenDrawer(false)}\n                visible={openDrawer}\n            >\n                <Menu\n                    mode=\"inline\"\n                    style={{ width: \"100%\" }}\n                    onClick={({ item, key }) => {\n                        setOpenDrawer(false);\n                        switch (key) {\n                            case \"logout\":\n                                logout();\n                                break;\n                            case \"visit\":\n                                navigate(`/p/${project.url}`);\n                                break;\n                            case \"analytics\":\n                                navigate(`/p-admin/${project.id}/analytics`);\n                                break;\n                            default:\n                                return;\n                        }\n                    }}\n                    activeKey=\"properties\"\n                    selectedKeys={[\"properties\"]}\n                >\n                    <Menu.Item key=\"properties\">Properties</Menu.Item>\n                    <Menu.Item key=\"analytics\">Analytics</Menu.Item>\n                    <Menu.Item key=\"visit\">Visit project</Menu.Item>\n                    <Menu.Item key=\"logout\">Logout</Menu.Item>\n                </Menu>\n            </Drawer>\n        </LayoutHOC>\n    );\n};\n\nexport default PropertiesClient;\n","/home/andrii/immersiv-web/src/pages/Projects.jsx",["187"],"import LayoutHOC from \"layout/Layout\";\nimport React, { useEffect, useState } from \"react\";\nimport projectService from \"services/project.service\";\n\nimport {\n    Button,\n    Drawer,\n    Dropdown,\n    Layout,\n    List,\n    Menu,\n    PageHeader,\n    Popconfirm,\n} from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\nimport {\n    EyeFilled,\n    EyeInvisibleFilled,\n    MenuOutlined,\n    MoreOutlined,\n    StarFilled,\n} from \"@ant-design/icons\";\nimport { useUser } from \"context/UserContext\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst Projects = (props) => {\n    const [projects, setProjects] = useState(null);\n    const { logout, isLoggedIn, authData } = useUser();\n    const navigate = useNavigate();\n\n    const [openDrawer, setOpenDrawer] = useState(false);\n    useEffect(() => {\n        projectService.getProject().then((response) => {\n            setProjects(response.data);\n        });\n    }, []);\n\n    useEffect(() => {\n        if (!isLoggedIn) {\n            logout();\n            navigate(\"/login\");\n            return null;\n        }\n\n        if (!authData?.super) {\n            if (authData?.projectId) {\n                navigate(`/p-admin/${authData.projectId}`);\n                return null;\n            } else {\n                logout();\n                navigate(\"/login\");\n                return null;\n            }\n        }\n    }, [isLoggedIn, authData?.super, authData?.projectId]);\n\n    const deleteProject = async (id) => {\n        const response = await projectService.deleteProject(id);\n        if (response.data) setProjects(response.data);\n    };\n\n    const setFeatured = async (id) => {\n        const response = await projectService.saveProject(id, {\n            featured: true,\n        });\n\n        if (response.data) setProjects(response.data);\n    };\n\n    return (\n        <LayoutHOC loading={!projects}>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => setOpenDrawer(true)}\n                    backIcon={<MenuOutlined />}\n                    title={\"Projects\"}\n                    style={{ boxShadow: \"1px 1px 10px 1px #ccc\" }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        maxWidth: \"800px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    <Button\n                        onClick={() => navigate(\"/admin/projects/create\")}\n                        style={{ margin: \"16px\" }}\n                    >\n                        Add project\n                    </Button>\n                    {projects && (\n                        <List\n                            itemLayout=\"horizontal\"\n                            dataSource={projects.sort((a, b) =>\n                                a.url > b.url ? 1 : -1\n                            )}\n                            renderItem={(project) => (\n                                <List.Item\n                                    actions={[\n                                        <Dropdown\n                                            overlay={\n                                                <Menu>\n                                                    <Menu.Item\n                                                        key=\"1\"\n                                                        onClick={() =>\n                                                            setFeatured(\n                                                                project.id\n                                                            )\n                                                        }\n                                                    >\n                                                        Set as featured\n                                                    </Menu.Item>\n                                                    <Menu.Divider />\n                                                    <Popconfirm\n                                                        title=\"Are you sure to delete this project?\"\n                                                        onConfirm={() =>\n                                                            deleteProject(\n                                                                project.id\n                                                            )\n                                                        }\n                                                        okText=\"Yes\"\n                                                        cancelText=\"No\"\n                                                    >\n                                                        <Menu.Item\n                                                            key=\"3\"\n                                                            danger\n                                                        >\n                                                            Delete\n                                                        </Menu.Item>\n                                                    </Popconfirm>\n                                                </Menu>\n                                            }\n                                            trigger={[\"click\"]}\n                                        >\n                                            <MoreOutlined\n                                                style={{ fontSize: \"30px\" }}\n                                            />\n                                        </Dropdown>,\n                                    ]}\n                                >\n                                    <List.Item.Meta\n                                        avatar={\n                                            project.featured ? (\n                                                <StarFilled\n                                                    style={{ fontSize: \"24px\" }}\n                                                />\n                                            ) : project.published ? (\n                                                <EyeFilled\n                                                    style={{ fontSize: \"24px\" }}\n                                                />\n                                            ) : (\n                                                <EyeInvisibleFilled\n                                                    style={{ fontSize: \"24px\" }}\n                                                />\n                                            )\n                                        }\n                                        title={project.name}\n                                        description={project.url}\n                                        onClick={() => {\n                                            navigate(\n                                                `/admin/projects/${project.id}`\n                                            );\n                                        }}\n                                    />\n                                </List.Item>\n                            )}\n                        />\n                    )}\n                </Content>\n            </Layout>\n            <Drawer\n                title=\"Menu\"\n                placement=\"left\"\n                onClose={() => setOpenDrawer(false)}\n                visible={openDrawer}\n            >\n                <Menu\n                    mode=\"inline\"\n                    style={{ width: \"100%\" }}\n                    onClick={({ item, key }) => {\n                        setOpenDrawer(false);\n                        switch (key) {\n                            case \"logout\":\n                                logout();\n                                break;\n                            case \"info\":\n                                navigate(\"/admin/contant\");\n                                break;\n                            case \"admins\":\n                                navigate(\"/admin/admins\");\n                                break;\n                            default:\n                                return;\n                        }\n                    }}\n                    activeKey=\"projects\"\n                    selectedKeys={[\"projects\"]}\n                >\n                    <Menu.Item key=\"projects\">Projects</Menu.Item>\n                    <Menu.Item key=\"info\">Constant</Menu.Item>\n                    <Menu.Item key=\"admins\">Admins</Menu.Item>\n                    <Menu.Item key=\"logout\">Logout</Menu.Item>\n                </Menu>\n            </Drawer>\n        </LayoutHOC>\n    );\n};\n\nexport default Projects;\n","/home/andrii/immersiv-web/src/pages/ResetPassword.jsx",[],"/home/andrii/immersiv-web/src/layout/Layout.jsx",[],"/home/andrii/immersiv-web/src/pages/Project.jsx",[],"/home/andrii/immersiv-web/src/pages/CreateProject.jsx",["188"],"import LayoutHOC from \"layout/Layout\";\nimport React, { useRef, useEffect } from \"react\";\nimport projectService from \"services/project.service\";\n\nimport { Button, Layout, PageHeader, Form } from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\n\nimport { useUser } from \"context/UserContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport toast from \"react-hot-toast\";\nimport ProjectFormFields from \"components/ProjectFormFields\";\n\nconst CreateProject = (props) => {\n    const { isLoggedIn, authData, logout } = useUser();\n    const formRef = useRef(null);\n\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        if (!isLoggedIn) {\n            logout();\n            navigate(\"/login\");\n            return null;\n        }\n\n        if (!authData?.super) {\n            if (authData?.projectId) {\n                navigate(`/p-admin/${authData.projectId}`);\n                return null;\n            } else {\n                logout();\n                navigate(\"/login\");\n                return null;\n            }\n        }\n    }, [isLoggedIn, authData?.super, authData?.projectId]);\n\n    const onFinish = async (values) => {\n        const response = await projectService.createProject(values);\n        if (response.data) {\n            toast.success(\"Saved\");\n            navigate(\"/admin\");\n        }\n    };\n\n    return (\n        <LayoutHOC>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => navigate(\"/admin\")}\n                    title=\"Create project\"\n                    style={{ boxShadow: \"1px 1px 10px 1px #ccc\" }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        maxWidth: \"800px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    <Form\n                        ref={formRef}\n                        name=\"normal_login\"\n                        onFinish={onFinish}\n                        style={{\n                            padding: \" 16px\",\n                            maxWidth: \"500px\",\n                            margin: \"auto\",\n                        }}\n                        labelCol={{ span: 8 }}\n                        wrapperCol={{ span: 16 }}\n                    >\n                        <ProjectFormFields />\n                        <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n                            <Button\n                                onClick={() => {\n                                    if (formRef.current)\n                                        formRef.current.resetFields();\n                                }}\n                                style={{ width: \"100%\" }}\n                            >\n                                Reset\n                            </Button>\n                        </Form.Item>\n                    </Form>\n                </Content>\n            </Layout>\n        </LayoutHOC>\n    );\n};\n\nexport default CreateProject;\n","/home/andrii/immersiv-web/src/pages/AnalyticClient.jsx",["189","190"],"import LayoutHOC from \"layout/Layout\";\nimport React, { useEffect, useState } from \"react\";\n\nimport { Layout, PageHeader } from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\n\nimport { useUser } from \"context/UserContext\";\nimport { useNavigate, useParams } from \"react-router-dom\";\n\nimport { Chart } from \"react-google-charts\";\n\nimport gaService from \"services/ga.service\";\n\nconst AnalyticClient = (props) => {\n    const { id } = useParams();\n    const { logout, isLoggedIn, authData } = useUser();\n    const navigate = useNavigate();\n    const [chartData, setChartData] = useState(null);\n    useEffect(() => {\n        if (\n            !isLoggedIn ||\n            (!authData?.super &&\n                id.toString() !== authData?.projectId.toString())\n        ) {\n            logout();\n            navigate(\"/login\");\n            return null;\n        }\n    }, [isLoggedIn, authData?.super, authData?.projectId]);\n\n    useEffect(() => {\n        gaService\n            .getGA(id, {\n                dateRanges: [\n                    {\n                        startDate: \"2020-03-31\",\n                        endDate: \"today\",\n                    },\n                ],\n                dimensions: [\n                    {\n                        name: \"city\",\n                    },\n                ],\n                metrics: [\n                    {\n                        name: \"activeUsers\",\n                    },\n                ],\n            })\n            .then((response) => {\n                console.log(response.data);\n                setChartData(response.data);\n            });\n    }, []);\n\n    return (\n        <LayoutHOC>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => navigate(`/p-admin/${id}`)}\n                    title={\"Analytics\"}\n                    style={{ boxShadow: \"1px 1px 10px 1px #ccc\" }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        maxWidth: \"800px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    {chartData && (\n                        <Chart chartType=\"LineChart\" data={chartData} />\n                    )}\n                </Content>\n            </Layout>\n        </LayoutHOC>\n    );\n};\n\nexport default AnalyticClient;\n","/home/andrii/immersiv-web/src/helpers/WithAxios.js",[],"/home/andrii/immersiv-web/src/services/auth.service.js",[],"/home/andrii/immersiv-web/src/services/constant.service.js",[],"/home/andrii/immersiv-web/src/helpers/useQuery.js",[],"/home/andrii/immersiv-web/src/services/admin.service.js",[],"/home/andrii/immersiv-web/src/services/project.service.js",[],"/home/andrii/immersiv-web/src/services/property.service.js",[],"/home/andrii/immersiv-web/src/services/ga.service.js",[],"/home/andrii/immersiv-web/src/components/ProjectFormFields.jsx",[],"/home/andrii/immersiv-web/src/components/ForgotPasswordModal.jsx",[],"/home/andrii/immersiv-web/src/components/ProjectView/ProjectView.jsx",[],"/home/andrii/immersiv-web/src/components/ProjectView/Components/PropertiesTable.jsx",[],"/home/andrii/immersiv-web/src/api/axios.config.js",[],"/home/andrii/immersiv-web/src/components/ProjectView/Components/Loading/Loading.jsx",[],"/home/andrii/immersiv-web/src/components/ProjectView/Layout/MobileLayout/MobileLayout.jsx",[],"/home/andrii/immersiv-web/src/components/ProjectView/Layout/DesktopLayout/DesktopLayout.jsx",[],"/home/andrii/immersiv-web/src/components/ProjectView/Layout/DesktopLayout/PoweredLogo.jsx",[],"/home/andrii/immersiv-web/src/components/ProjectView/Components/StreamView/StreamView.jsx",["191","192","193"],"import {\n    ModelDefinition,\n    PlatformNext,\n    UndefinedModelDefinition,\n    DefaultStreamerOptions,\n    StreamerStatus,\n} from \"@pureweb/platform-sdk\";\n\nimport {\n    useStreamer,\n    useLaunchRequest,\n    System,\n} from \"@pureweb/platform-sdk-react\";\n\nimport React, { useEffect, useState } from \"react\";\nimport useAsyncEffect from \"use-async-effect\";\nimport \"./StreamView.css\";\n\nimport { EmbeddedView } from \"../EmbededView/EmbededView\";\n\nimport logger from \"../../Log\";\n\nconst audio = new Audio();\naudio.autoplay = true;\naudio.volume = 0.5;\n\n// Initialize platform reference\nconst platform = new PlatformNext();\nplatform.initialize({\n    endpoint: \"https://api.pureweb.io\",\n});\n\nconst StreamView = (props) => {\n    const { project } = props;\n\n    const [modelDefinitionUnavailable, setModelDefinitionUnavailable] =\n        useState(false);\n    const [modelDefinition, setModelDefinition] = useState(\n        new UndefinedModelDefinition()\n    );\n    const [availableModels, setAvailableModels] = useState();\n    const [launchRequestError, setLaunchRequestError] = useState();\n    const streamerOptions = DefaultStreamerOptions;\n\n    const [status, launchRequest, queueLaunchRequest] = useLaunchRequest(\n        platform,\n        modelDefinition,\n        {}\n    );\n    const [streamerStatus, emitter, videoStream, audioStream] = useStreamer(\n        platform,\n        launchRequest,\n        streamerOptions\n    );\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        if (streamerStatus === StreamerStatus.Failed) {\n            platform.disconnect();\n        }\n    }, [streamerStatus]);\n\n    if (audioStream) {\n        audio.srcObject = audioStream;\n    }\n\n    const launch = async () => {\n        setLoading(true);\n        audio.load();\n\n        if (project.LaunchType !== \"local\") {\n            try {\n                await queueLaunchRequest();\n            } catch (err) {\n                setLaunchRequestError(err);\n            }\n        }\n    };\n    useAsyncEffect(async () => {\n        if (project.projectId) {\n            logger.info(\"Initializing available models: \" + project.projectId);\n            try {\n                await platform.useAnonymousCredentials(project.projectId);\n                await platform.connect();\n                logger.info(\"Agent Connected: \" + platform.agent.id);\n                streamerOptions.iceServers =\n                    platform.agent.serviceCredentials.iceServers;\n                streamerOptions.forceRelay = project.ForceRelay;\n                const models = await platform.getModels();\n                setAvailableModels(models);\n                logger.debug(\"Available models\", models);\n            } catch (err) {\n                logger.error(err);\n            }\n        }\n    }, [project]);\n    useEffect(() => {\n        if (availableModels?.length) {\n            const selectedModels = availableModels.filter(function (\n                model: ModelDefinition\n            ): boolean {\n                if (project.modelId === model.id) {\n                    // If there is a version specified and we encounter it\n                    if (project.Version && project.Version === model.version) {\n                        return true;\n                    }\n                    // If there is no version specified and we find the primary version\n                    if (!project.Version && model.active) {\n                        return true;\n                    }\n                }\n                return false;\n            });\n            if (selectedModels?.length) {\n                setModelDefinition(selectedModels[0]);\n            } else {\n                setModelDefinitionUnavailable(true);\n            }\n        }\n    }, [availableModels]);\n\n    useEffect(() => {\n        if (modelDefinition.type === 0) return;\n\n        launch();\n    }, [modelDefinition]);\n\n    // Log status messages\n    useEffect(() => {\n        logger.info(\"Status\", status, streamerStatus);\n        props.setStatus(status);\n    }, [status, streamerStatus]);\n    // Notify user of missing or errors in configuration\n    if (!project.modelId || !project.projectId) {\n        props.setLoaded(true);\n        return (\n            <div\n                style={{\n                    display: \"flex\",\n                    height: \"100%\",\n                    overflow: \"none\",\n                    textAlign: \"center\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    flex: 1,\n                }}\n            >\n                <p>\n                    Your client has one or more configuration errors. Please\n                    consult the{\" \"}\n                    <a href=\"https://www.npmjs.com/package/@pureweb/cra-template-pureweb-client\">\n                        {\" \"}\n                        README{\" \"}\n                    </a>{\" \"}\n                    for details on how to configure the client template.\n                </p>\n            </div>\n        );\n    }\n\n    if (modelDefinitionUnavailable) {\n        props.setLoaded(true);\n        return (\n            <div\n                style={{\n                    display: \"flex\",\n                    height: \"100%\",\n                    overflow: \"none\",\n                    textAlign: \"center\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    flex: 1,\n                }}\n            >\n                <span>The model that you have requested does not exist</span>\n            </div>\n        );\n    }\n\n    if (launchRequestError) {\n        props.setLoaded(true);\n        return (\n            <div\n                style={{\n                    display: \"flex\",\n                    height: \"100%\",\n                    overflow: \"none\",\n                    textAlign: \"center\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    flex: 1,\n                }}\n            >\n                <span>\n                    {process.env.NODE_ENV === \"development\"\n                        ? `There was an error with the launch request: ${launchRequestError}`\n                        : \"It appears the requested model is currently not online as per your set schedule. Please contact support if it should be available.\"}\n                </span>\n            </div>\n        );\n    }\n\n    // Begin connection\n    if (streamerStatus === StreamerStatus.Disconnected) {\n        props.setLoaded(true);\n        return (\n            <div\n                style={{\n                    display: \"flex\",\n                    height: \"100%\",\n                    overflow: \"none\",\n                    textAlign: \"center\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    flex: 1,\n                }}\n            >\n                <h2>Disconnected from stream</h2>\n            </div>\n        );\n    }\n\n    if (streamerStatus === StreamerStatus.Failed) {\n        props.setLoaded(true);\n        return (\n            <div\n                style={{\n                    display: \"flex\",\n                    height: \"100%\",\n                    overflow: \"none\",\n                    textAlign: \"center\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    flex: 1,\n                }}\n            >\n                <h2>Failure during stream</h2>\n                <h2>Please refresh to request a new session</h2>\n            </div>\n        );\n    }\n\n    if (streamerStatus === StreamerStatus.Withdrawn) {\n        props.setLoaded(true);\n        return (\n            <div\n                style={{\n                    display: \"flex\",\n                    height: \"100%\",\n                    overflow: \"none\",\n                    textAlign: \"center\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    flex: 1,\n                }}\n            >\n                <h2>Streamer contribution withdrawn</h2>\n            </div>\n        );\n    }\n\n    if (loading) {\n        return (\n            <EmbeddedView\n                VideoStream={videoStream}\n                StreamerStatus={streamerStatus}\n                LaunchRequestStatus={status}\n                InputEmitter={emitter}\n                UseNativeTouchEvents={true}\n                UsePointerLock={project.UsePointerLock}\n                PointerLockRelease={project.PointerLockRelease}\n                setLoaded={props.setLoaded}\n            />\n        );\n    } else if (project.LaunchType !== \"local\" && !availableModels) {\n        return (\n            <div\n                style={{\n                    display: \"flex\",\n                    height: \"100%\",\n                    overflow: \"none\",\n                    textAlign: \"center\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    flex: 1,\n                }}\n            >\n                <h2>Initializing...</h2>\n            </div>\n        );\n    } else if (project.LaunchType !== \"local\" && !availableModels?.length) {\n        props.setLoaded(true);\n        return (\n            <div\n                style={{\n                    display: \"flex\",\n                    height: \"100%\",\n                    overflow: \"none\",\n                    textAlign: \"center\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    flex: 1,\n                }}\n            >\n                <h2>No models are currently available in this environment.</h2>\n            </div>\n        );\n    } else {\n        return null;\n    }\n};\n\nconst StreamViewWrapper = (props) => {\n    return System.IsBrowserSupported() ? (\n        <div\n            style={{\n                backgroundColor: \"black\",\n                height: \"100%\",\n                flex: 1,\n                display: \"flex\",\n                color: \"white\",\n            }}\n        >\n            <StreamView\n                setLoaded={props.setLoaded}\n                setStatus={props.setStatus}\n                project={props.project}\n            />\n        </div>\n    ) : (\n        <div className=\"ui red segment center aligned basic\">\n            <h2 className=\"header\">Your browser is currently unsupported</h2>\n        </div>\n    );\n};\n\nexport default StreamViewWrapper;\n","/home/andrii/immersiv-web/src/components/ProjectView/Layout/MobileLayout/Button.jsx",[],"/home/andrii/immersiv-web/src/components/ProjectView/Log.js",[],"/home/andrii/immersiv-web/src/components/ProjectView/Components/EmbededView/EmbededView.jsx",[],"/home/andrii/immersiv-web/src/components/ProjectView/Components/LoadingView/LoadingView.jsx",[],"/home/andrii/immersiv-web/src/pages/PropertiesAdmin.jsx",["194","195"],"import React, { useEffect, useState } from \"react\";\n\nimport { useUser } from \"context/UserContext\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport Properties from \"./Properties\";\nimport LayoutHOC from \"layout/Layout\";\nimport { Layout, PageHeader } from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\nimport propertyService from \"services/property.service\";\nimport projectService from \"services/project.service\";\n\nconst PropertiesAdmin = (props) => {\n    const { id } = useParams();\n    const { isLoggedIn, authData, logout } = useUser();\n    const navigate = useNavigate();\n    const [project, setProject] = useState(null);\n    const [properties, setProperties] = useState(null);\n    useEffect(() => {\n        if (!isLoggedIn) {\n            logout();\n            navigate(\"/login\");\n            return null;\n        }\n\n        if (!authData?.super) {\n            if (authData?.projectId) {\n                navigate(`/p-admin/${authData.projectId}`);\n                return null;\n            } else {\n                logout();\n                navigate(\"/login\");\n                return null;\n            }\n        }\n    }, [isLoggedIn, authData?.super, authData?.projectId]);\n\n    useEffect(() => {\n        propertyService.getProperty(id).then((response) => {\n            setProperties(response.data);\n        });\n\n        projectService.getProject(id).then((response) => {\n            setProject(response.data);\n        });\n    }, []);\n    return (\n        <LayoutHOC>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => navigate(`/admin/projects/${id}`)}\n                    title={`Properties of project id: ${id}`}\n                    style={{ boxShadow: \"1px 1px 10px 1px #ccc\" }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        maxWidth: \"1200px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    <Properties\n                        admin\n                        id={id}\n                        setProject={setProject}\n                        setProperties={setProperties}\n                        project={project}\n                        properties={properties}\n                    />\n                </Content>\n            </Layout>\n        </LayoutHOC>\n    );\n};\n\nexport default PropertiesAdmin;\n",{"ruleId":"196","severity":1,"message":"197","line":10,"column":8,"nodeType":"198","messageId":"199","endLine":10,"endColumn":18},{"ruleId":"200","severity":1,"message":"201","line":98,"column":21,"nodeType":"202","endLine":98,"endColumn":24},{"ruleId":"203","severity":1,"message":"204","line":28,"column":8,"nodeType":"205","endLine":28,"endColumn":10,"suggestions":"206"},{"ruleId":"203","severity":1,"message":"207","line":47,"column":8,"nodeType":"205","endLine":47,"endColumn":58,"suggestions":"208"},{"ruleId":"203","severity":1,"message":"209","line":58,"column":8,"nodeType":"205","endLine":58,"endColumn":27,"suggestions":"210"},{"ruleId":"203","severity":1,"message":"207","line":45,"column":8,"nodeType":"205","endLine":45,"endColumn":58,"suggestions":"211"},{"ruleId":"203","severity":1,"message":"207","line":53,"column":8,"nodeType":"205","endLine":53,"endColumn":58,"suggestions":"212"},{"ruleId":"203","severity":1,"message":"207","line":51,"column":8,"nodeType":"205","endLine":51,"endColumn":58,"suggestions":"213"},{"ruleId":"203","severity":1,"message":"214","line":30,"column":8,"nodeType":"205","endLine":30,"endColumn":10,"suggestions":"215"},{"ruleId":"203","severity":1,"message":"216","line":42,"column":8,"nodeType":"205","endLine":42,"endColumn":58,"suggestions":"217"},{"ruleId":"203","severity":1,"message":"207","line":55,"column":8,"nodeType":"205","endLine":55,"endColumn":58,"suggestions":"218"},{"ruleId":"203","severity":1,"message":"207","line":36,"column":8,"nodeType":"205","endLine":36,"endColumn":58,"suggestions":"219"},{"ruleId":"203","severity":1,"message":"216","line":29,"column":8,"nodeType":"205","endLine":29,"endColumn":58,"suggestions":"220"},{"ruleId":"203","severity":1,"message":"214","line":55,"column":8,"nodeType":"205","endLine":55,"endColumn":10,"suggestions":"221"},{"ruleId":"203","severity":1,"message":"222","line":120,"column":8,"nodeType":"205","endLine":120,"endColumn":25,"suggestions":"223"},{"ruleId":"203","severity":1,"message":"224","line":126,"column":8,"nodeType":"205","endLine":126,"endColumn":25,"suggestions":"225"},{"ruleId":"203","severity":1,"message":"226","line":132,"column":8,"nodeType":"205","endLine":132,"endColumn":32,"suggestions":"227"},{"ruleId":"203","severity":1,"message":"207","line":35,"column":8,"nodeType":"205","endLine":35,"endColumn":58,"suggestions":"228"},{"ruleId":"203","severity":1,"message":"214","line":45,"column":8,"nodeType":"205","endLine":45,"endColumn":10,"suggestions":"229"},"no-unused-vars","'Properties' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'id', 'setProject', and 'setProperties'. Either include them or remove the dependency array.","ArrayExpression",["230"],"React Hook useEffect has missing dependencies: 'logout' and 'navigate'. Either include them or remove the dependency array.",["231"],"React Hook useEffect has a missing dependency: 'editModalOpen'. Either include it or remove the dependency array.",["232"],["233"],["234"],["235"],"React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["236"],"React Hook useEffect has missing dependencies: 'id', 'logout', and 'navigate'. Either include them or remove the dependency array.",["237"],["238"],["239"],["240"],["241"],"React Hook useEffect has missing dependencies: 'project.Version' and 'project.modelId'. Either include them or remove the dependency array.",["242"],"React Hook useEffect has a missing dependency: 'launch'. Either include it or remove the dependency array.",["243"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["244"],["245"],["246"],{"desc":"247","fix":"248"},{"desc":"249","fix":"250"},{"desc":"251","fix":"252"},{"desc":"249","fix":"253"},{"desc":"249","fix":"254"},{"desc":"249","fix":"255"},{"desc":"256","fix":"257"},{"desc":"258","fix":"259"},{"desc":"249","fix":"260"},{"desc":"249","fix":"261"},{"desc":"258","fix":"262"},{"desc":"256","fix":"263"},{"desc":"264","fix":"265"},{"desc":"266","fix":"267"},{"desc":"268","fix":"269"},{"desc":"249","fix":"270"},{"desc":"256","fix":"271"},"Update the dependencies array to be: [id, setProject, setProperties]",{"range":"272","text":"273"},"Update the dependencies array to be: [isLoggedIn, authData?.super, authData.projectId, logout, navigate]",{"range":"274","text":"275"},"Update the dependencies array to be: [editModalOpen, editModalOpen.id]",{"range":"276","text":"277"},{"range":"278","text":"275"},{"range":"279","text":"275"},{"range":"280","text":"275"},"Update the dependencies array to be: [id]",{"range":"281","text":"282"},"Update the dependencies array to be: [isLoggedIn, authData?.super, authData?.projectId, id, logout, navigate]",{"range":"283","text":"284"},{"range":"285","text":"275"},{"range":"286","text":"275"},{"range":"287","text":"284"},{"range":"288","text":"282"},"Update the dependencies array to be: [availableModels, project.Version, project.modelId]",{"range":"289","text":"290"},"Update the dependencies array to be: [launch, modelDefinition]",{"range":"291","text":"292"},"Update the dependencies array to be: [props, status, streamerStatus]",{"range":"293","text":"294"},{"range":"295","text":"275"},{"range":"296","text":"282"},[1005,1007],"[id, setProject, setProperties]",[1453,1503],"[isLoggedIn, authData?.super, authData.projectId, logout, navigate]",[1821,1840],"[editModalOpen, editModalOpen.id]",[1351,1401],[1427,1477],[1509,1559],[1089,1091],"[id]",[1364,1414],"[isLoggedIn, authData?.super, authData?.projectId, id, logout, navigate]",[1365,1415],[1053,1103],[868,918],[1601,1603],[3711,3728],"[availableModels, project.Version, project.modelId]",[3828,3845],"[launch, modelDefinition]",[3993,4017],"[props, status, streamerStatus]",[1152,1202],[1461,1463]]
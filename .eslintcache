[{"/home/andrii/immersiv-web/src/index.js":"1","/home/andrii/immersiv-web/src/App.js":"2","/home/andrii/immersiv-web/src/reportWebVitals.js":"3","/home/andrii/immersiv-web/src/context/UserContext.jsx":"4","/home/andrii/immersiv-web/src/helpers/history.js":"5","/home/andrii/immersiv-web/src/pages/Login.jsx":"6","/home/andrii/immersiv-web/src/pages/Properties.jsx":"7","/home/andrii/immersiv-web/src/pages/ProjectDetails.jsx":"8","/home/andrii/immersiv-web/src/pages/Admins.jsx":"9","/home/andrii/immersiv-web/src/pages/Constants.jsx":"10","/home/andrii/immersiv-web/src/pages/Home.jsx":"11","/home/andrii/immersiv-web/src/pages/PropertiesClient.jsx":"12","/home/andrii/immersiv-web/src/pages/Projects.jsx":"13","/home/andrii/immersiv-web/src/pages/ResetPassword.jsx":"14","/home/andrii/immersiv-web/src/layout/Layout.jsx":"15","/home/andrii/immersiv-web/src/pages/Project.jsx":"16","/home/andrii/immersiv-web/src/pages/CreateProject.jsx":"17","/home/andrii/immersiv-web/src/pages/AnalyticClient.jsx":"18","/home/andrii/immersiv-web/src/helpers/WithAxios.js":"19","/home/andrii/immersiv-web/src/services/auth.service.js":"20","/home/andrii/immersiv-web/src/services/constant.service.js":"21","/home/andrii/immersiv-web/src/helpers/useQuery.js":"22","/home/andrii/immersiv-web/src/services/admin.service.js":"23","/home/andrii/immersiv-web/src/services/project.service.js":"24","/home/andrii/immersiv-web/src/services/property.service.js":"25","/home/andrii/immersiv-web/src/services/ga.service.js":"26","/home/andrii/immersiv-web/src/components/ProjectFormFields.jsx":"27","/home/andrii/immersiv-web/src/components/ForgotPasswordModal.jsx":"28","/home/andrii/immersiv-web/src/components/ProjectView/Components/PropertiesTable.jsx":"29","/home/andrii/immersiv-web/src/api/axios.config.js":"30","/home/andrii/immersiv-web/src/components/ProjectView/Components/Loading/Loading.jsx":"31","/home/andrii/immersiv-web/src/components/ProjectView/Components/StreamView/StreamView.jsx":"32","/home/andrii/immersiv-web/src/components/ProjectView/Log.js":"33","/home/andrii/immersiv-web/src/components/ProjectView/Components/EmbededView/EmbededView.jsx":"34","/home/andrii/immersiv-web/src/components/ProjectView/Components/LoadingView/LoadingView.jsx":"35","/home/andrii/immersiv-web/src/pages/PropertiesAdmin.jsx":"36","/home/andrii/immersiv-web/src/components/DashboardItem/DataItems/index.js":"37","/home/andrii/immersiv-web/src/components/DashboardItem/DataItems/TextItem/TextItem.js":"38","/home/andrii/immersiv-web/src/components/DashboardItem/DataItems/ChartItem/ChartItem.js":"39","/home/andrii/immersiv-web/src/components/ProjectView/Layout/ProjectView.jsx":"40","/home/andrii/immersiv-web/src/components/ProjectView/Layout/Button.jsx":"41","/home/andrii/immersiv-web/src/components/ProjectView/Layout/PoweredLogo.jsx":"42","/home/andrii/immersiv-web/src/hooks/useLoginCheck.js":"43","/home/andrii/immersiv-web/src/pages/MediaAdmin.jsx":"44","/home/andrii/immersiv-web/src/services/utils.service.js":"45","/home/andrii/immersiv-web/src/helpers/uploadMedia.js":"46","/home/andrii/immersiv-web/src/pages/ProjectA.jsx":"47"},{"size":670,"mtime":1649049493702,"results":"48","hashOfConfig":"49"},{"size":3968,"mtime":1661143883815,"results":"50","hashOfConfig":"49"},{"size":362,"mtime":1640368180000,"results":"51","hashOfConfig":"49"},{"size":2031,"mtime":1652371774250,"results":"52","hashOfConfig":"49"},{"size":87,"mtime":1640368180000,"results":"53","hashOfConfig":"49"},{"size":3911,"mtime":1649049512820,"results":"54","hashOfConfig":"49"},{"size":981,"mtime":1652436572821,"results":"55","hashOfConfig":"49"},{"size":9746,"mtime":1661919417693,"results":"56","hashOfConfig":"49"},{"size":7572,"mtime":1653169417149,"results":"57","hashOfConfig":"49"},{"size":4139,"mtime":1652432586811,"results":"58","hashOfConfig":"49"},{"size":188,"mtime":1647337840944,"results":"59","hashOfConfig":"49"},{"size":4311,"mtime":1654122076973,"results":"60","hashOfConfig":"49"},{"size":8642,"mtime":1652432586947,"results":"61","hashOfConfig":"49"},{"size":5587,"mtime":1647391907329,"results":"62","hashOfConfig":"49"},{"size":805,"mtime":1649049587225,"results":"63","hashOfConfig":"49"},{"size":1211,"mtime":1649050544189,"results":"64","hashOfConfig":"49"},{"size":2976,"mtime":1652432587199,"results":"65","hashOfConfig":"49"},{"size":8153,"mtime":1654122107151,"results":"66","hashOfConfig":"49"},{"size":1488,"mtime":1652371155532,"results":"67","hashOfConfig":"49"},{"size":1319,"mtime":1652371034206,"results":"68","hashOfConfig":"49"},{"size":251,"mtime":1645578221413,"results":"69","hashOfConfig":"49"},{"size":158,"mtime":1640368180000,"results":"70","hashOfConfig":"49"},{"size":317,"mtime":1647372383591,"results":"71","hashOfConfig":"49"},{"size":989,"mtime":1653226465377,"results":"72","hashOfConfig":"49"},{"size":676,"mtime":1652436066247,"results":"73","hashOfConfig":"49"},{"size":404,"mtime":1648640064091,"results":"74","hashOfConfig":"49"},{"size":8744,"mtime":1661433854830,"results":"75","hashOfConfig":"49"},{"size":2844,"mtime":1645918040931,"results":"76","hashOfConfig":"49"},{"size":11536,"mtime":1661433750610,"results":"77","hashOfConfig":"49"},{"size":543,"mtime":1652359055992,"results":"78","hashOfConfig":"49"},{"size":7944,"mtime":1661919400458,"results":"79","hashOfConfig":"49"},{"size":10574,"mtime":1656480891478,"results":"80","hashOfConfig":"49"},{"size":107,"mtime":1645547392556,"results":"81","hashOfConfig":"49"},{"size":3606,"mtime":1648450578998,"results":"82","hashOfConfig":"49"},{"size":5021,"mtime":1646085095883,"results":"83","hashOfConfig":"49"},{"size":2404,"mtime":1652432586243,"results":"84","hashOfConfig":"49"},{"size":132,"mtime":1652371752248,"results":"85","hashOfConfig":"49"},{"size":384,"mtime":1648499991518,"results":"86","hashOfConfig":"49"},{"size":1530,"mtime":1649050189859,"results":"87","hashOfConfig":"49"},{"size":6852,"mtime":1661232890618,"results":"88","hashOfConfig":"49"},{"size":468,"mtime":1647377791994,"results":"89","hashOfConfig":"49"},{"size":483,"mtime":1645484578692,"results":"90","hashOfConfig":"49"},{"size":905,"mtime":1652360069054,"results":"91","hashOfConfig":"49"},{"size":12321,"mtime":1660951930426,"results":"92","hashOfConfig":"49"},{"size":265,"mtime":1660714751680,"results":"93","hashOfConfig":"49"},{"size":956,"mtime":1660714736800,"results":"94","hashOfConfig":"49"},{"size":4195,"mtime":1662469237637,"results":"95","hashOfConfig":"49"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"5c13cg",{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157"},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170"},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179"},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188"},{"filePath":"189","messages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195"},{"filePath":"196","messages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198"},{"filePath":"199","messages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/andrii/immersiv-web/src/index.js",[],"/home/andrii/immersiv-web/src/App.js",[],"/home/andrii/immersiv-web/src/reportWebVitals.js",[],"/home/andrii/immersiv-web/src/context/UserContext.jsx",[],"/home/andrii/immersiv-web/src/helpers/history.js",[],"/home/andrii/immersiv-web/src/pages/Login.jsx",["205"],"// import { Button, HelperText, Input, Label } from \"@windmill/react-ui\";\r\nimport ForgotPasswordModal from \"components/ForgotPasswordModal\";\r\nimport { useUser } from \"context/UserContext\";\r\nimport Layout from \"layout/Layout\";\r\nimport React, { useState } from \"react\";\r\nimport toast from \"react-hot-toast\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport authService from \"services/auth.service\";\r\nimport { Form, Input, Button, Typography } from \"antd\";\r\nimport { UserOutlined, LockOutlined } from \"@ant-design/icons\";\r\n\r\nconst Login = () => {\r\n    const { isLoggedIn, setUserState, authData } = useUser();\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [redirectToReferrer, setRedirectToReferrer] = useState(false);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const onFinish = async (data) => {\r\n        const { email, password } = data;\r\n\r\n        try {\r\n            setIsLoading(true);\r\n            const data = await authService.login(email, password);\r\n            toast.success(\"Login successful 🔓\");\r\n\r\n            setTimeout(() => {\r\n                setUserState(data);\r\n                setRedirectToReferrer(true);\r\n                setIsLoading(false);\r\n            }, 1500);\r\n        } catch (error) {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    if (\r\n        (isLoggedIn || redirectToReferrer) &&\r\n        (authData?.super || authData?.projectId)\r\n    ) {\r\n        navigate(\"/admin\");\r\n    }\r\n\r\n    return (\r\n        <Layout title=\"Login\" loading={isLoading}>\r\n            <Form\r\n                name=\"normal_login\"\r\n                onFinish={onFinish}\r\n                style={{\r\n                    padding: \"100px 16px\",\r\n                    maxWidth: \"500px\",\r\n                    margin: \"auto\",\r\n                }}\r\n            >\r\n                <Typography.Title\r\n                    style={{ textAlign: \"center\", marginBottom: \"50px\" }}\r\n                >\r\n                    Manage IMMERSIVE\r\n                </Typography.Title>\r\n                <Form.Item\r\n                    name=\"email\"\r\n                    rules={[\r\n                        {\r\n                            type: \"email\",\r\n                            message: \"The input is not valid E-mail!\",\r\n                        },\r\n                        {\r\n                            required: true,\r\n                            message: \"Please input your E-mail!\",\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input\r\n                        prefix={\r\n                            <UserOutlined className=\"site-form-item-icon\" />\r\n                        }\r\n                        placeholder=\"Email\"\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"password\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: \"Please input your Password!\",\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input.Password\r\n                        prefix={\r\n                            <LockOutlined className=\"site-form-item-icon\" />\r\n                        }\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <a>\r\n                        <ForgotPasswordModal />\r\n                    </a>\r\n                </Form.Item>\r\n\r\n                <Form.Item>\r\n                    <Button\r\n                        type=\"primary\"\r\n                        htmlType=\"submit\"\r\n                        style={{ width: \"100%\" }}\r\n                    >\r\n                        Log in\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","/home/andrii/immersiv-web/src/pages/Properties.jsx",["206"],"import React, { useEffect } from \"react\";\n\nimport propertyService from \"services/property.service\";\nimport PropertiesTable from \"components/ProjectView/Components/PropertiesTable\";\nimport projectService from \"services/project.service\";\nimport useLoginCheck from \"hooks/useLoginCheck\";\n\nconst Properties = (props) => {\n    const { admin, id, project, properties, setProject, setProperties } = props;\n\n    useEffect(() => {\n        propertyService.getProperty(id).then((response) => {\n            setProperties(response.data);\n        });\n\n        projectService.getProject(id).then((response) => {\n            setProject(response.data);\n        });\n    }, []);\n\n    useLoginCheck();\n\n    return (\n        properties &&\n        project && (\n            <PropertiesTable\n                properties={properties}\n                setProperties={setProperties}\n                project={project}\n                admin={admin}\n            />\n        )\n    );\n};\n\nexport default Properties;\n","/home/andrii/immersiv-web/src/pages/ProjectDetails.jsx",["207","208"],"import LayoutHOC from \"layout/Layout\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport projectService from \"services/project.service\";\n\nimport { Button, Layout, PageHeader, Form, Typography } from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\n\nimport { useNavigate } from \"react-router-dom\";\nimport { useParams } from \"react-router-dom\";\nimport toast from \"react-hot-toast\";\nimport ProjectFormFields from \"components/ProjectFormFields\";\nimport useLoginCheck from \"hooks/useLoginCheck\";\nimport copy from \"copy-to-clipboard\";\n\nconst ProjectDetails = (props) => {\n    const [project, setProject] = useState(null);\n\n    const [form] = Form.useForm();\n\n    const { id } = useParams();\n\n    useEffect(() => {\n        projectService.getProject(id).then((response) => {\n            setProject(response.data);\n        });\n    }, [id]);\n\n    const navigate = useNavigate();\n    useLoginCheck();\n\n    const onFinish = async (values) => {\n        const response = await projectService.saveProject(project.id, values);\n        if (response.data) toast.success(\"Saved\");\n    };\n\n    const projectAddress = project?.url\n        ? `https://tour.immersiv.com.au/p/${project.url}`\n        : \"not set yet\";\n    const galleryAddress = project?.url\n        ? `https://tour.immersiv.com.au/gallery?project=${project.url}`\n        : \"not set yet\";\n    const propertiesAddress = project?.url\n        ? `https://tour.immersiv.com.au/api/properties/properties-ue/${project.url}`\n        : \"not set yet\";\n\n    const setFieldsValue = (val) => {\n        if (form) {\n            form.setFieldsValue({\n                ...form.getFieldsValue(),\n                ...val,\n            });\n        }\n    };\n\n    const description = Form.useWatch(\"description\", form);\n    const projectName = Form.useWatch(\"projectName\", form);\n    const clientLogo = Form.useWatch(\"clientLogo\", form);\n    const clientLogoMaxWidth = Form.useWatch(\"clientLogoMaxWidth\", form);\n    const clientLogoMaxHeight = Form.useWatch(\"clientLogoMaxHeight\", form);\n    const projectLogo = Form.useWatch(\"projectLogo\", form);\n    const projectLogoMaxWidth = Form.useWatch(\"projectLogoMaxWidth\", form);\n    const projectLogoMaxHeight = Form.useWatch(\"projectLogoMaxHeight\", form);\n    return (\n        <LayoutHOC loading={!project}>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => navigate(\"/admin\")}\n                    title={`Project - ${project?.name}`}\n                    style={{\n                        boxShadow: \"1px 1px 10px 1px #ccc\",\n                        position: \"fixed\",\n                        zIndex: 100,\n                        width: \"100%\",\n                    }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        paddingTop: \"100px\",\n                        maxWidth: \"800px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    {project && (\n                        <>\n                            <Button\n                                onClick={() => navigate(`/p-admin/${id}`)}\n                                style={{ margin: \"16px\" }}\n                            >\n                                See client admin panel\n                            </Button>\n                            <Button\n                                onClick={() =>\n                                    navigate(\n                                        `/admin/projects/${project.id}/properties`\n                                    )\n                                }\n                                style={{ margin: \"16px\" }}\n                            >\n                                Manage properties\n                            </Button>\n                            <Button\n                                onClick={() =>\n                                    navigate(\n                                        `/admin/projects/${project.id}/media`\n                                    )\n                                }\n                                style={{ margin: \"16px\" }}\n                            >\n                                Manage media\n                            </Button>\n                            <Typography.Paragraph>\n                                {`The project full url is ${projectAddress}`}\n                                <Button\n                                    onClick={() => copy(projectAddress)}\n                                    type=\"link\"\n                                >\n                                    Copy\n                                </Button>\n                            </Typography.Paragraph>\n\n                            <Typography.Paragraph>\n                                {`The project gallery url is ${galleryAddress}`}{\" \"}\n                                <Button\n                                    onClick={() => copy(galleryAddress)}\n                                    type=\"link\"\n                                >\n                                    Copy\n                                </Button>\n                            </Typography.Paragraph>\n\n                            <Typography.Paragraph>\n                                {`The project properties api link ${propertiesAddress}`}{\" \"}\n                                <Button\n                                    onClick={() => copy(propertiesAddress)}\n                                    type=\"link\"\n                                >\n                                    Copy\n                                </Button>\n                            </Typography.Paragraph>\n\n                            <Form\n                                form={form}\n                                onFinish={onFinish}\n                                style={{\n                                    padding: \" 16px\",\n                                    maxWidth: \"500px\",\n                                    margin: \"auto\",\n                                }}\n                                initialValues={project}\n                                labelCol={{ span: 8 }}\n                                wrapperCol={{ span: 16 }}\n                            >\n                                <ProjectFormFields\n                                    setFieldsValue={setFieldsValue}\n                                />\n\n                                <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n                                    <Button\n                                        onClick={() => {\n                                            if (form.current)\n                                                form.current.resetFields();\n                                        }}\n                                        style={{ width: \"100%\" }}\n                                    >\n                                        Reset\n                                    </Button>\n                                </Form.Item>\n                            </Form>\n                            <div>\n                                <div>Project details preview</div>\n                                <div\n                                    style={{\n                                        display: \"flex\",\n                                        flexDirection: \"column\",\n                                        flex: 1,\n                                        alignItems: \"center\",\n                                    }}\n                                >\n                                    <img\n                                        src={clientLogo}\n                                        alt=\"logo\"\n                                        style={{\n                                            maxHeight:\n                                                clientLogoMaxHeight + \"px\",\n                                            maxWidth: clientLogoMaxWidth + \"px\",\n                                            marginBottom: \"36px\",\n                                        }}\n                                    />\n                                    {projectLogo ? (\n                                        <img\n                                            src={projectLogo}\n                                            alt=\"logo\"\n                                            style={{\n                                                maxHeight:\n                                                    projectLogoMaxHeight + \"px\",\n                                                maxWidth:\n                                                    projectLogoMaxWidth + \"px\",\n                                                marginBottom: \"36px\",\n                                            }}\n                                        />\n                                    ) : (\n                                        <h6 style={{ textAlign: \"center\" }}>\n                                            {projectName}\n                                        </h6>\n                                    )}\n                                    {/* <p style={{ textAlign: \"center\" }}>\n                                        {description}\n                                    </p> */}\n                                </div>\n                            </div>\n                        </>\n                    )}\n                </Content>\n            </Layout>\n        </LayoutHOC>\n    );\n};\n\nexport default ProjectDetails;\n","/home/andrii/immersiv-web/src/pages/Admins.jsx",["209"],"import LayoutHOC from \"layout/Layout\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\n\r\nimport {\r\n    Button,\r\n    Dropdown,\r\n    Form,\r\n    Input,\r\n    Layout,\r\n    List,\r\n    Menu,\r\n    Modal,\r\n    PageHeader,\r\n    Popconfirm,\r\n} from \"antd\";\r\nimport { Content } from \"antd/lib/layout/layout\";\r\nimport { MoreOutlined } from \"@ant-design/icons\";\r\nimport { useUser } from \"context/UserContext\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport toast from \"react-hot-toast\";\r\nimport adminService from \"services/admin.service\";\r\nimport useLoginCheck from \"hooks/useLoginCheck\";\r\n\r\nconst Admins = (props) => {\r\n    const formRef = useRef(null);\r\n    const [admins, setAdmins] = useState(null);\r\n    const [editModalOpen, setEditModalOpen] = useState(null);\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        adminService.getAdmin().then((response) => {\r\n            setAdmins(response.data);\r\n        });\r\n    }, []);\r\n\r\n    useLoginCheck();\r\n\r\n    const onFinish = async (values) => {\r\n        const response = await adminService.createAdmin(values);\r\n        if (response.data) {\r\n            toast.success(\"Saved\");\r\n            setAdmins(response.data);\r\n            setEditModalOpen(null);\r\n            if (formRef.current) formRef.current.resetFields();\r\n        }\r\n    };\r\n\r\n    const deleteAdmin = async (id) => {\r\n        const response = await adminService.deleteAdmin(id);\r\n        if (response.data) setAdmins(response.data);\r\n    };\r\n\r\n    return (\r\n        <LayoutHOC loading={!admins}>\r\n            <Layout\r\n                style={{\r\n                    height: \"100%\",\r\n                    display: \"flex\",\r\n                    flex: 1,\r\n                    background: \"white\",\r\n                }}\r\n            >\r\n                <PageHeader\r\n                    onBack={() => navigate(`/admin`)}\r\n                    title={`Admins`}\r\n                    style={{\r\n                        boxShadow: \"1px 1px 10px 1px #ccc\",\r\n                        position: \"fixed\",\r\n                        zIndex: 100,\r\n                        width: \"100%\",\r\n                    }}\r\n                />\r\n\r\n                <Content\r\n                    style={{\r\n                        flex: 1,\r\n                        overflow: \"auto\",\r\n                        padding: \"16px\",\r\n                        paddingTop: \"100px\",\r\n                        maxWidth: \"800px\",\r\n                        width: \"100%\",\r\n                        margin: \"auto\",\r\n                    }}\r\n                >\r\n                    <Button\r\n                        onClick={() => setEditModalOpen({})}\r\n                        style={{ margin: \"16px\" }}\r\n                    >\r\n                        Add admin\r\n                    </Button>\r\n                    <Modal\r\n                        visible={!!editModalOpen}\r\n                        onCancel={() => setEditModalOpen(null)}\r\n                        footer={null}\r\n                    >\r\n                        <Form\r\n                            onFinish={onFinish}\r\n                            style={{\r\n                                padding: \" 16px\",\r\n                                maxWidth: \"500px\",\r\n                                margin: \"auto\",\r\n                            }}\r\n                            ref={formRef}\r\n                        >\r\n                            <Form.Item\r\n                                name=\"email\"\r\n                                rules={[\r\n                                    {\r\n                                        required: true,\r\n                                        message: \"Please add name!\",\r\n                                        type: \"email\",\r\n                                    },\r\n                                ]}\r\n                            >\r\n                                <Input placeholder=\"Email\" />\r\n                            </Form.Item>\r\n\r\n                            <Form.Item>\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    htmlType=\"submit\"\r\n                                    style={{ width: \"100%\" }}\r\n                                >\r\n                                    Save\r\n                                </Button>\r\n                            </Form.Item>\r\n                        </Form>\r\n                    </Modal>\r\n                    {admins && (\r\n                        <List\r\n                            itemLayout=\"horizontal\"\r\n                            dataSource={admins.sort((a, b) =>\r\n                                a.name > b.name ? 1 : -1\r\n                            )}\r\n                            renderItem={(admin) => (\r\n                                <List.Item\r\n                                    actions={[\r\n                                        <Dropdown\r\n                                            overlay={\r\n                                                <Menu>\r\n                                                    <Popconfirm\r\n                                                        title=\"Are you sure to delete this admin?\"\r\n                                                        onConfirm={() =>\r\n                                                            deleteAdmin(\r\n                                                                admin.email\r\n                                                            )\r\n                                                        }\r\n                                                        okText=\"Yes\"\r\n                                                        cancelText=\"No\"\r\n                                                    >\r\n                                                        <Menu.Item\r\n                                                            key=\"3\"\r\n                                                            danger\r\n                                                        >\r\n                                                            Delete\r\n                                                        </Menu.Item>\r\n                                                    </Popconfirm>\r\n                                                </Menu>\r\n                                            }\r\n                                            trigger={[\"click\"]}\r\n                                        >\r\n                                            <MoreOutlined\r\n                                                style={{ fontSize: \"30px\" }}\r\n                                            />\r\n                                        </Dropdown>,\r\n                                    ]}\r\n                                    style={{\r\n                                        borderBottom: \"3px solid #ccc\",\r\n                                        paddingLeft: \"16px\",\r\n                                    }}\r\n                                >\r\n                                    <List.Item.Meta\r\n                                        title={admin.email}\r\n                                        description={\r\n                                            admin.locked\r\n                                                ? \"Locked\"\r\n                                                : \"Not locked\"\r\n                                        }\r\n                                    />\r\n                                </List.Item>\r\n                            )}\r\n                        />\r\n                    )}\r\n                </Content>\r\n            </Layout>\r\n        </LayoutHOC>\r\n    );\r\n};\r\n\r\nexport default Admins;\r\n","/home/andrii/immersiv-web/src/pages/Constants.jsx",[],"/home/andrii/immersiv-web/src/pages/Home.jsx",[],"/home/andrii/immersiv-web/src/pages/PropertiesClient.jsx",["210","211"],"import LayoutHOC from \"layout/Layout\";\nimport React, { useEffect, useState } from \"react\";\n\nimport { Drawer, Layout, Menu, PageHeader } from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\nimport { MenuOutlined } from \"@ant-design/icons\";\nimport { useUser } from \"context/UserContext\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport Properties from \"./Properties\";\nimport projectService from \"services/project.service\";\nimport propertyService from \"services/property.service\";\n\nconst PropertiesClient = (props) => {\n    const { id } = useParams();\n    const { logout, isLoggedIn, authData } = useUser();\n    const navigate = useNavigate();\n    const [project, setProject] = useState(null);\n    const [properties, setProperties] = useState(null);\n\n    const [openDrawer, setOpenDrawer] = useState(false);\n\n    useEffect(() => {\n        propertyService.getProperty(id).then((response) => {\n            setProperties(response.data);\n        });\n\n        projectService.getProject(id).then((response) => {\n            setProject(response.data);\n        });\n    }, []);\n\n    useEffect(() => {\n        if (\n            !isLoggedIn ||\n            (!authData?.super &&\n                id.toString() !== authData?.projectId.toString())\n        ) {\n            logout();\n            navigate(\"/login\");\n            return null;\n        }\n    }, [isLoggedIn, authData?.super, authData?.projectId]);\n\n    return (\n        <LayoutHOC loading={!properties || !project}>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => setOpenDrawer(true)}\n                    backIcon={<MenuOutlined />}\n                    title={\"Appartments\"}\n                    style={{\n                        boxShadow: \"1px 1px 10px 1px #ccc\",\n                        position: \"fixed\",\n                        zIndex: 100,\n                        width: \"100%\",\n                    }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        paddingTop: \"100px\",\n                        maxWidth: \"1200px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    <Properties\n                        id={id}\n                        setProject={setProject}\n                        setProperties={setProperties}\n                        project={project}\n                        properties={properties}\n                    />\n                </Content>\n            </Layout>\n            <Drawer\n                title=\"Menu\"\n                placement=\"left\"\n                onClose={() => setOpenDrawer(false)}\n                visible={openDrawer}\n            >\n                <Menu\n                    mode=\"inline\"\n                    style={{ width: \"100%\" }}\n                    onClick={({ item, key }) => {\n                        setOpenDrawer(false);\n                        switch (key) {\n                            case \"logout\":\n                                logout();\n                                break;\n                            case \"visit\":\n                                navigate(`/p/${project.url}`);\n                                break;\n                            case \"analytics\":\n                                navigate(`/p-admin/${project.id}/analytics`);\n                                break;\n                            default:\n                                return;\n                        }\n                    }}\n                    activeKey=\"properties\"\n                    selectedKeys={[\"properties\"]}\n                >\n                    <Menu.Item key=\"properties\">Properties</Menu.Item>\n                    <Menu.Item key=\"analytics\">Analytics</Menu.Item>\n                    <Menu.Item key=\"visit\">Visit project</Menu.Item>\n                    <Menu.Item key=\"logout\">Logout</Menu.Item>\n                </Menu>\n            </Drawer>\n        </LayoutHOC>\n    );\n};\n\nexport default PropertiesClient;\n","/home/andrii/immersiv-web/src/pages/Projects.jsx",[],"/home/andrii/immersiv-web/src/pages/ResetPassword.jsx",[],"/home/andrii/immersiv-web/src/layout/Layout.jsx",[],"/home/andrii/immersiv-web/src/pages/Project.jsx",[],"/home/andrii/immersiv-web/src/pages/CreateProject.jsx",[],"/home/andrii/immersiv-web/src/pages/AnalyticClient.jsx",["212","213","214","215","216","217"],"import LayoutHOC from \"layout/Layout\";\nimport React, { useEffect, useState } from \"react\";\n\nimport { DatePicker, Layout, PageHeader } from \"antd\";\n\nimport { Content } from \"antd/lib/layout/layout\";\n\nimport { useNavigate, useParams } from \"react-router-dom\";\n\nimport projectService from \"services/project.service\";\nimport moment from \"moment\";\nimport gaService from \"services/ga.service\";\nimport toast from \"react-hot-toast\";\nimport { ChartItem } from \"components/DashboardItem/DataItems\";\nimport useLoginCheck from \"hooks/useLoginCheck\";\nimport { useUser } from \"context/UserContext\";\n\nconst AnalyticClient = (props) => {\n    const { id } = useParams();\n\n    const [project, setProject] = useState(null);\n    const [dateData, setDateData] = useState(null);\n    const [cityData, setCityData] = useState(null);\n    const [deviceData, setDeviceData] = useState(null);\n    const [sourceData, setSourceData] = useState(null);\n    const [period, setPeriod] = useState([\n        moment().subtract(7, \"day\").format(),\n        moment().format(),\n    ]);\n    const navigate = useNavigate();\n    const { logout, isLoggedIn, authData } = useUser();\n\n    useEffect(() => {\n        if (\n            !isLoggedIn ||\n            (!authData?.super &&\n                id.toString() !== authData?.projectId.toString())\n        ) {\n            logout();\n            navigate(\"/login\");\n            return null;\n        }\n    }, [isLoggedIn, authData?.super, authData?.projectId]);\n\n    useEffect(() => {\n        projectService.getProject(id).then((response) => {\n            setProject(response.data);\n        });\n    }, []);\n\n    useEffect(() => {\n        if (period.length === 2 && project?.id) {\n            setDateData(null);\n            setCityData(null);\n            setDeviceData(null);\n            setSourceData(null);\n            getMetricData();\n        }\n    }, [period[0], period[1], project?.id]);\n\n    const getMetricData = () => {\n        gaService\n            .getGA(\n                project.id,\n                \"ga:users,ga:newUsers,ga:pageviews,ga:sessions,ga:sessionDuration\",\n                \"ga:date\",\n                period\n            )\n            .then((res) => {\n                setDateData(res.data.data);\n            })\n            .catch((err) => {\n                toast.error(\"Users analytics data not loaded\");\n            });\n\n        gaService\n            .getGA(project.id, \"ga:users\", \"ga:city\", period)\n            .then((res) => {\n                setCityData(res.data.data);\n            })\n            .catch((err) => {\n                toast.error(\"Location analytics data not loaded\");\n            });\n\n        gaService\n            .getGA(project.id, \"ga:users\", \"ga:deviceCategory\", period)\n            .then((res) => {\n                setDeviceData(res.data.data);\n            })\n            .catch((err) => {\n                toast.error(\"Device analytics data not loaded\");\n            });\n\n        gaService\n            .getGA(project.id, \"ga:users\", \"ga:source\", period)\n            .then((res) => {\n                setSourceData(res.data.data);\n            })\n            .catch((err) => {\n                toast.error(\"Source analytics data not loaded\");\n            });\n    };\n\n    return (\n        <LayoutHOC>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => navigate(`/p-admin/${id}`)}\n                    title={\n                        <>\n                            Analytics\n                            <br />\n                            <DatePicker.RangePicker\n                                size=\"large\"\n                                defaultValue={[\n                                    moment().subtract(7, \"day\"),\n                                    moment(),\n                                ]}\n                                onChange={(m) =>\n                                    setPeriod([m[0].format(), m[1].format()])\n                                }\n                                allowClear={false}\n                            />\n                        </>\n                    }\n                    style={{ borderBottom: \"1px #ccc solid\" }}\n                />\n                {project && (\n                    <Content\n                        style={{\n                            flex: 1,\n                            overflow: \"auto\",\n                            paddingTop: \"100px\",\n                            padding: \"16px\",\n\n                            width: \"100%\",\n                            margin: \"auto\",\n                        }}\n                    >\n                        <div\n                            style={{\n                                textAlign: \"center\",\n                                display: \"flex\",\n                                flexDirection: \"row\",\n                                flexWrap: \"wrap\",\n                                alignItems: \"center\",\n                                justifyContent: \"center\",\n                            }}\n                        >\n                            <ChartItem\n                                data={dateData}\n                                title=\"Users\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                column={1}\n                            />\n                            <ChartItem\n                                data={dateData}\n                                title=\"New users\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                column={2}\n                            />\n                            <ChartItem\n                                data={dateData}\n                                title=\"Page views\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                column={3}\n                            />\n                            <ChartItem\n                                data={dateData}\n                                title=\"Sessions\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                column={4}\n                            />\n                            <ChartItem\n                                data={dateData}\n                                title=\"Session duration (minutes)\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                column={5}\n                                seconds\n                            />\n                            <ChartItem\n                                data={deviceData}\n                                title=\"Device type\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                type=\"PieChart\"\n                                column={1}\n                                seconds\n                                isDate={false}\n                            />\n                            <ChartItem\n                                data={sourceData}\n                                title=\"Source\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                type=\"BarChart\"\n                                column={1}\n                                isDate={false}\n                            />\n                            <ChartItem\n                                data={cityData}\n                                title=\"Source\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                type=\"Table\"\n                                column={1}\n                                isDate={false}\n                            />\n                        </div>\n                    </Content>\n                )}\n            </Layout>\n        </LayoutHOC>\n    );\n};\n\nexport default AnalyticClient;\n","/home/andrii/immersiv-web/src/helpers/WithAxios.js",["218"],"import { useEffect } from \"react\";\nimport API from \"api/axios.config\";\nimport { useUser } from \"context/UserContext\";\nimport history from \"helpers/history\";\n\nconst WithAxios = ({ children }) => {\n    const { isInitiated, logout } = useUser();\n\n    useEffect(() => {\n        API.interceptors.response.use(\n            (response) => response,\n            async (error) => {\n                const originalRequest = error.config;\n                if (\n                    error.response.status === 401 &&\n                    originalRequest.url === \"/auth/refresh-token\"\n                ) {\n                    return new Promise((resolve, reject) => {\n                        logout();\n                        history.push(\"/login\");\n                        reject(error);\n                    });\n                }\n\n                if (error.response.status === 401 && !originalRequest._retry) {\n                    try {\n                        originalRequest._retry = true;\n                        const res = await API.post(\"/auth/refresh-token\");\n                        localStorage.setItem(\"token\", res.data.token);\n                        return API(originalRequest);\n                    } catch (error) {\n                        logout();\n                        history.push(\"/login\");\n                    }\n                }\n                return Promise.reject(error);\n            }\n        );\n    }, []);\n\n    return isInitiated ? children : null;\n};\n\nexport default WithAxios;\n","/home/andrii/immersiv-web/src/services/auth.service.js",[],"/home/andrii/immersiv-web/src/services/constant.service.js",[],"/home/andrii/immersiv-web/src/helpers/useQuery.js",[],"/home/andrii/immersiv-web/src/services/admin.service.js",[],"/home/andrii/immersiv-web/src/services/project.service.js",[],"/home/andrii/immersiv-web/src/services/property.service.js",[],"/home/andrii/immersiv-web/src/services/ga.service.js",[],"/home/andrii/immersiv-web/src/components/ProjectFormFields.jsx",["219","220"],"import { LoadingOutlined } from \"@ant-design/icons\";\nimport { Button, Checkbox, Form, Image, Input, Switch, Upload } from \"antd\";\nimport TextArea from \"antd/lib/input/TextArea\";\nimport uploadMedia from \"helpers/uploadMedia\";\nimport React, { useEffect, useState } from \"react\";\n\nconst Logo = (props) => {\n    const customUploadClientLogo = uploadMedia(\n        (values) => {\n            props.setFieldsValue({ [props.id]: values.url });\n        },\n        props.isVideo,\n        true\n    );\n    const [image, setImage] = useState(\"\");\n    useEffect(() => {\n        setTimeout(() => setImage(props[props.id]), 5000);\n    }, [props[props.id]]);\n    return (\n        <>\n            {image === props[props.id] ? (\n                props.isVideo ? (\n                    <video\n                        id=\"my-player\"\n                        class=\"video-js\"\n                        controls\n                        preload=\"auto\"\n                        data-setup=\"{}\"\n                    >\n                        <source src={image} type=\"video/mp4\"></source>\n                        <p class=\"vjs-no-js\">\n                            To view this video please enable JavaScript, and\n                            consider upgrading to a web browser that\n                            <a\n                                href=\"https://videojs.com/html5-video-support/\"\n                                target=\"_blank\"\n                                rel=\"noreferrer\"\n                            >\n                                supports HTML5 video\n                            </a>\n                        </p>\n                    </video>\n                ) : (\n                    <Image src={image} style={{ maxHeight: \"50px\" }} />\n                )\n            ) : (\n                <LoadingOutlined />\n            )}\n            <div style={{ marginTop: \"10px\" }}>\n                <Upload\n                    customRequest={customUploadClientLogo}\n                    showUploadList={false}\n                    maxCount={1}\n                    getValueFromEvent={() => {}}\n                >\n                    <Button>Change</Button>\n                </Upload>\n            </div>\n        </>\n    );\n};\n\nconst ProjectFormFields = ({ setFieldsValue }) => {\n    return (\n        <>\n            <Form.Item\n                name=\"name\"\n                label=\"Name\"\n                rules={[\n                    {\n                        required: true,\n                        message: \"Please set name!\",\n                    },\n                ]}\n            >\n                <Input placeholder=\"Name\" />\n            </Form.Item>\n\n            <Form.Item\n                name=\"url\"\n                label=\"Url\"\n                rules={[\n                    {\n                        required: true,\n                        message: \"Please add url!\",\n                    },\n                ]}\n                extra=\"This is only what should appear at the end of url, for example 'best-hotel', 'sky_mall'... Do not put https://tour.immersiv.com.au/ here!\"\n            >\n                <Input placeholder=\"Url\" />\n            </Form.Item>\n\n            <Form.Item\n                label=\"Arcware project\"\n                name=\"isArcware\"\n                valuePropName=\"checked\"\n            >\n                <Checkbox />\n            </Form.Item>\n\n            <Form.Item name=\"arcwareAddress\" label=\"Arcware address\">\n                <Input placeholder=\"Arcware address\" />\n            </Form.Item>\n\n            <Form.Item name=\"arcwarePackageId\" label=\"Arcware project id\">\n                <Input placeholder=\"Arcware project id\" />\n            </Form.Item>\n\n            <Form.Item name=\"projectId\" label=\"Project id\" hidden>\n                <Input placeholder=\"Project id\" />\n            </Form.Item>\n\n            <Form.Item name=\"modelId\" label=\"Model id\" hidden>\n                <Input placeholder=\"Model id\" />\n            </Form.Item>\n\n            <Form.Item\n                label=\"Custom background\"\n                name=\"backgroundOn\"\n                valuePropName=\"checked\"\n            >\n                <Checkbox />\n            </Form.Item>\n            <Form.Item\n                label=\"Background video\"\n                name=\"backgroundTypeVideo\"\n                valuePropName=\"checked\"\n            >\n                <Checkbox />\n            </Form.Item>\n            <Form.Item\n                label=\"Background video\"\n                valuePropName=\"backgroundVideo\"\n                name=\"backgroundVideo\"\n            >\n                <Logo setFieldsValue={setFieldsValue} isVideo />\n            </Form.Item>\n            <Form.Item\n                label=\"Background image\"\n                valuePropName=\"backgroundImage\"\n                name=\"backgroundImage\"\n            >\n                <Logo setFieldsValue={setFieldsValue} />\n            </Form.Item>\n\n            <Form.Item name=\"adminEmail\" label=\"Client login\">\n                <Input placeholder=\"Admin email\" />\n            </Form.Item>\n\n            <Form.Item\n                name=\"adminPassword\"\n                label=\"Client password\"\n                rules={[\n                    {\n                        min: 6,\n                        message: \"Must have length at least 6!\",\n                    },\n                ]}\n            >\n                <Input placeholder=\"Admin password\" />\n            </Form.Item>\n\n            <Form.Item name=\"analytic\" label=\"Analytics property\">\n                <Input placeholder=\"Google analytics property id\" />\n            </Form.Item>\n\n            <Form.Item\n                name=\"mobileNativeEvents\"\n                label=\"Mobile native events\"\n                valuePropName=\"checked\"\n            >\n                <Switch>Mobile native events</Switch>\n            </Form.Item>\n            <Form.Item\n                name=\"desktopNativeEvents\"\n                label=\"Desktop native events\"\n                valuePropName=\"checked\"\n            >\n                <Switch />\n            </Form.Item>\n\n            <Form.Item\n                name=\"published\"\n                valuePropName=\"checked\"\n                label=\"Published\"\n            >\n                <Checkbox />\n            </Form.Item>\n\n            <Form.Item\n                label=\"Project details on\"\n                name=\"projectDetailsOn\"\n                valuePropName=\"checked\"\n            >\n                <Checkbox />\n            </Form.Item>\n            <Form.Item\n                label=\"Project details duration\"\n                name=\"projectDetailsDuraton\"\n            >\n                <Input type=\"number\" />\n            </Form.Item>\n\n            <Form.Item\n                label=\"Client logo\"\n                valuePropName=\"clientLogo\"\n                name=\"clientLogo\"\n            >\n                <Logo setFieldsValue={setFieldsValue} />\n            </Form.Item>\n            <Form.Item label=\"Client logo max width\" name=\"clientLogoMaxWidth\">\n                <Input type=\"number\" />\n            </Form.Item>\n            <Form.Item\n                label=\"Client logo max height\"\n                name=\"clientLogoMaxHeight\"\n            >\n                <Input type=\"number\" />\n            </Form.Item>\n\n            <Form.Item\n                label=\"Project logo\"\n                valuePropName=\"projectLogo\"\n                name=\"projectLogo\"\n            >\n                <Logo setFieldsValue={setFieldsValue} />\n            </Form.Item>\n            <Form.Item\n                label=\"Project logo max width\"\n                name=\"projectLogoMaxWidth\"\n            >\n                <Input type=\"number\" />\n            </Form.Item>\n            <Form.Item\n                label=\"Project logo max height\"\n                name=\"projectLogoMaxHeight\"\n            >\n                <Input type=\"number\" />\n            </Form.Item>\n            <Form.Item\n                name=\"projectName\"\n                label=\"Project name\"\n                extra=\"This text will appear on the screen where the project is being loaded if there is no logo\"\n            >\n                <Input placeholder=\"projectName\" />\n            </Form.Item>\n            <Form.Item\n                name=\"description\"\n                label=\"Description\"\n                extra=\"This text will appear on the screen where the project is being loaded\"\n            >\n                <TextArea placeholder=\"Description\" rows={4} />\n            </Form.Item>\n\n            <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n                <Button\n                    type=\"primary\"\n                    htmlType=\"submit\"\n                    style={{ width: \"100%\" }}\n                >\n                    Save\n                </Button>\n            </Form.Item>\n        </>\n    );\n};\n\nexport default ProjectFormFields;\n","/home/andrii/immersiv-web/src/components/ForgotPasswordModal.jsx",[],"/home/andrii/immersiv-web/src/components/ProjectView/Components/PropertiesTable.jsx",["221","222"],"import {\n    Button,\n    Form,\n    Input,\n    InputNumber,\n    Popconfirm,\n    Select,\n    Table,\n    Typography,\n} from \"antd\";\nimport React, { useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport propertyService from \"services/property.service\";\n\nconst { Option } = Select;\n\nconst transferOrientationToObject = (data) => {\n    if (!data.Orientation) return data;\n    const o = {};\n    if (data.Orientation.indexOf(\"N\") !== -1) o.N = true;\n    else if (data.Orientation.indexOf(\"S\") !== -1) o.S = true;\n    if (data.Orientation.indexOf(\"E\") !== -1) o.E = true;\n    else if (data.Orientation.indexOf(\"W\") !== -1) o.W = true;\n    return { ...data, Orientation: o };\n};\n\nconst transferOrientationToString = (data) => {\n    let o = \"\";\n    if (data.Orientation.N) o = o + \"N\";\n    else if (data.Orientation.S) o = o + \"S\";\n    if (data.Orientation.E) o = o + \"E\";\n    else if (data.Orientation.W) o = o + \"W\";\n    return { ...data, Orientation: o };\n};\n\nconst EditableCell = ({\n    editing,\n    dataIndex,\n    title,\n    inputType,\n    property,\n    index,\n    children,\n    ...restProps\n}) => {\n    let inputNode = <InputNumber />;\n\n    switch (inputType) {\n        case \"number\":\n            inputNode = <InputNumber />;\n            break;\n        case \"orientation\":\n            inputNode = (\n                <Select>\n                    <Option value=\"N\">North</Option>\n                    <Option value=\"NE\">North-East</Option>\n                    <Option value=\"E\">East</Option>\n                    <Option value=\"SE\">South-East</Option>\n                    <Option value=\"S\">South</Option>\n                    <Option value=\"SW\">South-West</Option>\n                    <Option value=\"W\">West</Option>\n                    <Option value=\"NW\">North-West</Option>\n                </Select>\n            );\n            break;\n        case \"availability\":\n            inputNode = (\n                <Select>\n                    <Option value=\"available\">Available</Option>\n                    <Option value=\"reserved\">Reserved</Option>\n                    <Option value=\"sold\">Sold</Option>\n                </Select>\n            );\n            break;\n        default:\n            inputNode = <Input />;\n    }\n    return (\n        <td {...restProps}>\n            {editing ? (\n                <Form.Item\n                    name={dataIndex}\n                    style={{\n                        margin: 0,\n                        width: \"100%\",\n                    }}\n                    rules={[\n                        {\n                            required: true,\n                            message: `Please Input ${title}!`,\n                        },\n                    ]}\n                >\n                    {inputNode}\n                </Form.Item>\n            ) : (\n                children\n            )}\n        </td>\n    );\n};\n\nconst capitalize = (str) => str.charAt(0).toUpperCase() + str.slice(1);\n\nconst PropertiesTable = (props) => {\n    const { properties, project, setProperties, admin, setEditModalOpen } =\n        props;\n    const [selectedProperties, setSelectedProperties] = useState([]);\n    const [editingKey, setEditingKey] = useState(\"\");\n\n    const [form] = Form.useForm();\n    const isEditing = (property) => property.id === editingKey;\n\n    const edit = (property) => {\n        form.setFieldsValue(property);\n        setEditingKey(property.id);\n    };\n\n    const cancel = () => {\n        setEditingKey(\"\");\n    };\n\n    const save = async (key) => {\n        try {\n            const values = await form.validateFields();\n            const response = await propertyService.saveProperty(\n                project.id,\n                key,\n                transferOrientationToObject(values)\n            );\n\n            if (response.data) {\n                toast.success(\"Saved\");\n                setProperties(response.data);\n                setEditingKey(\"\");\n            }\n        } catch (errInfo) {\n            console.log(\"Validate Failed:\", errInfo);\n        }\n    };\n\n    const deleteProperty = async () => {\n        const response = await propertyService.deleteProperty(\n            project.id,\n            selectedProperties\n        );\n        if (response.data) setProperties(response.data);\n    };\n\n    const columns = [\n        {\n            title: \"Name\",\n            dataIndex: \"Name\",\n            sorter: (a, b) => (a.Name > b.Name ? 1 : -1),\n            sortDirections: [\"descend\", \"ascend\"],\n            editable: admin,\n            inputType: \"text\",\n            width: 100,\n        },\n        {\n            title: \"Availability\",\n            dataIndex: \"Availability\",\n            sorter: (a, b) => (a.Availability > b.Availability ? 1 : -1),\n            sortDirections: [\"descend\", \"ascend\"],\n            onFilter: (value, property) =>\n                property.Availability.indexOf(value) === 0,\n            editable: true,\n            inputType: \"availability\",\n            width: 100,\n            render: (_, property) => capitalize(property.Availability),\n        },\n        {\n            title: \"Surface\",\n            dataIndex: \"Surface\",\n            sorter: (a, b) => a.Surface - b.Surface,\n            sortDirections: [\"descend\", \"ascend\"],\n            editable: admin,\n            inputType: \"number\",\n            width: 100,\n        },\n        {\n            title: \"Price\",\n            dataIndex: \"Price\",\n            sorter: (a, b) => a.Price - b.Price,\n            sortDirections: [\"descend\", \"ascend\"],\n            editable: true,\n            inputType: \"number\",\n            width: 100,\n        },\n        {\n            title: \"Bedrooms\",\n            dataIndex: \"BedroomsCount\",\n            key: \"bedrooms\",\n            sortDirections: [\"descend\", \"ascend\"],\n            editable: admin,\n            inputType: \"number\",\n            width: 100,\n        },\n        {\n            title: \"Bathrooms\",\n            dataIndex: \"BathroomsCount\",\n            sorter: (a, b) => a.BathroomsCount - b.BathroomsCount,\n            sortDirections: [\"descend\", \"ascend\"],\n            editable: admin,\n            inputType: \"number\",\n            width: 100,\n        },\n        ...(project.url.toLowerCase() === \"Imperial_Square\".toLowerCase()\n            ? []\n            : [\n                  {\n                      title: \"Frontage\",\n                      dataIndex: \"Frontage\",\n                      sorter: (a, b) => a.Frontage - b.Frontage,\n                      sortDirections: [\"descend\", \"ascend\"],\n                      editable: admin,\n                      inputType: \"number\",\n                      width: 100,\n                  },\n                  {\n                      title: \"Depth\",\n                      dataIndex: \"Depth\",\n                      sorter: (a, b) => a.Depth - b.Depth,\n                      sortDirections: [\"descend\", \"ascend\"],\n                      editable: admin,\n                      inputType: \"number\",\n                      width: 100,\n                  },\n              ]),\n        {\n            title: \"Orientation\",\n            dataIndex: \"Orientation\",\n\n            sorter: (a, b) =>\n                transferOrientationToString(a).Orientation >\n                transferOrientationToString(b).Orientation\n                    ? 1\n                    : -1,\n            sortDirections: [\"descend\", \"ascend\"],\n            editable: admin,\n            inputType: \"orientation\",\n            width: 100,\n        },\n        {\n            title: \"Actions\",\n            dataIndex: \"actions\",\n            width: 80,\n            render: (_, property) => {\n                const editable = isEditing(property);\n                return editable ? (\n                    <span>\n                        <Typography.Link\n                            onClick={() => save(property.id)}\n                            style={{\n                                marginRight: 8,\n                            }}\n                        >\n                            Save\n                        </Typography.Link>\n\n                        <Typography.Link onClick={cancel}>\n                            Cancel\n                        </Typography.Link>\n                    </span>\n                ) : (\n                    <span>\n                        <Typography.Link\n                            disabled={editingKey !== \"\"}\n                            onClick={() => edit(property)}\n                        >\n                            Edit\n                        </Typography.Link>\n                    </span>\n                );\n            },\n        },\n    ];\n\n    const mergedColumns = columns.map((col) => {\n        if (!col.editable) {\n            return col;\n        }\n\n        return {\n            ...col,\n            onCell: (property) => ({\n                property,\n                inputType: col.inputType,\n                dataIndex: col.dataIndex,\n                title: col.title,\n                editing: isEditing(property),\n            }),\n        };\n    });\n\n    const onAddProperty = async () => {\n        const response = await propertyService.createProperty(\n            project.id,\n            properties.length ? properties[properties.length - 1].id : \"\"\n        );\n        if (response.data) {\n            toast.success(\"Added\");\n            setProperties(response.data.newProperties);\n            setEditingKey(response.data.newProperty.id);\n            form.setFieldsValue(\n                transferOrientationToString(response.data.newProperty)\n            );\n            document.querySelector(\"div.ant-table-body\").scrollTop = 1000000;\n        }\n    };\n    return (\n        <>\n            <Form form={form} component={false}>\n                <Table\n                    components={{\n                        body: {\n                            cell: EditableCell,\n                        },\n                    }}\n                    size=\"small\"\n                    bordered\n                    dataSource={properties.map((i) => {\n                        const d = transferOrientationToString(i);\n                        return { ...d, key: d.id };\n                    })}\n                    columns={mergedColumns}\n                    rowClassName=\"editable-row\"\n                    rowSelection={\n                        admin\n                            ? {\n                                  type: \"checkbox\",\n                                  onChange: (_, selectedRows) => {\n                                      setSelectedProperties(\n                                          selectedRows.map((i) => i.id)\n                                      );\n                                  },\n                              }\n                            : null\n                    }\n                    pagination={false}\n                    tableLayout=\"fixed\"\n                    scroll={{\n                        y: \"calc(100vh - 230px)\",\n                    }}\n                />\n            </Form>\n            {admin && (\n                <Button\n                    onClick={onAddProperty}\n                    style={{ margin: \"16px\" }}\n                    type=\"primary\"\n                >\n                    Add property\n                </Button>\n            )}\n            {!!selectedProperties.length && admin && (\n                <Typography.Link\n                    onClick={() => deleteProperty()}\n                    type=\"danger\"\n                    disabled={editingKey}\n                >\n                    Delete\n                </Typography.Link>\n            )}\n        </>\n    );\n};\n\nexport default PropertiesTable;\n","/home/andrii/immersiv-web/src/api/axios.config.js",[],"/home/andrii/immersiv-web/src/components/ProjectView/Components/Loading/Loading.jsx",["223","224","225"],"import { Progress } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\nimport styles from \"./Loading.module.css\";\n\nconst statusMessage = {\n    unknown: { text: \"Initializing your connection\", value: 8, from: 0 },\n    accepted: { text: \"Accepted, requesting model\", value: 40, from: 8 },\n    queued: { text: \"In queue\", value: 40, from: 8 },\n    requested: { text: \"Model requested\", value: 50, from: 40 },\n    ready: { text: \"Ready, 3D session launching\", value: 100, from: 50 },\n    arcware: { text: \"The project is loading\", value: 100, from: 0 },\n    serviced: { text: \"Viewing model\" },\n    cancelled: { text: \"Cancelled\" },\n    modelerror: { text: \"An issue with the model has occurred\" },\n    unavailable: { text: \"The requested model does not exist\" },\n};\n\nlet interval = null;\n\nexport const Loading = (props) => {\n    const { loaded, setLoaded, status, project } = props;\n    const [message, setMessage] = useState(null);\n    const [nextPercentage, setNextPercentage] = useState(0);\n    const [percentage, setPercentage] = useState(0);\n    useEffect(() => {\n        if (status?.status && statusMessage[status.status])\n            setMessage(statusMessage[status.status]);\n    }, [status?.status]);\n\n    useEffect(() => {\n        if (project.isArcware) setMessage(statusMessage.arcware);\n    }, [project.isArcware]);\n\n    useEffect(() => {\n        if (message?.text)\n            setNextPercentage(\n                message.value ? Math.max(nextPercentage, message.value) : 0\n            );\n    }, [message?.text]);\n\n    useEffect(() => {\n        const speed = project.isArcware ? 100 : 870;\n        if (nextPercentage) {\n            setPercentage(message?.from || 0);\n            if (interval) clearTimeout(interval);\n            interval = setTimeout(\n                () => startPercentage(message?.from || 0, nextPercentage),\n                Math.random() * speed\n            );\n        }\n\n        const startPercentage = (p, nP) => {\n            if (p < nP) {\n                if (interval) clearTimeout(interval);\n                setPercentage(p + 1);\n                interval = setTimeout(\n                    () => startPercentage(p + 1, nP),\n                    Math.random() * speed\n                );\n            }\n        };\n    }, [nextPercentage]);\n\n    useEffect(() => {\n        if (percentage === 100 && project.isArcware) {\n            setTimeout(() => setLoaded(true), 2000);\n        }\n    }, [percentage]);\n\n    return loaded ? null : (\n        <div\n            className={styles.wrap}\n            style={\n                project.backgroundOn && !project.backgroundTypeVideo\n                    ? {\n                          backgroundImage: `url(\"${project.backgroundImage}\")`,\n                          backgroundRepeat: \"no-repeat\",\n                          backgroundSize: \"cover\",\n                          backgroundPosition: \"center\",\n                      }\n                    : undefined\n            }\n        >\n            {project.backgroundOn && project.backgroundTypeVideo ? (\n                <video\n                    autoPlay\n                    muted\n                    loop\n                    className={styles.backgroundVideo}\n                    playsInline\n                >\n                    <source src={project.backgroundVideo} type=\"video/mp4\" />\n                </video>\n            ) : null}\n            <div\n                style={{\n                    background: \"rgba(0,0,0,.5)\",\n                    inset: \"0px\",\n                    position: \"absolute\",\n                }}\n            />\n\n            <div className={styles.center}>\n                <div>\n                    {project.projectDetailsOn && (\n                        <div\n                            style={{\n                                display: \"flex\",\n                                flexDirection: \"column\",\n                                alignItems: \"center\",\n                            }}\n                        >\n                            <img\n                                src=\"/images/logo-white.png\"\n                                alt=\"logo\"\n                                className={styles.logo}\n                            />\n                            <img\n                                src={project.clientLogo}\n                                alt=\"logo\"\n                                style={{\n                                    maxHeight:\n                                        project.clientLogoMaxHeight + \"px\",\n                                    maxWidth: project.clientLogoMaxWidth + \"px\",\n                                    width: \"100%\",\n                                    marginBottom: \"36px\",\n                                    marginTop: \"36px\",\n                                }}\n                            />\n                            {project.projectLogo ? (\n                                <img\n                                    src={project.projectLogo}\n                                    alt=\"logo\"\n                                    style={{\n                                        maxHeight:\n                                            project.projectLogoMaxHeight + \"px\",\n                                        maxWidth:\n                                            project.projectLogoMaxWidth + \"px\",\n                                        width: \"100%\",\n                                        marginBottom: \"36px\",\n                                    }}\n                                />\n                            ) : (\n                                <h6 style={{ textAlign: \"center\" }}>\n                                    {project.projectName}\n                                </h6>\n                            )}\n                            {/* <p\n                                style={{\n                                    textAlign: \"center\",\n                                    marginBottom: \"36px\",\n                                }}\n                            >\n                                {project.description}\n                            </p> */}\n                        </div>\n                    )}\n\n                    <div className={styles.video}>\n                        <video\n                            autoPlay\n                            loop\n                            muted\n                            style={{ objectFit: \"contain\" }}\n                            playsInline\n                        >\n                            <source\n                                src=\"https://immersivmedia.s3.ap-southeast-2.amazonaws.com/website-media/navigation-a.mp4\"\n                                type=\"video/mp4\"\n                            />\n                        </video>\n                    </div>\n                </div>\n            </div>\n            <div style={{ zIndex: 1 }}>\n                {message?.text\n                    ? `${message?.text} ${percentage}%`\n                    : \"Initializing...\"}\n            </div>\n            {!!nextPercentage && (\n                <Progress\n                    // size=\"small\"\n                    type=\"line\"\n                    percent={percentage}\n                    style={{ marginBottom: 20 }}\n                    trailColor=\"black\"\n                    strokeColor={{\n                        \"0%\": \"#108ee9\",\n                        \"100%\": \"#87d068\",\n                    }}\n                    strokeWidth={3}\n                    showInfo={false}\n                    format={\n                        percentage !== 100\n                            ? (percent) => (\n                                  <span style={{ color: \"white\" }}>\n                                      {message?.text || \"Initializing...\"}\n                                      {percent}%\n                                  </span>\n                              )\n                            : undefined\n                    }\n                />\n            )}\n        </div>\n    );\n};\n","/home/andrii/immersiv-web/src/components/ProjectView/Components/StreamView/StreamView.jsx",["226","227","228"],"import {\n    ModelDefinition,\n    PlatformNext,\n    UndefinedModelDefinition,\n    DefaultStreamerOptions,\n    StreamerStatus,\n} from \"@pureweb/platform-sdk\";\n\nimport {\n    useStreamer,\n    useLaunchRequest,\n    System,\n} from \"@pureweb/platform-sdk-react\";\n\nimport React, { useEffect, useState } from \"react\";\nimport useAsyncEffect from \"use-async-effect\";\nimport \"./StreamView.css\";\n\nimport { EmbeddedView } from \"../EmbededView/EmbededView\";\n\nimport logger from \"../../Log\";\nimport { isMobile as isMobileAgent } from \"react-device-detect\";\n\nconst audio = new Audio();\naudio.autoplay = true;\naudio.volume = 0.5;\n\n// Initialize platform reference\nconst platform = new PlatformNext();\nplatform.initialize({\n    endpoint: \"https://api.pureweb.io\",\n});\n\nconst StreamView = (props) => {\n    const { project } = props;\n\n    const [modelDefinitionUnavailable, setModelDefinitionUnavailable] =\n        useState(false);\n    const [modelDefinition, setModelDefinition] = useState(\n        new UndefinedModelDefinition()\n    );\n    const [availableModels, setAvailableModels] = useState();\n    const [launchRequestError, setLaunchRequestError] = useState();\n    const streamerOptions = DefaultStreamerOptions;\n\n    const [status, launchRequest, queueLaunchRequest] = useLaunchRequest(\n        platform,\n        modelDefinition,\n        {}\n    );\n    const [streamerStatus, emitter, videoStream, audioStream] = useStreamer(\n        platform,\n        launchRequest,\n        streamerOptions\n    );\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        if (streamerStatus === StreamerStatus.Failed) {\n            platform.disconnect();\n        }\n    }, [streamerStatus]);\n\n    if (audioStream) {\n        audio.srcObject = audioStream;\n    }\n\n    const launch = async () => {\n        setLoading(true);\n        audio.load();\n\n        if (project.LaunchType !== \"local\") {\n            try {\n                await queueLaunchRequest();\n            } catch (err) {\n                setLaunchRequestError(err);\n            }\n        }\n    };\n    useAsyncEffect(async () => {\n        if (project.projectId) {\n            // logger.info(\"Initializing available models: \" + project.projectId);\n            try {\n                await platform.useAnonymousCredentials(project.projectId);\n                await platform.connect();\n                // logger.info(\"Agent Connected: \" + platform.agent.id);\n                streamerOptions.iceServers =\n                    platform.agent.serviceCredentials.iceServers;\n                streamerOptions.forceRelay = project.ForceRelay;\n                const models = await platform.getModels();\n                setAvailableModels(models);\n                // logger.debug(\"Available models\", models);\n            } catch (err) {\n                logger.error(err);\n            }\n        }\n    }, [project]);\n    useEffect(() => {\n        if (availableModels?.length) {\n            const selectedModels = availableModels.filter(function (\n                model: ModelDefinition\n            ): boolean {\n                if (project.modelId === model.id) {\n                    // If there is a version specified and we encounter it\n                    if (project.Version && project.Version === model.version) {\n                        return true;\n                    }\n                    // If there is no version specified and we find the primary version\n                    if (!project.Version && model.active) {\n                        return true;\n                    }\n                }\n                return false;\n            });\n            if (selectedModels?.length) {\n                setModelDefinition(selectedModels[0]);\n            } else {\n                setModelDefinitionUnavailable(true);\n            }\n        }\n    }, [availableModels]);\n\n    useEffect(() => {\n        if (modelDefinition.type === 0) return;\n\n        launch();\n    }, [modelDefinition]);\n\n    // Log status messages\n    useEffect(() => {\n        // logger.info(\"Status\", status, streamerStatus);\n        props.setStatus(status);\n    }, [status, streamerStatus]);\n    // Notify user of missing or errors in configuration\n    if (!project.modelId || !project.projectId) {\n        props.setLoaded(true);\n        return (\n            <div\n                style={{\n                    display: \"flex\",\n                    height: \"100%\",\n                    overflow: \"none\",\n                    textAlign: \"center\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    flex: 1,\n                }}\n            >\n                <p>\n                    Your client has one or more configuration errors. Please\n                    consult the{\" \"}\n                    <a href=\"https://www.npmjs.com/package/@pureweb/cra-template-pureweb-client\">\n                        {\" \"}\n                        README{\" \"}\n                    </a>{\" \"}\n                    for details on how to configure the client template.\n                </p>\n            </div>\n        );\n    }\n\n    if (modelDefinitionUnavailable) {\n        props.setLoaded(true);\n        return (\n            <div\n                style={{\n                    display: \"flex\",\n                    height: \"100%\",\n                    overflow: \"none\",\n                    textAlign: \"center\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    flex: 1,\n                }}\n            >\n                <span>The model that you have requested does not exist</span>\n            </div>\n        );\n    }\n\n    if (launchRequestError) {\n        props.setLoaded(true);\n        return (\n            <div\n                style={{\n                    display: \"flex\",\n                    height: \"100%\",\n                    overflow: \"none\",\n                    textAlign: \"center\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    flex: 1,\n                }}\n            >\n                <span>\n                    {process.env.NODE_ENV === \"development\"\n                        ? `There was an error with the launch request: ${launchRequestError}`\n                        : \"It appears the requested model is currently not online as per your set schedule. Please contact support if it should be available.\"}\n                </span>\n            </div>\n        );\n    }\n\n    // Begin connection\n    if (streamerStatus === StreamerStatus.Disconnected) {\n        props.setLoaded(true);\n        return (\n            <div\n                style={{\n                    display: \"flex\",\n                    height: \"100%\",\n                    overflow: \"none\",\n                    textAlign: \"center\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    flex: 1,\n                }}\n            >\n                <h2>Disconnected from stream</h2>\n            </div>\n        );\n    }\n\n    if (streamerStatus === StreamerStatus.Failed) {\n        props.setLoaded(true);\n        return (\n            <div\n                style={{\n                    display: \"flex\",\n                    height: \"100%\",\n                    overflow: \"none\",\n                    textAlign: \"center\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    flex: 1,\n                }}\n            >\n                <h2>Failure during stream</h2>\n                <h2>Please refresh to request a new session</h2>\n            </div>\n        );\n    }\n\n    if (streamerStatus === StreamerStatus.Withdrawn) {\n        props.setLoaded(true);\n        return (\n            <div\n                style={{\n                    display: \"flex\",\n                    height: \"100%\",\n                    overflow: \"none\",\n                    textAlign: \"center\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    flex: 1,\n                }}\n            >\n                <h2>Streamer contribution withdrawn</h2>\n            </div>\n        );\n    }\n\n    if (loading) {\n        const useNativeTouchEvents =\n            !!project[\n                isMobileAgent ? \"mobileNativeEvents\" : \"desktopNativeEvents\"\n            ];\n        return (\n            <EmbeddedView\n                VideoStream={videoStream}\n                StreamerStatus={streamerStatus}\n                LaunchRequestStatus={status}\n                InputEmitter={emitter}\n                UseNativeTouchEvents={useNativeTouchEvents}\n                UsePointerLock={project.UsePointerLock}\n                PointerLockRelease={project.PointerLockRelease}\n                setLoaded={props.setLoaded}\n            />\n        );\n    } else if (project.LaunchType !== \"local\" && !availableModels) {\n        return (\n            <div\n                style={{\n                    display: \"flex\",\n                    height: \"100%\",\n                    overflow: \"none\",\n                    textAlign: \"center\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    flex: 1,\n                }}\n            >\n                <h2>Initializing...</h2>\n            </div>\n        );\n    } else if (project.LaunchType !== \"local\" && !availableModels?.length) {\n        props.setLoaded(true);\n        return (\n            <div\n                style={{\n                    display: \"flex\",\n                    height: \"100%\",\n                    overflow: \"none\",\n                    textAlign: \"center\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    flex: 1,\n                }}\n            >\n                <h2>No models are currently available in this environment.</h2>\n            </div>\n        );\n    } else {\n        return null;\n    }\n};\n\nconst StreamViewWrapper = (props) => {\n    return System.IsBrowserSupported() ? (\n        <div\n            style={{\n                backgroundColor: \"black\",\n                height: \"100%\",\n                flex: 1,\n                display: \"flex\",\n                color: \"white\",\n            }}\n        >\n            <StreamView\n                setLoaded={props.setLoaded}\n                setStatus={props.setStatus}\n                project={props.project}\n            />\n        </div>\n    ) : (\n        <div className=\"ui red segment center aligned basic\">\n            <h2 className=\"header\">Your browser is currently unsupported</h2>\n        </div>\n    );\n};\n\nexport default StreamViewWrapper;\n","/home/andrii/immersiv-web/src/components/ProjectView/Log.js",[],"/home/andrii/immersiv-web/src/components/ProjectView/Components/EmbededView/EmbededView.jsx",[],"/home/andrii/immersiv-web/src/components/ProjectView/Components/LoadingView/LoadingView.jsx",[],"/home/andrii/immersiv-web/src/pages/PropertiesAdmin.jsx",["229"],"import React, { useEffect, useState } from \"react\";\n\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport Properties from \"./Properties\";\nimport LayoutHOC from \"layout/Layout\";\nimport { Layout, PageHeader } from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\nimport propertyService from \"services/property.service\";\nimport projectService from \"services/project.service\";\nimport useLoginCheck from \"hooks/useLoginCheck\";\n\nconst PropertiesAdmin = (props) => {\n    const { id } = useParams();\n\n    const navigate = useNavigate();\n    const [project, setProject] = useState(null);\n    const [properties, setProperties] = useState(null);\n    useLoginCheck();\n\n    useEffect(() => {\n        propertyService.getProperty(id).then((response) => {\n            setProperties(response.data);\n        });\n\n        projectService.getProject(id).then((response) => {\n            setProject(response.data);\n        });\n    }, []);\n    return (\n        <LayoutHOC>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => navigate(`/admin/projects/${id}`)}\n                    title={`Properties of project id: ${id}`}\n                    style={{\n                        boxShadow: \"1px 1px 10px 1px #ccc\",\n                        position: \"fixed\",\n                        zIndex: 100,\n                        width: \"100%\",\n                    }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        paddingTop: \"100px\",\n                        maxWidth: \"1200px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    <Properties\n                        admin\n                        id={id}\n                        setProject={setProject}\n                        setProperties={setProperties}\n                        project={project}\n                        properties={properties}\n                    />\n                </Content>\n            </Layout>\n        </LayoutHOC>\n    );\n};\n\nexport default PropertiesAdmin;\n","/home/andrii/immersiv-web/src/components/DashboardItem/DataItems/index.js",[],"/home/andrii/immersiv-web/src/components/DashboardItem/DataItems/TextItem/TextItem.js",[],"/home/andrii/immersiv-web/src/components/DashboardItem/DataItems/ChartItem/ChartItem.js",[],"/home/andrii/immersiv-web/src/components/ProjectView/Layout/ProjectView.jsx",["230","231","232"],"import React, { useState } from \"react\";\nimport { Button } from \"./Button\";\n\nimport StreamViewWrapper from \"../Components/StreamView/StreamView\";\nimport { PoweredLogo } from \"./PoweredLogo\";\n\nimport styles from \"./ProjectView.module.css\";\nimport { MailFilled, PhoneFilled } from \"@ant-design/icons\";\nimport { isMobile as isMobileAgent } from \"react-device-detect\";\n\nimport { useWindowSize } from \"@react-hook/window-size\";\nimport { Loading } from \"components/ProjectView/Components/Loading/Loading\";\nimport ProjectA from \"pages/ProjectA\";\nconst ProjectView = (props) => {\n    const { project, constant } = props;\n    const [width, height] = useWindowSize();\n    // const isMobile = isMobileAgent || width < 1200 || height < 700;\n    const isMobile = true;\n    const [loaded, setLoaded] = useState(false);\n    const [status, setStatus] = useState(false);\n\n    return (\n        <>\n            <div className={isMobile ? styles.flex1 : styles.wrap}>\n                {!isMobile && <div className={styles.top}>{project.name}</div>}\n                <div className={isMobile ? styles.flex1 : styles.center}>\n                    {!isMobile && <PoweredLogo invisible />}\n                    <div className={isMobile ? styles.flex1 : styles.viewWrap}>\n                        <div\n                            className={\n                                isMobile ? styles.flex1 : styles.viewInner\n                            }\n                        >\n                            {project && project.isArcware ? (\n                                <ProjectA\n                                    project={project}\n                                    setLoaded={setLoaded}\n                                />\n                            ) : (\n                                <StreamViewWrapper\n                                    setLoaded={setLoaded}\n                                    setStatus={setStatus}\n                                    project={project}\n                                />\n                            )}\n                            {loaded && (\n                                <img\n                                    src=\"/images/logo-white.png\"\n                                    alt=\"logo\"\n                                    className={styles.mLogo}\n                                />\n                            )}\n                            {!isMobile && (\n                                <>\n                                    {loaded && (\n                                        <img\n                                            src=\"/images/logo-white.png\"\n                                            alt=\"logo\"\n                                            className={styles.mLogo}\n                                        />\n                                    )}\n                                    <div className={styles.mCenter}>\n                                        <Button\n                                            link={`tel:${constant.call}`}\n                                            name=\"phone\"\n                                        ></Button>\n                                        <Button\n                                            link={`mailto:${constant.email}`}\n                                            name=\"mail\"\n                                        ></Button>\n                                    </div>\n                                </>\n                            )}\n                        </div>\n                    </div>\n                    {!isMobile && <PoweredLogo />}\n                </div>\n                {!isMobile && (\n                    <div className={styles.bottomWrap}>\n                        <PoweredLogo invisible />\n\n                        <div className={styles.bottomCenter}>\n                            <div className={styles.bottomCenterLeft}>\n                                <img\n                                    src=\"/images/controls.png\"\n                                    alt=\"logo\"\n                                    style={{ width: \"100%\" }}\n                                />\n                            </div>\n                            <div className={styles.bottomCenterCenter}>\n                                {project.logo && (\n                                    <img\n                                        src=\"/images/imperial-logo.png\"\n                                        alt=\"logo\"\n                                        style={{ height: \"120px\" }}\n                                    />\n                                )}\n                            </div>\n                            <div className={styles.bottomCenterRight}>\n                                <a\n                                    href={`tel:${constant.call}`}\n                                    className={styles.contactWrap}\n                                >\n                                    <div className={styles.contactIconWrap}>\n                                        <PhoneFilled\n                                            name=\"phone\"\n                                            className={styles.contactIcon}\n                                        />\n                                    </div>\n                                    <div style={{ width: \"10px\" }}></div>\n                                    <div className={styles.contactText}>\n                                        {constant.phone}\n                                    </div>\n                                </a>\n                                {/* <div style={{ height: \"20px\" }}></div> */}\n                                <a\n                                    href={`mailto:${constant.email}`}\n                                    className={styles.contactWrap}\n                                >\n                                    <div className={styles.contactIconWrap}>\n                                        <MailFilled\n                                            name=\"mail\"\n                                            size=\"small\"\n                                            className={styles.contactIcon}\n                                        />\n                                    </div>\n                                    <div style={{ width: \"10px\" }}></div>\n                                    <div className={styles.contactText}>\n                                        {constant.email}\n                                    </div>\n                                </a>\n                            </div>\n                        </div>\n                        <PoweredLogo invisible />\n                    </div>\n                )}\n            </div>\n            <Loading\n                loaded={loaded}\n                status={status}\n                project={project}\n                setLoaded={setLoaded}\n            />\n        </>\n    );\n};\n\nexport default ProjectView;\n","/home/andrii/immersiv-web/src/components/ProjectView/Layout/Button.jsx",[],"/home/andrii/immersiv-web/src/components/ProjectView/Layout/PoweredLogo.jsx",[],"/home/andrii/immersiv-web/src/hooks/useLoginCheck.js",["233"],"import { useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useUser } from \"context/UserContext\";\n\nconst useLoginCheck = () => {\n    const navigate = useNavigate();\n    const { isLoggedIn, authData, logout, isInitiated } = useUser();\n    useEffect(() => {\n        if (isInitiated) {\n            if (!isLoggedIn) {\n                logout();\n                navigate(\"/login\");\n                return null;\n            }\n\n            if (!authData?.super) {\n                if (authData?.projectId) {\n                    navigate(`/p-admin/${authData.projectId}`);\n                    return null;\n                } else {\n                    logout();\n                    navigate(\"/login\");\n                    return null;\n                }\n            }\n        }\n    }, [isLoggedIn, authData?.super, authData?.projectId, isInitiated]);\n};\n\nexport default useLoginCheck;\n","/home/andrii/immersiv-web/src/pages/MediaAdmin.jsx",["234","235","236","237","238","239"],"import React, { useEffect, useState, useRef } from \"react\";\n\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport LayoutHOC from \"layout/Layout\";\nimport {\n    Button,\n    Form,\n    Input,\n    Layout,\n    List,\n    PageHeader,\n    Popconfirm,\n    Select,\n    Space,\n    Typography,\n    Upload,\n} from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\nimport projectService from \"services/project.service\";\nimport useLoginCheck from \"hooks/useLoginCheck\";\nimport toast from \"react-hot-toast\";\nimport YouTube from \"react-youtube\";\nimport { UploadOutlined } from \"@ant-design/icons\";\nimport axios from \"axios\";\nimport utilsService from \"services/utils.service\";\nimport videojs from \"video.js\";\nimport \"video.js/dist/video-js.css\";\nimport uploadMedia from \"helpers/uploadMedia\";\n\nconst MediaAdmin = (props) => {\n    const { id } = useParams();\n    const formRef = useRef(null);\n\n    const navigate = useNavigate();\n    const [project, setProject] = useState(null);\n    useLoginCheck();\n\n    useEffect(() => {\n        projectService.getProject(id).then((response) => {\n            setProject(response.data);\n        });\n    }, []);\n\n    const onFinish = async (values) => {\n        const response = await projectService.addMedia(id, values);\n        if (response.data) {\n            toast.success(\"Saved\");\n            setProject(response.data);\n            if (formRef.current) formRef.current.resetFields();\n        }\n    };\n    const handleMove = async (mediaId, down) => {\n        const response = await projectService.moveMedia(id, mediaId, down);\n        if (response.data) {\n            toast.success(\"Moved\");\n            setProject(response.data);\n        }\n    };\n    const handleDelete = async (mediaId) => {\n        const response = await projectService.deleteMedia(id, mediaId);\n        if (response.data) {\n            toast.success(\"Deleted\");\n            setProject(response.data);\n        }\n    };\n\n    const customUpload = uploadMedia((values) => {\n        if (formRef.current) {\n            formRef.current.setFieldsValue({\n                ...formRef.current.values,\n                ...values,\n            });\n        }\n    }, formRef?.current?.getFieldValue(\"type\") === \"video\");\n\n    return (\n        <LayoutHOC>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => navigate(`/admin/projects/${id}`)}\n                    title={`Media of project id: ${id}`}\n                    style={{\n                        boxShadow: \"1px 1px 10px 1px #ccc\",\n                        position: \"fixed\",\n                        zIndex: 100,\n                        width: \"100%\",\n                    }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        paddingTop: \"100px\",\n                        maxWidth: \"1200px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    {project && project.media && (\n                        <div>\n                            <List\n                                itemLayout=\"vertical\"\n                                size=\"large\"\n                                dataSource={project.media}\n                                renderItem={(item, index) => (\n                                    <List.Item\n                                        key={item.id}\n                                        actions={[\n                                            <Button\n                                                size=\"small\"\n                                                key=\"up\"\n                                                onClick={() =>\n                                                    handleMove(item.id, false)\n                                                }\n                                            >\n                                                Move up\n                                            </Button>,\n                                            <Button\n                                                size=\"small\"\n                                                key=\"down\"\n                                                onClick={() =>\n                                                    handleMove(item.id, true)\n                                                }\n                                            >\n                                                Move down\n                                            </Button>,\n                                            <Popconfirm\n                                                title=\"Are you sure to delete this media?\"\n                                                onConfirm={() =>\n                                                    handleDelete(item.id)\n                                                }\n                                                okText=\"Yes\"\n                                                cancelText=\"No\"\n                                                key=\"delete\"\n                                            >\n                                                <Button size=\"small\" danger>\n                                                    Delete\n                                                </Button>\n                                            </Popconfirm>,\n                                        ]}\n                                        extra={\n                                            item.type === \"video\" ? (\n                                                <video\n                                                    id=\"my-player\"\n                                                    class=\"video-js\"\n                                                    controls\n                                                    preload=\"auto\"\n                                                    data-setup=\"{}\"\n                                                >\n                                                    <source\n                                                        src={item.url}\n                                                        type=\"video/mp4\"\n                                                    ></source>\n                                                    <p class=\"vjs-no-js\">\n                                                        To view this video\n                                                        please enable\n                                                        JavaScript, and consider\n                                                        upgrading to a web\n                                                        browser that\n                                                        <a\n                                                            href=\"https://videojs.com/html5-video-support/\"\n                                                            target=\"_blank\"\n                                                            rel=\"noreferrer\"\n                                                        >\n                                                            supports HTML5 video\n                                                        </a>\n                                                    </p>\n                                                </video>\n                                            ) : (\n                                                <img\n                                                    width=\"100%\"\n                                                    style={{\n                                                        maxWidth: \"300px\",\n                                                    }}\n                                                    alt=\"logo\"\n                                                    src={item.url}\n                                                />\n                                            )\n                                        }\n                                    >\n                                        <List.Item.Meta\n                                            description={item.type}\n                                            title={`${index + 1}. ${\n                                                item.name || \"no name\"\n                                            }`}\n                                        />\n                                        {item.url}\n                                    </List.Item>\n                                )}\n                            />\n                            <Form\n                                onFinish={onFinish}\n                                style={{\n                                    padding: \" 16px\",\n                                    maxWidth: \"500px\",\n                                    margin: \"auto\",\n                                    backgroundColor: \"#eee\",\n                                }}\n                                ref={formRef}\n                            >\n                                <Typography.Title level={4}>\n                                    Add new media\n                                </Typography.Title>\n                                <Form.Item\n                                    name=\"type\"\n                                    rules={[{ required: true }]}\n                                >\n                                    <Select placeholder=\"Choose type\">\n                                        <Select.Option value=\"photo\">\n                                            Photo\n                                        </Select.Option>\n                                        <Select.Option value=\"plan\">\n                                            Plan\n                                        </Select.Option>\n                                        <Select.Option value=\"video\">\n                                            Video\n                                        </Select.Option>\n                                    </Select>\n                                </Form.Item>\n                                <Form.Item\n                                    name=\"name\"\n                                    rules={[{ required: true }]}\n                                >\n                                    <Input placeholder=\"Name\" />\n                                </Form.Item>\n                                <Form.Item\n                                    name=\"url\"\n                                    rules={[{ required: true }]}\n                                >\n                                    <Input placeholder=\"Url\" readOnly />\n                                </Form.Item>\n                                <Form.Item name=\"thumbnail\" hidden>\n                                    <Input placeholder=\"Thumbnail\" />\n                                </Form.Item>\n                                <Form.Item>\n                                    <Upload\n                                        accept=\"image/*,video/*\"\n                                        listType=\"picture\"\n                                        maxCount={1}\n                                        customRequest={customUpload}\n                                    >\n                                        <Button icon={<UploadOutlined />}>\n                                            Upload (Max: 1)\n                                        </Button>\n                                    </Upload>\n                                </Form.Item>\n\n                                <Form.Item>\n                                    <Button\n                                        type=\"primary\"\n                                        htmlType=\"submit\"\n                                        style={{ width: \"100%\" }}\n                                    >\n                                        Add media\n                                    </Button>\n                                </Form.Item>\n                            </Form>\n                        </div>\n                    )}\n                </Content>\n            </Layout>\n        </LayoutHOC>\n    );\n};\n\nexport default MediaAdmin;\n","/home/andrii/immersiv-web/src/services/utils.service.js",[],"/home/andrii/immersiv-web/src/helpers/uploadMedia.js",[],"/home/andrii/immersiv-web/src/pages/ProjectA.jsx",["240","241","242","243","244","245"],{"ruleId":"246","severity":1,"message":"247","line":98,"column":21,"nodeType":"248","endLine":98,"endColumn":24},{"ruleId":"249","severity":1,"message":"250","line":19,"column":8,"nodeType":"251","endLine":19,"endColumn":10,"suggestions":"252"},{"ruleId":"253","severity":1,"message":"254","line":2,"column":28,"nodeType":"255","messageId":"256","endLine":2,"endColumn":34},{"ruleId":"253","severity":1,"message":"257","line":55,"column":11,"nodeType":"255","messageId":"256","endLine":55,"endColumn":22},{"ruleId":"253","severity":1,"message":"258","line":18,"column":10,"nodeType":"255","messageId":"256","endLine":18,"endColumn":17},{"ruleId":"249","severity":1,"message":"259","line":30,"column":8,"nodeType":"251","endLine":30,"endColumn":10,"suggestions":"260"},{"ruleId":"249","severity":1,"message":"261","line":42,"column":8,"nodeType":"251","endLine":42,"endColumn":58,"suggestions":"262"},{"ruleId":"253","severity":1,"message":"263","line":15,"column":8,"nodeType":"255","messageId":"256","endLine":15,"endColumn":21},{"ruleId":"249","severity":1,"message":"261","line":43,"column":8,"nodeType":"251","endLine":43,"endColumn":58,"suggestions":"264"},{"ruleId":"249","severity":1,"message":"259","line":49,"column":8,"nodeType":"251","endLine":49,"endColumn":10,"suggestions":"265"},{"ruleId":"249","severity":1,"message":"266","line":59,"column":8,"nodeType":"251","endLine":59,"endColumn":43,"suggestions":"267"},{"ruleId":"249","severity":1,"message":"268","line":59,"column":9,"nodeType":"269","endLine":59,"endColumn":18},{"ruleId":"249","severity":1,"message":"268","line":59,"column":20,"nodeType":"269","endLine":59,"endColumn":29},{"ruleId":"249","severity":1,"message":"270","line":39,"column":8,"nodeType":"251","endLine":39,"endColumn":10,"suggestions":"271"},{"ruleId":"249","severity":1,"message":"272","line":18,"column":8,"nodeType":"251","endLine":18,"endColumn":25,"suggestions":"273"},{"ruleId":"249","severity":1,"message":"268","line":18,"column":9,"nodeType":"269","endLine":18,"endColumn":24},{"ruleId":"253","severity":1,"message":"274","line":6,"column":5,"nodeType":"255","messageId":"256","endLine":6,"endColumn":15},{"ruleId":"253","severity":1,"message":"275","line":106,"column":56,"nodeType":"255","messageId":"256","endLine":106,"endColumn":72},{"ruleId":"249","severity":1,"message":"276","line":40,"column":8,"nodeType":"251","endLine":40,"endColumn":23,"suggestions":"277"},{"ruleId":"249","severity":1,"message":"278","line":63,"column":8,"nodeType":"251","endLine":63,"endColumn":24,"suggestions":"279"},{"ruleId":"249","severity":1,"message":"280","line":69,"column":8,"nodeType":"251","endLine":69,"endColumn":20,"suggestions":"281"},{"ruleId":"249","severity":1,"message":"282","line":121,"column":8,"nodeType":"251","endLine":121,"endColumn":25,"suggestions":"283"},{"ruleId":"249","severity":1,"message":"284","line":127,"column":8,"nodeType":"251","endLine":127,"endColumn":25,"suggestions":"285"},{"ruleId":"249","severity":1,"message":"272","line":133,"column":8,"nodeType":"251","endLine":133,"endColumn":32,"suggestions":"286"},{"ruleId":"249","severity":1,"message":"259","line":28,"column":8,"nodeType":"251","endLine":28,"endColumn":10,"suggestions":"287"},{"ruleId":"253","severity":1,"message":"288","line":9,"column":22,"nodeType":"255","messageId":"256","endLine":9,"endColumn":35},{"ruleId":"253","severity":1,"message":"289","line":16,"column":12,"nodeType":"255","messageId":"256","endLine":16,"endColumn":17},{"ruleId":"253","severity":1,"message":"290","line":16,"column":19,"nodeType":"255","messageId":"256","endLine":16,"endColumn":25},{"ruleId":"249","severity":1,"message":"291","line":27,"column":8,"nodeType":"251","endLine":27,"endColumn":71,"suggestions":"292"},{"ruleId":"253","severity":1,"message":"293","line":14,"column":5,"nodeType":"255","messageId":"256","endLine":14,"endColumn":10},{"ruleId":"253","severity":1,"message":"294","line":22,"column":8,"nodeType":"255","messageId":"256","endLine":22,"endColumn":15},{"ruleId":"253","severity":1,"message":"295","line":24,"column":8,"nodeType":"255","messageId":"256","endLine":24,"endColumn":13},{"ruleId":"253","severity":1,"message":"296","line":25,"column":8,"nodeType":"255","messageId":"256","endLine":25,"endColumn":20},{"ruleId":"253","severity":1,"message":"297","line":26,"column":8,"nodeType":"255","messageId":"256","endLine":26,"endColumn":15},{"ruleId":"249","severity":1,"message":"259","line":42,"column":8,"nodeType":"251","endLine":42,"endColumn":10,"suggestions":"298"},{"ruleId":"253","severity":1,"message":"299","line":8,"column":7,"nodeType":"255","messageId":"256","endLine":8,"endColumn":18},{"ruleId":"253","severity":1,"message":"300","line":28,"column":10,"nodeType":"255","messageId":"256","endLine":28,"endColumn":15},{"ruleId":"253","severity":1,"message":"301","line":48,"column":10,"nodeType":"255","messageId":"256","endLine":48,"endColumn":19},{"ruleId":"253","severity":1,"message":"302","line":64,"column":12,"nodeType":"255","messageId":"256","endLine":64,"endColumn":23},{"ruleId":"253","severity":1,"message":"303","line":65,"column":12,"nodeType":"255","messageId":"256","endLine":65,"endColumn":20},{"ruleId":"249","severity":1,"message":"304","line":125,"column":32,"nodeType":"305","endLine":125,"endColumn":36},"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'id', 'setProject', and 'setProperties'. Either include them or remove the dependency array.","ArrayExpression",["306"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'description' is assigned a value but never used.","'useUser' is defined but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["307"],"React Hook useEffect has missing dependencies: 'id', 'logout', and 'navigate'. Either include them or remove the dependency array.",["308"],"'useLoginCheck' is defined but never used.",["309"],["310"],"React Hook useEffect has missing dependencies: 'getMetricData' and 'period.length'. Either include them or remove the dependency array.",["311"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","MemberExpression","React Hook useEffect has a missing dependency: 'logout'. Either include it or remove the dependency array.",["312"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["313"],"'Popconfirm' is defined but never used.","'setEditModalOpen' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'message.value' and 'nextPercentage'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setNextPercentage' needs the current value of 'message.value'.",["314"],"React Hook useEffect has missing dependencies: 'message?.from' and 'project.isArcware'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setPercentage' needs the current value of 'message.from'.",["315"],"React Hook useEffect has missing dependencies: 'project.isArcware' and 'setLoaded'. Either include them or remove the dependency array.",["316"],"React Hook useEffect has missing dependencies: 'project.Version' and 'project.modelId'. Either include them or remove the dependency array.",["317"],"React Hook useEffect has a missing dependency: 'launch'. Either include it or remove the dependency array.",["318"],["319"],["320"],"'isMobileAgent' is defined but never used.","'width' is assigned a value but never used.","'height' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'logout' and 'navigate'. Either include them or remove the dependency array.",["321"],"'Space' is defined but never used.","'YouTube' is defined but never used.","'axios' is defined but never used.","'utilsService' is defined but never used.","'videojs' is defined but never used.",["322"],"'descriptors' is assigned a value but never used.","'AppUI' is defined but never used.","'Responses' is defined but never used.","'projectData' is assigned a value but never used.","'constant' is assigned a value but never used.","Assignments to the 'webrtcClientInit' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal",{"desc":"323","fix":"324"},{"desc":"325","fix":"326"},{"desc":"327","fix":"328"},{"desc":"327","fix":"329"},{"desc":"325","fix":"330"},{"desc":"331","fix":"332"},{"desc":"333","fix":"334"},{"desc":"335","fix":"336"},{"desc":"337","fix":"338"},{"desc":"339","fix":"340"},{"desc":"341","fix":"342"},{"desc":"343","fix":"344"},{"desc":"345","fix":"346"},{"desc":"347","fix":"348"},{"desc":"325","fix":"349"},{"desc":"350","fix":"351"},{"desc":"325","fix":"352"},"Update the dependencies array to be: [id, setProject, setProperties]",{"range":"353","text":"354"},"Update the dependencies array to be: [id]",{"range":"355","text":"356"},"Update the dependencies array to be: [isLoggedIn, authData?.super, authData?.projectId, id, logout, navigate]",{"range":"357","text":"358"},{"range":"359","text":"358"},{"range":"360","text":"356"},"Update the dependencies array to be: [getMetricData, period.length, project?.id]",{"range":"361","text":"362"},"Update the dependencies array to be: [logout]",{"range":"363","text":"364"},"Update the dependencies array to be: [props]",{"range":"365","text":"366"},"Update the dependencies array to be: [message?.text, message.value, nextPercentage]",{"range":"367","text":"368"},"Update the dependencies array to be: [message?.from, nextPercentage, project.isArcware]",{"range":"369","text":"370"},"Update the dependencies array to be: [percentage, project.isArcware, setLoaded]",{"range":"371","text":"372"},"Update the dependencies array to be: [availableModels, project.Version, project.modelId]",{"range":"373","text":"374"},"Update the dependencies array to be: [launch, modelDefinition]",{"range":"375","text":"376"},"Update the dependencies array to be: [props, status, streamerStatus]",{"range":"377","text":"378"},{"range":"379","text":"356"},"Update the dependencies array to be: [isLoggedIn, authData?.super, authData.projectId, isInitiated, logout, navigate]",{"range":"380","text":"381"},{"range":"382","text":"356"},[655,657],"[id, setProject, setProperties]",[1089,1091],"[id]",[1364,1414],"[isLoggedIn, authData?.super, authData?.projectId, id, logout, navigate]",[1407,1457],[1600,1602],[1852,1887],"[getMetricData, period.length, project?.id]",[1410,1412],"[logout]",[622,639],"[props]",[1518,1533],"[message?.text, message.value, nextPercentage]",[2262,2278],"[message?.from, nextPercentage, project.isArcware]",[2429,2441],"[percentage, project.isArcware, setLoaded]",[3785,3802],"[availableModels, project.Version, project.modelId]",[3902,3919],"[launch, modelDefinition]",[4070,4094],"[props, status, streamerStatus]",[934,936],[805,868],"[isLoggedIn, authData?.super, authData.projectId, isInitiated, logout, navigate]",[1142,1144]]
[{"/home/andrii/immersiv-web/src/index.js":"1","/home/andrii/immersiv-web/src/reportWebVitals.js":"2","/home/andrii/immersiv-web/src/App.js":"3","/home/andrii/immersiv-web/src/context/UserContext.jsx":"4","/home/andrii/immersiv-web/src/helpers/history.js":"5","/home/andrii/immersiv-web/src/components/Spinner.jsx":"6","/home/andrii/immersiv-web/src/layout/Layout.jsx":"7","/home/andrii/immersiv-web/src/pages/Home.jsx":"8","/home/andrii/immersiv-web/src/pages/Admin.jsx":"9","/home/andrii/immersiv-web/src/pages/Login.jsx":"10","/home/andrii/immersiv-web/src/pages/Project.jsx":"11","/home/andrii/immersiv-web/src/routes/protected.route.jsx":"12","/home/andrii/immersiv-web/src/pages/ResetPassword.jsx":"13","/home/andrii/immersiv-web/src/helpers/WithAxios.js":"14","/home/andrii/immersiv-web/src/services/auth.service.js":"15","/home/andrii/immersiv-web/src/services/project.service.js":"16","/home/andrii/immersiv-web/src/services/constant.service.js":"17","/home/andrii/immersiv-web/src/services/admin.service.js":"18","/home/andrii/immersiv-web/src/helpers/useQuery.js":"19","/home/andrii/immersiv-web/src/components/ForgotPasswordModal.jsx":"20","/home/andrii/immersiv-web/src/components/Dashboard/Dashboard.jsx":"21","/home/andrii/immersiv-web/src/components/ProjectView/ProjectView.jsx":"22","/home/andrii/immersiv-web/src/api/axios.config.js":"23","/home/andrii/immersiv-web/src/components/Dashboard/Projects/Projects.jsx":"24","/home/andrii/immersiv-web/src/components/Dashboard/Constant/Constant.jsx":"25","/home/andrii/immersiv-web/src/components/Dashboard/Admins/Admins.jsx":"26","/home/andrii/immersiv-web/src/components/ProjectView/Layout/MobileLayout/MobileLayout.jsx":"27","/home/andrii/immersiv-web/src/components/ProjectView/Layout/DesktopLayout/DesktopLayout.jsx":"28","/home/andrii/immersiv-web/src/components/ProjectView/Components/Loading/Loading.jsx":"29","/home/andrii/immersiv-web/src/components/Dashboard/Projects/ProjectListItem.jsx":"30","/home/andrii/immersiv-web/src/components/ProjectView/Layout/DesktopLayout/PoweredLogo.jsx":"31","/home/andrii/immersiv-web/src/components/ProjectView/Layout/MobileLayout/Button.jsx":"32","/home/andrii/immersiv-web/src/components/ProjectView/Components/StreamView/StreamView.jsx":"33","/home/andrii/immersiv-web/src/components/ProjectView/Log.js":"34","/home/andrii/immersiv-web/src/components/ProjectView/Components/EmbededView/EmbededView.jsx":"35","/home/andrii/immersiv-web/src/components/ProjectView/Components/LoadingView/LoadingView.jsx":"36"},{"size":707,"mtime":1645566477865,"results":"37","hashOfConfig":"38"},{"size":362,"mtime":1640368180000,"results":"39","hashOfConfig":"38"},{"size":1859,"mtime":1645706630411,"results":"40","hashOfConfig":"38"},{"size":1589,"mtime":1645580085135,"results":"41","hashOfConfig":"38"},{"size":87,"mtime":1640368180000,"results":"42","hashOfConfig":"38"},{"size":364,"mtime":1640368180000,"results":"43","hashOfConfig":"38"},{"size":2439,"mtime":1645651167290,"results":"44","hashOfConfig":"38"},{"size":611,"mtime":1645519479270,"results":"45","hashOfConfig":"38"},{"size":1335,"mtime":1645625338428,"results":"46","hashOfConfig":"38"},{"size":5113,"mtime":1645626008910,"results":"47","hashOfConfig":"38"},{"size":1209,"mtime":1645651188815,"results":"48","hashOfConfig":"38"},{"size":555,"mtime":1640368180000,"results":"49","hashOfConfig":"38"},{"size":6993,"mtime":1645626004854,"results":"50","hashOfConfig":"38"},{"size":1582,"mtime":1640368180000,"results":"51","hashOfConfig":"38"},{"size":1135,"mtime":1640368180000,"results":"52","hashOfConfig":"38"},{"size":526,"mtime":1645587934353,"results":"53","hashOfConfig":"38"},{"size":251,"mtime":1645578221413,"results":"54","hashOfConfig":"38"},{"size":319,"mtime":1645579765570,"results":"55","hashOfConfig":"38"},{"size":158,"mtime":1640368180000,"results":"56","hashOfConfig":"38"},{"size":4712,"mtime":1645584337293,"results":"57","hashOfConfig":"38"},{"size":7388,"mtime":1645626503440,"results":"58","hashOfConfig":"38"},{"size":1448,"mtime":1645639420789,"results":"59","hashOfConfig":"38"},{"size":557,"mtime":1645626065332,"results":"60","hashOfConfig":"38"},{"size":5098,"mtime":1645577643316,"results":"61","hashOfConfig":"38"},{"size":2162,"mtime":1645578695981,"results":"62","hashOfConfig":"38"},{"size":3458,"mtime":1645579808000,"results":"63","hashOfConfig":"38"},{"size":865,"mtime":1645639070141,"results":"64","hashOfConfig":"38"},{"size":3563,"mtime":1645587969674,"results":"65","hashOfConfig":"38"},{"size":828,"mtime":1645708137282,"results":"66","hashOfConfig":"38"},{"size":3315,"mtime":1645577498358,"results":"67","hashOfConfig":"38"},{"size":483,"mtime":1645484578692,"results":"68","hashOfConfig":"38"},{"size":475,"mtime":1645484124250,"results":"69","hashOfConfig":"38"},{"size":10234,"mtime":1645705423214,"results":"70","hashOfConfig":"38"},{"size":107,"mtime":1645547392556,"results":"71","hashOfConfig":"38"},{"size":3363,"mtime":1645712755867,"results":"72","hashOfConfig":"38"},{"size":5021,"mtime":1645517979672,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"dresvx",{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"76"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"76"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/andrii/immersiv-web/src/index.js",[],["149","150"],"/home/andrii/immersiv-web/src/reportWebVitals.js",[],"/home/andrii/immersiv-web/src/App.js",[],"/home/andrii/immersiv-web/src/context/UserContext.jsx",[],"/home/andrii/immersiv-web/src/helpers/history.js",[],"/home/andrii/immersiv-web/src/components/Spinner.jsx",[],"/home/andrii/immersiv-web/src/layout/Layout.jsx",[],"/home/andrii/immersiv-web/src/pages/Home.jsx",[],"/home/andrii/immersiv-web/src/pages/Admin.jsx",[],"/home/andrii/immersiv-web/src/pages/Login.jsx",[],"/home/andrii/immersiv-web/src/pages/Project.jsx",[],"/home/andrii/immersiv-web/src/routes/protected.route.jsx",[],"/home/andrii/immersiv-web/src/pages/ResetPassword.jsx",[],"/home/andrii/immersiv-web/src/helpers/WithAxios.js",[],"/home/andrii/immersiv-web/src/services/auth.service.js",[],"/home/andrii/immersiv-web/src/services/project.service.js",[],"/home/andrii/immersiv-web/src/services/constant.service.js",[],"/home/andrii/immersiv-web/src/services/admin.service.js",[],"/home/andrii/immersiv-web/src/helpers/useQuery.js",[],"/home/andrii/immersiv-web/src/components/ForgotPasswordModal.jsx",[],"/home/andrii/immersiv-web/src/components/Dashboard/Dashboard.jsx",[],"/home/andrii/immersiv-web/src/components/ProjectView/ProjectView.jsx",[],"/home/andrii/immersiv-web/src/api/axios.config.js",[],"/home/andrii/immersiv-web/src/components/Dashboard/Projects/Projects.jsx",[],"/home/andrii/immersiv-web/src/components/Dashboard/Constant/Constant.jsx",[],"/home/andrii/immersiv-web/src/components/Dashboard/Admins/Admins.jsx",["151","152"],"import {\n    Button,\n    Modal,\n    TextField,\n    Checkbox,\n    FormControlLabel,\n    ListItem,\n    IconButton,\n    ListItemIcon,\n    ListItemText,\n} from \"@mui/material\";\nimport React, { useState } from \"react\";\nimport { Box } from \"@mui/system\";\nimport adminService from \"services/admin.service\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport LockedIcon from \"@mui/icons-material/Lock\";\nimport UnlockedIcon from \"@mui/icons-material/LockOpen\";\n\nexport const Admins = (props) => {\n    const { data, menuTab } = props;\n\n    const [editState, setEditState] = useState(null);\n\n    const save = async () => {\n        const response = await adminService.createAdmin(editState);\n\n        if (response.data) data.setAdmins(response.data);\n        closeModal();\n    };\n\n    const closeModal = () => {\n        setEditState(null);\n    };\n\n    const deleteAdmin = async (id) => {\n        const response = await adminService.deleteAdmin(id);\n\n        if (response.data) data.setAdmins(response.data);\n    };\n    return menuTab === \"admin\" ? (\n        <>\n            <Button\n                onClick={() => {\n                    setEditState({ published: true });\n                }}\n            >\n                Add admin\n            </Button>\n            {data.admins\n                .sort((a, b) => (a.email > b.email ? 1 : -1))\n                .map((admin) => (\n                    <ListItem\n                        secondaryAction={\n                            <IconButton\n                                edge=\"end\"\n                                onClick={() => deleteAdmin(admin.email)}\n                            >\n                                <DeleteIcon />\n                            </IconButton>\n                        }\n                    >\n                        <ListItemIcon>\n                            {admin.locked ? <LockedIcon /> : <UnlockedIcon />}\n                        </ListItemIcon>\n                        <ListItemText primary={admin.email} />\n                    </ListItem>\n                ))}\n\n            <Modal open={!!editState}>\n                {!!editState && (\n                    <Box\n                        sx={{\n                            position: \"absolute\",\n                            top: \"50%\",\n                            left: \"50%\",\n                            transform: \"translate(-50%, -50%)\",\n                            width: 400,\n                            bgcolor: \"background.paper\",\n                            border: \"2px solid #000\",\n                            boxShadow: 24,\n                            p: 4,\n                        }}\n                    >\n                        <TextField\n                            value={editState.email}\n                            onChange={(e) =>\n                                setEditState({\n                                    ...editState,\n                                    email: e.target.value,\n                                })\n                            }\n                            label=\"Email\"\n                            style={{ marginTop: \"20px\", width: \"100%\" }}\n                        />\n\n                        <div style={{ marginTop: \"50px\" }}>\n                            <Button onClick={save}>Save</Button>\n                            <Button onClick={closeModal}>Cancel</Button>\n                        </div>\n                    </Box>\n                )}\n            </Modal>\n        </>\n    ) : null;\n};\n","/home/andrii/immersiv-web/src/components/ProjectView/Layout/MobileLayout/MobileLayout.jsx",[],"/home/andrii/immersiv-web/src/components/ProjectView/Layout/DesktopLayout/DesktopLayout.jsx",[],"/home/andrii/immersiv-web/src/components/ProjectView/Components/Loading/Loading.jsx",[],"/home/andrii/immersiv-web/src/components/Dashboard/Projects/ProjectListItem.jsx",[],"/home/andrii/immersiv-web/src/components/ProjectView/Layout/DesktopLayout/PoweredLogo.jsx",[],"/home/andrii/immersiv-web/src/components/ProjectView/Layout/MobileLayout/Button.jsx",[],"/home/andrii/immersiv-web/src/components/ProjectView/Components/StreamView/StreamView.jsx",["153","154"],"import {\n    ModelDefinition,\n    PlatformNext,\n    UndefinedModelDefinition,\n    DefaultStreamerOptions,\n    StreamerStatus,\n} from \"@pureweb/platform-sdk\";\n\nimport {\n    useStreamer,\n    useLaunchRequest,\n    System,\n} from \"@pureweb/platform-sdk-react\";\n\nimport React, { useEffect, useState } from \"react\";\nimport useAsyncEffect from \"use-async-effect\";\nimport \"./StreamView.css\";\n\nimport { EmbeddedView } from \"../EmbededView/EmbededView\";\n\nimport logger from \"../../Log\";\n\nconst audio = new Audio();\naudio.autoplay = true;\naudio.volume = 0.5;\n\n// Initialize platform reference\nconst platform = new PlatformNext();\nplatform.initialize({\n    endpoint: \"https://api.pureweb.io\",\n});\n\nconst StreamView = (props) => {\n    const { project } = props;\n\n    const [modelDefinitionUnavailable, setModelDefinitionUnavailable] =\n        useState(false);\n    const [modelDefinition, setModelDefinition] = useState(\n        new UndefinedModelDefinition()\n    );\n    const [availableModels, setAvailableModels] = useState();\n    const [launchRequestError, setLaunchRequestError] = useState();\n    const streamerOptions = DefaultStreamerOptions;\n\n    const [status, launchRequest, queueLaunchRequest] = useLaunchRequest(\n        platform,\n        modelDefinition,\n        {}\n    );\n    const [streamerStatus, emitter, videoStream, audioStream] = useStreamer(\n        platform,\n        launchRequest,\n        streamerOptions\n    );\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        if (streamerStatus === StreamerStatus.Failed) {\n            platform.disconnect();\n        }\n    }, [streamerStatus]);\n\n    if (audioStream) {\n        audio.srcObject = audioStream;\n    }\n\n    const launch = async () => {\n        setLoading(true);\n        audio.load();\n\n        if (project.LaunchType !== \"local\") {\n            try {\n                await queueLaunchRequest();\n            } catch (err) {\n                setLaunchRequestError(err);\n            }\n        }\n    };\n    useAsyncEffect(async () => {\n        if (project.projectId) {\n            logger.info(\"Initializing available models: \" + project.projectId);\n            try {\n                await platform.useAnonymousCredentials(project.projectId);\n                await platform.connect();\n                logger.info(\"Agent Connected: \" + platform.agent.id);\n                streamerOptions.iceServers =\n                    platform.agent.serviceCredentials.iceServers;\n                streamerOptions.forceRelay = project.ForceRelay;\n                const models = await platform.getModels();\n                setAvailableModels(models);\n                logger.debug(\"Available models\", models);\n            } catch (err) {\n                logger.error(err);\n            }\n        }\n    }, [project]);\n    useEffect(() => {\n        if (availableModels?.length) {\n            const selectedModels = availableModels.filter(function (\n                model: ModelDefinition\n            ): boolean {\n                if (project.modelId === model.id) {\n                    // If there is a version specified and we encounter it\n                    if (project.Version && project.Version === model.version) {\n                        return true;\n                    }\n                    // If there is no version specified and we find the primary version\n                    if (!project.Version && model.active) {\n                        return true;\n                    }\n                }\n                return false;\n            });\n            if (selectedModels?.length) {\n                setModelDefinition(selectedModels[0]);\n            } else {\n                setModelDefinitionUnavailable(true);\n            }\n        }\n    }, [availableModels]);\n\n    useEffect(() => {\n        if (modelDefinition.type === 0) return;\n\n        launch();\n    }, [modelDefinition]);\n\n    // Log status messages\n    useEffect(() => {\n        logger.info(\"Status\", status, streamerStatus);\n    }, [status, streamerStatus]);\n    console.log(project);\n    // Notify user of missing or errors in configuration\n    if (!project.modelId || !project.projectId) {\n        props.setLoaded(true);\n        return (\n            <div\n                style={{\n                    display: \"flex\",\n                    height: \"100%\",\n                    overflow: \"none\",\n                    textAlign: \"center\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    flex: 1,\n                }}\n            >\n                <p>\n                    Your client has one or more configuration errors. Please\n                    consult the{\" \"}\n                    <a href=\"https://www.npmjs.com/package/@pureweb/cra-template-pureweb-client\">\n                        {\" \"}\n                        README{\" \"}\n                    </a>{\" \"}\n                    for details on how to configure the client template.\n                </p>\n            </div>\n        );\n    }\n\n    if (modelDefinitionUnavailable) {\n        props.setLoaded(true);\n        return (\n            <div\n                style={{\n                    display: \"flex\",\n                    height: \"100%\",\n                    overflow: \"none\",\n                    textAlign: \"center\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    flex: 1,\n                }}\n            >\n                <span>The model that you have requested does not exist</span>\n            </div>\n        );\n    }\n\n    if (launchRequestError) {\n        props.setLoaded(true);\n        return (\n            <div\n                style={{\n                    display: \"flex\",\n                    height: \"100%\",\n                    overflow: \"none\",\n                    textAlign: \"center\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    flex: 1,\n                }}\n            >\n                <span>\n                    {process.env.NODE_ENV === \"development\"\n                        ? `There was an error with the launch request: ${launchRequestError}`\n                        : \"It appears the requested model is currently not online as per your set schedule. Please contact support if it should be available.\"}\n                </span>\n            </div>\n        );\n    }\n\n    // Begin connection\n    if (streamerStatus === StreamerStatus.Disconnected) {\n        props.setLoaded(true);\n        return (\n            <div\n                style={{\n                    display: \"flex\",\n                    height: \"100%\",\n                    overflow: \"none\",\n                    textAlign: \"center\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    flex: 1,\n                }}\n            >\n                <h2>Disconnected from stream</h2>\n            </div>\n        );\n    }\n\n    if (streamerStatus === StreamerStatus.Failed) {\n        props.setLoaded(true);\n        return (\n            <div\n                style={{\n                    display: \"flex\",\n                    height: \"100%\",\n                    overflow: \"none\",\n                    textAlign: \"center\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    flex: 1,\n                }}\n            >\n                <h2>Failure during stream</h2>\n                <h2>Please refresh to request a new session</h2>\n            </div>\n        );\n    }\n\n    if (streamerStatus === StreamerStatus.Withdrawn) {\n        props.setLoaded(true);\n        return (\n            <div\n                style={{\n                    display: \"flex\",\n                    height: \"100%\",\n                    overflow: \"none\",\n                    textAlign: \"center\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    flex: 1,\n                }}\n            >\n                <h2>Streamer contribution withdrawn</h2>\n            </div>\n        );\n    }\n\n    if (loading) {\n        return (\n            <EmbeddedView\n                VideoStream={videoStream}\n                StreamerStatus={streamerStatus}\n                LaunchRequestStatus={status}\n                InputEmitter={emitter}\n                UseNativeTouchEvents={true}\n                UsePointerLock={project.UsePointerLock}\n                PointerLockRelease={project.PointerLockRelease}\n                setLoaded={props.setLoaded}\n            />\n        );\n    } else if (project.LaunchType !== \"local\" && !availableModels) {\n        return (\n            <div\n                style={{\n                    display: \"flex\",\n                    height: \"100%\",\n                    overflow: \"none\",\n                    textAlign: \"center\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    flex: 1,\n                }}\n            >\n                <h2>Initializing...</h2>\n            </div>\n        );\n    } else if (project.LaunchType !== \"local\" && !availableModels?.length) {\n        props.setLoaded(true);\n        return (\n            <div\n                style={{\n                    display: \"flex\",\n                    height: \"100%\",\n                    overflow: \"none\",\n                    textAlign: \"center\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    flex: 1,\n                }}\n            >\n                <h2>No models are currently available in this environment.</h2>\n            </div>\n        );\n    } else {\n        return null;\n    }\n};\n\nconst StreamViewWrapper = (props) => {\n    return System.IsBrowserSupported() ? (\n        <div\n            style={{\n                backgroundColor: \"black\",\n                height: \"100%\",\n                flex: 1,\n                display: \"flex\",\n                color: \"white\",\n            }}\n        >\n            <StreamView setLoaded={props.setLoaded} project={props.project} />\n        </div>\n    ) : (\n        <div className=\"ui red segment center aligned basic\">\n            <h2 className=\"header\">Your browser is currently unsupported</h2>\n        </div>\n    );\n};\n\nexport default StreamViewWrapper;\n","/home/andrii/immersiv-web/src/components/ProjectView/Log.js",[],"/home/andrii/immersiv-web/src/components/ProjectView/Components/EmbededView/EmbededView.jsx",[],"/home/andrii/immersiv-web/src/components/ProjectView/Components/LoadingView/LoadingView.jsx",[],{"ruleId":"155","replacedBy":"156"},{"ruleId":"157","replacedBy":"158"},{"ruleId":"159","severity":1,"message":"160","line":5,"column":5,"nodeType":"161","messageId":"162","endLine":5,"endColumn":13},{"ruleId":"159","severity":1,"message":"163","line":6,"column":5,"nodeType":"161","messageId":"162","endLine":6,"endColumn":21},{"ruleId":"164","severity":1,"message":"165","line":120,"column":8,"nodeType":"166","endLine":120,"endColumn":25,"suggestions":"167"},{"ruleId":"164","severity":1,"message":"168","line":126,"column":8,"nodeType":"166","endLine":126,"endColumn":25,"suggestions":"169"},"no-native-reassign",["170"],"no-negated-in-lhs",["171"],"no-unused-vars","'Checkbox' is defined but never used.","Identifier","unusedVar","'FormControlLabel' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'project.Version' and 'project.modelId'. Either include them or remove the dependency array.","ArrayExpression",["172"],"React Hook useEffect has a missing dependency: 'launch'. Either include it or remove the dependency array.",["173"],"no-global-assign","no-unsafe-negation",{"desc":"174","fix":"175"},{"desc":"176","fix":"177"},"Update the dependencies array to be: [availableModels, project.Version, project.modelId]",{"range":"178","text":"179"},"Update the dependencies array to be: [launch, modelDefinition]",{"range":"180","text":"181"},[3711,3728],"[availableModels, project.Version, project.modelId]",[3828,3845],"[launch, modelDefinition]"]
[{"/home/andrii/immersiv-web/src/index.js":"1","/home/andrii/immersiv-web/src/App.js":"2","/home/andrii/immersiv-web/src/reportWebVitals.js":"3","/home/andrii/immersiv-web/src/context/UserContext.jsx":"4","/home/andrii/immersiv-web/src/helpers/history.js":"5","/home/andrii/immersiv-web/src/pages/Login.jsx":"6","/home/andrii/immersiv-web/src/pages/Properties.jsx":"7","/home/andrii/immersiv-web/src/pages/ProjectDetails.jsx":"8","/home/andrii/immersiv-web/src/pages/Admins.jsx":"9","/home/andrii/immersiv-web/src/pages/Constants.jsx":"10","/home/andrii/immersiv-web/src/pages/Home.jsx":"11","/home/andrii/immersiv-web/src/pages/PropertiesClient.jsx":"12","/home/andrii/immersiv-web/src/pages/Projects.jsx":"13","/home/andrii/immersiv-web/src/pages/ResetPassword.jsx":"14","/home/andrii/immersiv-web/src/layout/Layout.jsx":"15","/home/andrii/immersiv-web/src/pages/Project.jsx":"16","/home/andrii/immersiv-web/src/pages/CreateProject.jsx":"17","/home/andrii/immersiv-web/src/pages/AnalyticClient.jsx":"18","/home/andrii/immersiv-web/src/helpers/WithAxios.js":"19","/home/andrii/immersiv-web/src/services/auth.service.js":"20","/home/andrii/immersiv-web/src/services/constant.service.js":"21","/home/andrii/immersiv-web/src/helpers/useQuery.js":"22","/home/andrii/immersiv-web/src/services/admin.service.js":"23","/home/andrii/immersiv-web/src/services/project.service.js":"24","/home/andrii/immersiv-web/src/services/property.service.js":"25","/home/andrii/immersiv-web/src/services/ga.service.js":"26","/home/andrii/immersiv-web/src/components/ProjectFormFields.jsx":"27","/home/andrii/immersiv-web/src/components/ForgotPasswordModal.jsx":"28","/home/andrii/immersiv-web/src/components/ProjectView/Components/PropertiesTable.jsx":"29","/home/andrii/immersiv-web/src/api/axios.config.js":"30","/home/andrii/immersiv-web/src/components/ProjectView/Components/Loading/Loading.jsx":"31","/home/andrii/immersiv-web/src/components/ProjectView/Components/StreamView/StreamView.jsx":"32","/home/andrii/immersiv-web/src/components/ProjectView/Log.js":"33","/home/andrii/immersiv-web/src/components/ProjectView/Components/EmbededView/EmbededView.jsx":"34","/home/andrii/immersiv-web/src/components/ProjectView/Components/LoadingView/LoadingView.jsx":"35","/home/andrii/immersiv-web/src/pages/PropertiesAdmin.jsx":"36","/home/andrii/immersiv-web/src/components/DashboardItem/DataItems/index.js":"37","/home/andrii/immersiv-web/src/components/DashboardItem/DataItems/TextItem/TextItem.js":"38","/home/andrii/immersiv-web/src/components/DashboardItem/DataItems/ChartItem/ChartItem.js":"39","/home/andrii/immersiv-web/src/components/DashboardItem/DataItems/RealTimeItem/RealTimeItem.js":"40","/home/andrii/immersiv-web/src/components/ProjectView/Layout/ProjectView.jsx":"41","/home/andrii/immersiv-web/src/components/ProjectView/Layout/Button.jsx":"42","/home/andrii/immersiv-web/src/components/ProjectView/Layout/PoweredLogo.jsx":"43","/home/andrii/immersiv-web/src/hooks/useLoginCheck.js":"44"},{"size":670,"mtime":1649049493702,"results":"45","hashOfConfig":"46"},{"size":3593,"mtime":1649049767908,"results":"47","hashOfConfig":"46"},{"size":362,"mtime":1640368180000,"results":"48","hashOfConfig":"46"},{"size":2176,"mtime":1652359501072,"results":"49","hashOfConfig":"46"},{"size":87,"mtime":1640368180000,"results":"50","hashOfConfig":"46"},{"size":3911,"mtime":1649049512820,"results":"51","hashOfConfig":"46"},{"size":6818,"mtime":1652360282690,"results":"52","hashOfConfig":"46"},{"size":4339,"mtime":1652360282646,"results":"53","hashOfConfig":"46"},{"size":7406,"mtime":1652360100949,"results":"54","hashOfConfig":"46"},{"size":3930,"mtime":1652360283314,"results":"55","hashOfConfig":"46"},{"size":188,"mtime":1647337840944,"results":"56","hashOfConfig":"46"},{"size":4102,"mtime":1647940441569,"results":"57","hashOfConfig":"46"},{"size":8433,"mtime":1652360282594,"results":"58","hashOfConfig":"46"},{"size":5587,"mtime":1647391907329,"results":"59","hashOfConfig":"46"},{"size":805,"mtime":1649049587225,"results":"60","hashOfConfig":"46"},{"size":1211,"mtime":1649050544189,"results":"61","hashOfConfig":"46"},{"size":2767,"mtime":1652360283519,"results":"62","hashOfConfig":"46"},{"size":7700,"mtime":1652360283338,"results":"63","hashOfConfig":"46"},{"size":2038,"mtime":1652360283431,"results":"64","hashOfConfig":"46"},{"size":1351,"mtime":1652359259568,"results":"65","hashOfConfig":"46"},{"size":251,"mtime":1645578221413,"results":"66","hashOfConfig":"46"},{"size":158,"mtime":1640368180000,"results":"67","hashOfConfig":"46"},{"size":317,"mtime":1647372383591,"results":"68","hashOfConfig":"46"},{"size":614,"mtime":1647394614965,"results":"69","hashOfConfig":"46"},{"size":667,"mtime":1647359130538,"results":"70","hashOfConfig":"46"},{"size":404,"mtime":1648640064091,"results":"71","hashOfConfig":"46"},{"size":3269,"mtime":1648451579864,"results":"72","hashOfConfig":"46"},{"size":2844,"mtime":1645918040931,"results":"73","hashOfConfig":"46"},{"size":4546,"mtime":1647940416555,"results":"74","hashOfConfig":"46"},{"size":543,"mtime":1652359055992,"results":"75","hashOfConfig":"46"},{"size":2507,"mtime":1646086848631,"results":"76","hashOfConfig":"46"},{"size":10562,"mtime":1648450882096,"results":"77","hashOfConfig":"46"},{"size":107,"mtime":1645547392556,"results":"78","hashOfConfig":"46"},{"size":3606,"mtime":1648450578998,"results":"79","hashOfConfig":"46"},{"size":5021,"mtime":1646085095883,"results":"80","hashOfConfig":"46"},{"size":2195,"mtime":1652360282218,"results":"81","hashOfConfig":"46"},{"size":206,"mtime":1648499991518,"results":"82","hashOfConfig":"46"},{"size":384,"mtime":1648499991518,"results":"83","hashOfConfig":"46"},{"size":1530,"mtime":1649050189859,"results":"84","hashOfConfig":"46"},{"size":508,"mtime":1648499991514,"results":"85","hashOfConfig":"46"},{"size":6013,"mtime":1649050583617,"results":"86","hashOfConfig":"46"},{"size":468,"mtime":1647377791994,"results":"87","hashOfConfig":"46"},{"size":483,"mtime":1645484578692,"results":"88","hashOfConfig":"46"},{"size":905,"mtime":1652360069054,"results":"89","hashOfConfig":"46"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1t5e4fp",{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/andrii/immersiv-web/src/index.js",[],"/home/andrii/immersiv-web/src/App.js",[],"/home/andrii/immersiv-web/src/reportWebVitals.js",[],"/home/andrii/immersiv-web/src/context/UserContext.jsx",[],"/home/andrii/immersiv-web/src/helpers/history.js",[],"/home/andrii/immersiv-web/src/pages/Login.jsx",["184"],"/home/andrii/immersiv-web/src/pages/Properties.jsx",["185","186","187"],"import React, { useEffect, useRef, useState } from \"react\";\n\nimport { Button, Form, Input, Modal, Select } from \"antd\";\n\nimport propertyService from \"services/property.service\";\nimport toast from \"react-hot-toast\";\nimport PropertiesTable from \"components/ProjectView/Components/PropertiesTable\";\nimport projectService from \"services/project.service\";\nimport useLoginCheck from \"hooks/useLoginCheck\";\n\nconst Properties = (props) => {\n    const { admin, id, project, properties, setProject, setProperties } = props;\n    const formRef = useRef(null);\n\n    const [editModalOpen, setEditModalOpen] = useState(null);\n\n    useEffect(() => {\n        propertyService.getProperty(id).then((response) => {\n            setProperties(response.data);\n        });\n\n        projectService.getProject(id).then((response) => {\n            setProject(response.data);\n        });\n    }, []);\n\n    useLoginCheck();\n\n    useEffect(() => {\n        if (formRef.current) {\n            if (editModalOpen)\n                formRef.current.setFieldsValue(\n                    editModalOpen.id\n                        ? transferOrientationToString(editModalOpen)\n                        : editModalOpen\n                );\n        }\n    }, [editModalOpen?.id]);\n\n    const onFinish = async (values) => {\n        const response = editModalOpen?.id\n            ? await propertyService.saveProperty(\n                  id,\n                  editModalOpen.id,\n                  transferOrientationToObject(values)\n              )\n            : await propertyService.createProperty(\n                  id,\n                  transferOrientationToObject(values)\n              );\n        if (response.data) {\n            toast.success(\"Saved\");\n            setProperties(response.data);\n            setEditModalOpen(null);\n            if (formRef.current) formRef.current.resetFields();\n        }\n    };\n\n    const transferOrientationToObject = (data) => {\n        const o = {};\n        if (data.Orientation.indexOf(\"N\") !== -1) o.N = true;\n        else if (data.Orientation.indexOf(\"S\") !== -1) o.S = true;\n        if (data.Orientation.indexOf(\"E\") !== -1) o.E = true;\n        else if (data.Orientation.indexOf(\"W\") !== -1) o.W = true;\n        return { ...data, Orientation: o };\n    };\n\n    const transferOrientationToString = (data) => {\n        let o = \"\";\n        if (data.Orientation.N) o = o + \"N\";\n        else if (data.Orientation.S) o = o + \"S\";\n        if (data.Orientation.E) o = o + \"E\";\n        else if (data.Orientation.W) o = o + \"W\";\n        return { ...data, Orientation: o };\n    };\n    const { Option } = Select;\n\n    return (\n        <>\n            {admin && (\n                <Button\n                    onClick={() => setEditModalOpen({})}\n                    style={{ margin: \"16px\" }}\n                >\n                    Add property\n                </Button>\n            )}\n            <Modal\n                visible={!!editModalOpen}\n                onCancel={() => setEditModalOpen(null)}\n                footer={null}\n            >\n                <Form\n                    name=\"normal_login\"\n                    onFinish={onFinish}\n                    style={{\n                        padding: \" 16px\",\n                        maxWidth: \"500px\",\n                        margin: \"auto\",\n                    }}\n                    ref={formRef}\n                    labelCol={{ span: 8 }}\n                    wrapperCol={{ span: 16 }}\n                >\n                    <Form.Item\n                        name=\"Name\"\n                        label=\"Name\"\n                        rules={[\n                            {\n                                required: true,\n                                message: \"Please add name!\",\n                            },\n                        ]}\n                    >\n                        <Input placeholder=\"Name\" readOnly={!admin} />\n                    </Form.Item>\n\n                    <Form.Item name=\"Surface\" label=\"Surface\">\n                        <Input placeholder=\"Surface\" type=\"number\" />\n                    </Form.Item>\n                    <Form.Item name=\"Price\" label=\"Price\">\n                        <Input placeholder=\"Price\" type=\"number\" />\n                    </Form.Item>\n                    <Form.Item name=\"BedroomsCount\" label=\"Bedrooms\">\n                        <Input placeholder=\"Bedrooms\" type=\"number\" />\n                    </Form.Item>\n                    <Form.Item name=\"BathroomsCount\" label=\"Bathrooms\">\n                        <Input placeholder=\"Bathrooms\" type=\"number\" />\n                    </Form.Item>\n                    <Form.Item name=\"Orientation\" label=\"Orientation\">\n                        <Select>\n                            <Option value=\"N\">North</Option>\n                            <Option value=\"NE\">North-East</Option>\n                            <Option value=\"E\">East</Option>\n                            <Option value=\"SE\">South-East</Option>\n                            <Option value=\"S\">South</Option>\n                            <Option value=\"SW\">South-West</Option>\n                            <Option value=\"W\">West</Option>\n                            <Option value=\"NW\">North-West</Option>\n                        </Select>\n                    </Form.Item>\n                    <Form.Item\n                        name=\"Availability\"\n                        label=\"Availability\"\n                        rules={[\n                            {\n                                required: true,\n                                message: \"Please set the status!\",\n                            },\n                        ]}\n                    >\n                        <Select>\n                            <Option value=\"available\">Available</Option>\n                            <Option value=\"reserved\">Reserved</Option>\n                            <Option value=\"sold\">Sold</Option>\n                        </Select>\n                    </Form.Item>\n                    <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n                        <Button\n                            type=\"primary\"\n                            htmlType=\"submit\"\n                            style={{ width: \"100%\" }}\n                        >\n                            Save\n                        </Button>\n                    </Form.Item>\n                </Form>\n            </Modal>\n            {properties && project && (\n                <PropertiesTable\n                    properties={properties}\n                    setProperties={setProperties}\n                    project={project}\n                    admin={admin}\n                    setEditModalOpen={setEditModalOpen}\n                    transferOrientationToString={transferOrientationToString}\n                />\n            )}\n        </>\n    );\n};\n\nexport default Properties;\n","/home/andrii/immersiv-web/src/pages/ProjectDetails.jsx",["188"],"import LayoutHOC from \"layout/Layout\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport projectService from \"services/project.service\";\n\nimport { Button, Layout, PageHeader, Form, Typography } from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\n\nimport { useNavigate } from \"react-router-dom\";\nimport { useParams } from \"react-router-dom\";\nimport toast from \"react-hot-toast\";\nimport ProjectFormFields from \"components/ProjectFormFields\";\nimport useLoginCheck from \"hooks/useLoginCheck\";\n\nconst ProjectDetails = (props) => {\n    const [project, setProject] = useState(null);\n\n    const formRef = useRef(null);\n\n    const { id } = useParams();\n\n    useEffect(() => {\n        projectService.getProject(id).then((response) => {\n            setProject(response.data);\n        });\n    }, [id]);\n\n    const navigate = useNavigate();\n    useLoginCheck();\n\n    const onFinish = async (values) => {\n        const response = await projectService.saveProject(project.id, values);\n        if (response.data) toast.success(\"Saved\");\n    };\n\n    return (\n        <LayoutHOC loading={!project}>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => navigate(\"/admin\")}\n                    title={`Project - ${project?.name}`}\n                    style={{ boxShadow: \"1px 1px 10px 1px #ccc\" }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        maxWidth: \"800px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    {project && (\n                        <>\n                            <Typography.Title>\n                                Project id: {project.id}\n                            </Typography.Title>\n                            <Button\n                                onClick={() => navigate(`/p-admin/${id}`)}\n                                style={{ margin: \"16px\" }}\n                            >\n                                See client admin panel\n                            </Button>\n                            <Button\n                                onClick={() =>\n                                    navigate(\n                                        `/admin/projects/${project.id}/properties`\n                                    )\n                                }\n                                style={{ margin: \"16px\" }}\n                            >\n                                Manage properties\n                            </Button>\n                            <Form\n                                ref={formRef}\n                                name=\"normal_login\"\n                                onFinish={onFinish}\n                                style={{\n                                    padding: \" 16px\",\n                                    maxWidth: \"500px\",\n                                    margin: \"auto\",\n                                }}\n                                initialValues={project}\n                                labelCol={{ span: 8 }}\n                                wrapperCol={{ span: 16 }}\n                            >\n                                <ProjectFormFields />\n                                <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n                                    <Button\n                                        onClick={() => {\n                                            if (formRef.current)\n                                                formRef.current.resetFields();\n                                        }}\n                                        style={{ width: \"100%\" }}\n                                    >\n                                        Reset\n                                    </Button>\n                                </Form.Item>\n                            </Form>\n                        </>\n                    )}\n                </Content>\n            </Layout>\n        </LayoutHOC>\n    );\n};\n\nexport default ProjectDetails;\n","/home/andrii/immersiv-web/src/pages/Admins.jsx",["189"],"/home/andrii/immersiv-web/src/pages/Constants.jsx",["190"],"import LayoutHOC from \"layout/Layout\";\nimport React, { useEffect, useRef, useState } from \"react\";\n\nimport { Button, Layout, PageHeader, Form, Input } from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\n\nimport { useNavigate } from \"react-router-dom\";\nimport toast from \"react-hot-toast\";\nimport constantService from \"services/constant.service\";\nimport useLoginCheck from \"hooks/useLoginCheck\";\n\nconst Constants = (props) => {\n    const [constants, setConstants] = useState(null);\n    const formRef = useRef(null);\n\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        constantService\n            .getConstant()\n            .then((response) => {\n                if (response.data) {\n                    setConstants(response.data);\n                    formRef.current &&\n                        formRef.current.setFieldsValue(response.data);\n                } else setConstants({});\n            })\n            .catch(() => {\n                setConstants({});\n            });\n    }, []);\n\n    useLoginCheck();\n    const onFinish = async (values) => {\n        const response = await constantService.saveConstant(values);\n        if (response.data) {\n            setConstants(response.data);\n            toast.success(\"Saved\");\n        }\n    };\n\n    return (\n        <LayoutHOC>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => navigate(\"/admin\")}\n                    title=\"Constants\"\n                    style={{ boxShadow: \"1px 1px 10px 1px #ccc\" }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        maxWidth: \"800px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    <Form\n                        ref={formRef}\n                        name=\"normal_login\"\n                        onFinish={onFinish}\n                        style={{\n                            padding: \" 16px\",\n                            maxWidth: \"500px\",\n                            margin: \"auto\",\n                        }}\n                        initialValues={constants}\n                    >\n                        <Form.Item name=\"email\">\n                            <Input placeholder=\"Email\" />\n                        </Form.Item>\n\n                        <Form.Item name=\"phone\">\n                            <Input placeholder=\"Phone\" />\n                        </Form.Item>\n\n                        <Form.Item name=\"call\">\n                            <Input placeholder=\"Phone in international format\" />\n                        </Form.Item>\n\n                        <Form.Item>\n                            <Button\n                                type=\"primary\"\n                                htmlType=\"submit\"\n                                style={{ width: \"100%\" }}\n                            >\n                                Save\n                            </Button>\n                        </Form.Item>\n                        <Form.Item>\n                            <Button\n                                onClick={() => {\n                                    if (formRef.current)\n                                        formRef.current.resetFields();\n                                }}\n                                style={{ width: \"100%\" }}\n                            >\n                                Reset\n                            </Button>\n                        </Form.Item>\n                    </Form>\n                </Content>\n            </Layout>\n        </LayoutHOC>\n    );\n};\n\nexport default Constants;\n","/home/andrii/immersiv-web/src/pages/Home.jsx",[],"/home/andrii/immersiv-web/src/pages/PropertiesClient.jsx",["191","192"],"/home/andrii/immersiv-web/src/pages/Projects.jsx",["193"],"import LayoutHOC from \"layout/Layout\";\nimport React, { useEffect, useState } from \"react\";\nimport projectService from \"services/project.service\";\n\nimport {\n    Button,\n    Drawer,\n    Dropdown,\n    Layout,\n    List,\n    Menu,\n    PageHeader,\n    Popconfirm,\n} from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\nimport {\n    EyeFilled,\n    EyeInvisibleFilled,\n    MenuOutlined,\n    MoreOutlined,\n    StarFilled,\n} from \"@ant-design/icons\";\nimport { useUser } from \"context/UserContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport useLoginCheck from \"hooks/useLoginCheck\";\n\nconst Projects = (props) => {\n    const [projects, setProjects] = useState(null);\n    const { logout } = useUser();\n    const navigate = useNavigate();\n\n    const [openDrawer, setOpenDrawer] = useState(false);\n    useEffect(() => {\n        projectService.getProject().then((response) => {\n            setProjects(response.data);\n        });\n    }, []);\n\n    useLoginCheck();\n\n    const deleteProject = async (id) => {\n        const response = await projectService.deleteProject(id);\n        if (response.data) setProjects(response.data);\n    };\n\n    const setFeatured = async (id) => {\n        const response = await projectService.saveProject(id, {\n            featured: true,\n        });\n\n        if (response.data) setProjects(response.data);\n    };\n\n    return (\n        <LayoutHOC loading={!projects}>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => setOpenDrawer(true)}\n                    backIcon={<MenuOutlined />}\n                    title={\"Projects\"}\n                    style={{ boxShadow: \"1px 1px 10px 1px #ccc\" }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        maxWidth: \"800px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    <Button\n                        onClick={() => navigate(\"/admin/projects/create\")}\n                        style={{ margin: \"16px\" }}\n                    >\n                        Add project\n                    </Button>\n                    {projects && (\n                        <List\n                            itemLayout=\"horizontal\"\n                            dataSource={projects.sort((a, b) =>\n                                a.url > b.url ? 1 : -1\n                            )}\n                            renderItem={(project) => (\n                                <List.Item\n                                    actions={[\n                                        <Dropdown\n                                            overlay={\n                                                <Menu>\n                                                    <Menu.Item\n                                                        key=\"1\"\n                                                        onClick={() =>\n                                                            setFeatured(\n                                                                project.id\n                                                            )\n                                                        }\n                                                    >\n                                                        Set as featured\n                                                    </Menu.Item>\n                                                    <Menu.Divider />\n                                                    <Popconfirm\n                                                        title=\"Are you sure to delete this project?\"\n                                                        onConfirm={() =>\n                                                            deleteProject(\n                                                                project.id\n                                                            )\n                                                        }\n                                                        okText=\"Yes\"\n                                                        cancelText=\"No\"\n                                                    >\n                                                        <Menu.Item\n                                                            key=\"3\"\n                                                            danger\n                                                        >\n                                                            Delete\n                                                        </Menu.Item>\n                                                    </Popconfirm>\n                                                </Menu>\n                                            }\n                                            trigger={[\"click\"]}\n                                        >\n                                            <MoreOutlined\n                                                style={{ fontSize: \"30px\" }}\n                                            />\n                                        </Dropdown>,\n                                    ]}\n                                >\n                                    <List.Item.Meta\n                                        avatar={\n                                            project.featured ? (\n                                                <StarFilled\n                                                    style={{ fontSize: \"24px\" }}\n                                                />\n                                            ) : project.published ? (\n                                                <EyeFilled\n                                                    style={{ fontSize: \"24px\" }}\n                                                />\n                                            ) : (\n                                                <EyeInvisibleFilled\n                                                    style={{ fontSize: \"24px\" }}\n                                                />\n                                            )\n                                        }\n                                        title={project.name}\n                                        description={project.url}\n                                        onClick={() => {\n                                            navigate(\n                                                `/admin/projects/${project.id}`\n                                            );\n                                        }}\n                                    />\n                                </List.Item>\n                            )}\n                        />\n                    )}\n                </Content>\n            </Layout>\n            <Drawer\n                title=\"Menu\"\n                placement=\"left\"\n                onClose={() => setOpenDrawer(false)}\n                visible={openDrawer}\n            >\n                <Menu\n                    mode=\"inline\"\n                    style={{ width: \"100%\" }}\n                    onClick={({ item, key }) => {\n                        setOpenDrawer(false);\n                        switch (key) {\n                            case \"logout\":\n                                logout();\n                                break;\n                            case \"info\":\n                                navigate(\"/admin/contant\");\n                                break;\n                            case \"admins\":\n                                navigate(\"/admin/admins\");\n                                break;\n                            default:\n                                return;\n                        }\n                    }}\n                    activeKey=\"projects\"\n                    selectedKeys={[\"projects\"]}\n                >\n                    <Menu.Item key=\"projects\">Projects</Menu.Item>\n                    <Menu.Item key=\"info\">Constant</Menu.Item>\n                    <Menu.Item key=\"admins\">Admins</Menu.Item>\n                    <Menu.Item key=\"logout\">Logout</Menu.Item>\n                </Menu>\n            </Drawer>\n        </LayoutHOC>\n    );\n};\n\nexport default Projects;\n","/home/andrii/immersiv-web/src/pages/ResetPassword.jsx",[],"/home/andrii/immersiv-web/src/layout/Layout.jsx",[],"/home/andrii/immersiv-web/src/pages/Project.jsx",[],"/home/andrii/immersiv-web/src/pages/CreateProject.jsx",["194"],"import LayoutHOC from \"layout/Layout\";\nimport React, { useRef } from \"react\";\nimport projectService from \"services/project.service\";\n\nimport { Button, Layout, PageHeader, Form } from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\n\nimport { useNavigate } from \"react-router-dom\";\nimport toast from \"react-hot-toast\";\nimport ProjectFormFields from \"components/ProjectFormFields\";\nimport useLoginCheck from \"hooks/useLoginCheck\";\n\nconst CreateProject = (props) => {\n    const formRef = useRef(null);\n\n    const navigate = useNavigate();\n\n    useLoginCheck();\n\n    const onFinish = async (values) => {\n        const response = await projectService.createProject(values);\n        if (response.data) {\n            toast.success(\"Saved\");\n            navigate(\"/admin\");\n        }\n    };\n\n    return (\n        <LayoutHOC>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => navigate(\"/admin\")}\n                    title=\"Create project\"\n                    style={{ boxShadow: \"1px 1px 10px 1px #ccc\" }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        maxWidth: \"800px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    <Form\n                        ref={formRef}\n                        name=\"normal_login\"\n                        onFinish={onFinish}\n                        style={{\n                            padding: \" 16px\",\n                            maxWidth: \"500px\",\n                            margin: \"auto\",\n                        }}\n                        labelCol={{ span: 8 }}\n                        wrapperCol={{ span: 16 }}\n                    >\n                        <ProjectFormFields />\n                        <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n                            <Button\n                                onClick={() => {\n                                    if (formRef.current)\n                                        formRef.current.resetFields();\n                                }}\n                                style={{ width: \"100%\" }}\n                            >\n                                Reset\n                            </Button>\n                        </Form.Item>\n                    </Form>\n                </Content>\n            </Layout>\n        </LayoutHOC>\n    );\n};\n\nexport default CreateProject;\n","/home/andrii/immersiv-web/src/pages/AnalyticClient.jsx",["195","196","197","198","199"],"import LayoutHOC from \"layout/Layout\";\nimport React, { useEffect, useState } from \"react\";\n\nimport { DatePicker, Layout, PageHeader } from \"antd\";\n\nimport { Content } from \"antd/lib/layout/layout\";\n\nimport { useNavigate, useParams } from \"react-router-dom\";\n\nimport projectService from \"services/project.service\";\nimport moment from \"moment\";\nimport gaService from \"services/ga.service\";\nimport toast from \"react-hot-toast\";\nimport { ChartItem } from \"components/DashboardItem/DataItems\";\nimport useLoginCheck from \"hooks/useLoginCheck\";\n\nconst AnalyticClient = (props) => {\n    const { id } = useParams();\n\n    const [project, setProject] = useState(null);\n    const [dateData, setDateData] = useState(null);\n    const [cityData, setCityData] = useState(null);\n    const [deviceData, setDeviceData] = useState(null);\n    const [sourceData, setSourceData] = useState(null);\n    const [period, setPeriod] = useState([\n        moment().subtract(7, \"day\").format(),\n        moment().format(),\n    ]);\n    const navigate = useNavigate();\n\n    useLoginCheck();\n\n    useEffect(() => {\n        projectService.getProject(id).then((response) => {\n            setProject(response.data);\n        });\n    }, []);\n\n    useEffect(() => {\n        if (period.length === 2 && project?.id) {\n            setDateData(null);\n            setCityData(null);\n            setDeviceData(null);\n            setSourceData(null);\n            getMetricData();\n        }\n    }, [period[0], period[1], project?.id]);\n\n    const getMetricData = () => {\n        gaService\n            .getGA(\n                project.id,\n                \"ga:users,ga:newUsers,ga:pageviews,ga:sessions,ga:sessionDuration\",\n                \"ga:date\",\n                period\n            )\n            .then((res) => {\n                setDateData(res.data.data);\n            })\n            .catch((err) => {\n                toast.error(\"Users analytics data not loaded\");\n            });\n\n        gaService\n            .getGA(project.id, \"ga:users\", \"ga:city\", period)\n            .then((res) => {\n                setCityData(res.data.data);\n            })\n            .catch((err) => {\n                toast.error(\"Location analytics data not loaded\");\n            });\n\n        gaService\n            .getGA(project.id, \"ga:users\", \"ga:deviceCategory\", period)\n            .then((res) => {\n                setDeviceData(res.data.data);\n            })\n            .catch((err) => {\n                toast.error(\"Device analytics data not loaded\");\n            });\n\n        gaService\n            .getGA(project.id, \"ga:users\", \"ga:source\", period)\n            .then((res) => {\n                setSourceData(res.data.data);\n            })\n            .catch((err) => {\n                toast.error(\"Source analytics data not loaded\");\n            });\n    };\n\n    return (\n        <LayoutHOC>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => navigate(`/p-admin/${id}`)}\n                    title={\n                        <>\n                            Analytics\n                            <br />\n                            <DatePicker.RangePicker\n                                size=\"large\"\n                                defaultValue={[\n                                    moment().subtract(7, \"day\"),\n                                    moment(),\n                                ]}\n                                onChange={(m) =>\n                                    setPeriod([m[0].format(), m[1].format()])\n                                }\n                                allowClear={false}\n                            />\n                        </>\n                    }\n                    style={{ borderBottom: \"1px #ccc solid\" }}\n                />\n                {project && (\n                    <Content\n                        style={{\n                            flex: 1,\n                            overflow: \"auto\",\n                            padding: \"16px\",\n\n                            width: \"100%\",\n                            margin: \"auto\",\n                        }}\n                    >\n                        <div\n                            style={{\n                                textAlign: \"center\",\n                                display: \"flex\",\n                                flexDirection: \"row\",\n                                flexWrap: \"wrap\",\n                                alignItems: \"center\",\n                                justifyContent: \"center\",\n                            }}\n                        >\n                            <ChartItem\n                                data={dateData}\n                                title=\"Users\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                column={1}\n                            />\n                            <ChartItem\n                                data={dateData}\n                                title=\"New users\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                column={2}\n                            />\n                            <ChartItem\n                                data={dateData}\n                                title=\"Page views\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                column={3}\n                            />\n                            <ChartItem\n                                data={dateData}\n                                title=\"Sessions\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                column={4}\n                            />\n                            <ChartItem\n                                data={dateData}\n                                title=\"Session duration (minutes)\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                column={5}\n                                seconds\n                            />\n                            <ChartItem\n                                data={deviceData}\n                                title=\"Device type\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                type=\"PieChart\"\n                                column={1}\n                                seconds\n                                isDate={false}\n                            />\n                            <ChartItem\n                                data={sourceData}\n                                title=\"Source\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                type=\"BarChart\"\n                                column={1}\n                                isDate={false}\n                            />\n                            <ChartItem\n                                data={cityData}\n                                title=\"Source\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                type=\"Table\"\n                                column={1}\n                                isDate={false}\n                            />\n                        </div>\n                    </Content>\n                )}\n            </Layout>\n        </LayoutHOC>\n    );\n};\n\nexport default AnalyticClient;\n","/home/andrii/immersiv-web/src/helpers/WithAxios.js",[],"/home/andrii/immersiv-web/src/services/auth.service.js",[],"/home/andrii/immersiv-web/src/services/constant.service.js",[],"/home/andrii/immersiv-web/src/helpers/useQuery.js",[],"/home/andrii/immersiv-web/src/services/admin.service.js",[],"/home/andrii/immersiv-web/src/services/project.service.js",[],"/home/andrii/immersiv-web/src/services/property.service.js",[],"/home/andrii/immersiv-web/src/services/ga.service.js",[],"/home/andrii/immersiv-web/src/components/ProjectFormFields.jsx",[],"/home/andrii/immersiv-web/src/components/ForgotPasswordModal.jsx",[],"/home/andrii/immersiv-web/src/components/ProjectView/Components/PropertiesTable.jsx",[],"/home/andrii/immersiv-web/src/api/axios.config.js",[],"/home/andrii/immersiv-web/src/components/ProjectView/Components/Loading/Loading.jsx",[],"/home/andrii/immersiv-web/src/components/ProjectView/Components/StreamView/StreamView.jsx",["200","201","202"],"/home/andrii/immersiv-web/src/components/ProjectView/Log.js",[],"/home/andrii/immersiv-web/src/components/ProjectView/Components/EmbededView/EmbededView.jsx",[],"/home/andrii/immersiv-web/src/components/ProjectView/Components/LoadingView/LoadingView.jsx",[],"/home/andrii/immersiv-web/src/pages/PropertiesAdmin.jsx",["203"],"/home/andrii/immersiv-web/src/components/DashboardItem/DataItems/index.js",[],"/home/andrii/immersiv-web/src/components/DashboardItem/DataItems/TextItem/TextItem.js",[],"/home/andrii/immersiv-web/src/components/DashboardItem/DataItems/ChartItem/ChartItem.js",[],"/home/andrii/immersiv-web/src/components/DashboardItem/DataItems/RealTimeItem/RealTimeItem.js",[],"/home/andrii/immersiv-web/src/components/ProjectView/Layout/ProjectView.jsx",[],"/home/andrii/immersiv-web/src/components/ProjectView/Layout/Button.jsx",[],"/home/andrii/immersiv-web/src/components/ProjectView/Layout/PoweredLogo.jsx",[],"/home/andrii/immersiv-web/src/hooks/useLoginCheck.js",["204"],{"ruleId":"205","severity":1,"message":"206","line":98,"column":21,"nodeType":"207","endLine":98,"endColumn":24},{"ruleId":"208","severity":1,"message":"209","line":28,"column":8,"nodeType":"210","endLine":28,"endColumn":10,"suggestions":"211"},{"ruleId":"208","severity":1,"message":"212","line":47,"column":8,"nodeType":"210","endLine":47,"endColumn":58,"suggestions":"213"},{"ruleId":"208","severity":1,"message":"214","line":58,"column":8,"nodeType":"210","endLine":58,"endColumn":27,"suggestions":"215"},{"ruleId":"208","severity":1,"message":"212","line":45,"column":8,"nodeType":"210","endLine":45,"endColumn":58,"suggestions":"216"},{"ruleId":"217","severity":1,"message":"218","line":18,"column":10,"nodeType":"219","messageId":"220","endLine":18,"endColumn":17},{"ruleId":"208","severity":1,"message":"212","line":51,"column":8,"nodeType":"210","endLine":51,"endColumn":58,"suggestions":"221"},{"ruleId":"208","severity":1,"message":"222","line":30,"column":8,"nodeType":"210","endLine":30,"endColumn":10,"suggestions":"223"},{"ruleId":"208","severity":1,"message":"224","line":42,"column":8,"nodeType":"210","endLine":42,"endColumn":58,"suggestions":"225"},{"ruleId":"208","severity":1,"message":"212","line":55,"column":8,"nodeType":"210","endLine":55,"endColumn":58,"suggestions":"226"},{"ruleId":"208","severity":1,"message":"212","line":36,"column":8,"nodeType":"210","endLine":36,"endColumn":58,"suggestions":"227"},{"ruleId":"208","severity":1,"message":"224","line":42,"column":8,"nodeType":"210","endLine":42,"endColumn":58,"suggestions":"228"},{"ruleId":"208","severity":1,"message":"222","line":48,"column":8,"nodeType":"210","endLine":48,"endColumn":10,"suggestions":"229"},{"ruleId":"208","severity":1,"message":"230","line":58,"column":8,"nodeType":"210","endLine":58,"endColumn":43,"suggestions":"231"},{"ruleId":"208","severity":1,"message":"232","line":58,"column":9,"nodeType":"233","endLine":58,"endColumn":18},{"ruleId":"208","severity":1,"message":"232","line":58,"column":20,"nodeType":"233","endLine":58,"endColumn":29},{"ruleId":"208","severity":1,"message":"234","line":121,"column":8,"nodeType":"210","endLine":121,"endColumn":25,"suggestions":"235"},{"ruleId":"208","severity":1,"message":"236","line":127,"column":8,"nodeType":"210","endLine":127,"endColumn":25,"suggestions":"237"},{"ruleId":"208","severity":1,"message":"238","line":133,"column":8,"nodeType":"210","endLine":133,"endColumn":32,"suggestions":"239"},{"ruleId":"208","severity":1,"message":"222","line":28,"column":8,"nodeType":"210","endLine":28,"endColumn":10,"suggestions":"240"},{"ruleId":"208","severity":1,"message":"212","line":27,"column":8,"nodeType":"210","endLine":27,"endColumn":71,"suggestions":"241"},"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'id', 'setProject', and 'setProperties'. Either include them or remove the dependency array.","ArrayExpression",["242"],"React Hook useEffect has missing dependencies: 'logout' and 'navigate'. Either include them or remove the dependency array.",["243"],"React Hook useEffect has a missing dependency: 'editModalOpen'. Either include it or remove the dependency array.",["244"],["245"],"no-unused-vars","'useUser' is defined but never used.","Identifier","unusedVar",["246"],"React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["247"],"React Hook useEffect has missing dependencies: 'id', 'logout', and 'navigate'. Either include them or remove the dependency array.",["248"],["249"],["250"],["251"],["252"],"React Hook useEffect has missing dependencies: 'getMetricData' and 'period.length'. Either include them or remove the dependency array.",["253"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","MemberExpression","React Hook useEffect has missing dependencies: 'project.Version' and 'project.modelId'. Either include them or remove the dependency array.",["254"],"React Hook useEffect has a missing dependency: 'launch'. Either include it or remove the dependency array.",["255"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["256"],["257"],["258"],{"desc":"259","fix":"260"},{"desc":"261","fix":"262"},{"desc":"263","fix":"264"},{"desc":"261","fix":"265"},{"desc":"261","fix":"266"},{"desc":"267","fix":"268"},{"desc":"269","fix":"270"},{"desc":"261","fix":"271"},{"desc":"261","fix":"272"},{"desc":"269","fix":"273"},{"desc":"267","fix":"274"},{"desc":"275","fix":"276"},{"desc":"277","fix":"278"},{"desc":"279","fix":"280"},{"desc":"281","fix":"282"},{"desc":"267","fix":"283"},{"desc":"284","fix":"285"},"Update the dependencies array to be: [id, setProject, setProperties]",{"range":"286","text":"287"},"Update the dependencies array to be: [isLoggedIn, authData?.super, authData.projectId, logout, navigate]",{"range":"288","text":"289"},"Update the dependencies array to be: [editModalOpen, editModalOpen.id]",{"range":"290","text":"291"},{"range":"292","text":"289"},{"range":"293","text":"289"},"Update the dependencies array to be: [id]",{"range":"294","text":"295"},"Update the dependencies array to be: [isLoggedIn, authData?.super, authData?.projectId, id, logout, navigate]",{"range":"296","text":"297"},{"range":"298","text":"289"},{"range":"299","text":"289"},{"range":"300","text":"297"},{"range":"301","text":"295"},"Update the dependencies array to be: [getMetricData, period.length, project?.id]",{"range":"302","text":"303"},"Update the dependencies array to be: [availableModels, project.Version, project.modelId]",{"range":"304","text":"305"},"Update the dependencies array to be: [launch, modelDefinition]",{"range":"306","text":"307"},"Update the dependencies array to be: [props, status, streamerStatus]",{"range":"308","text":"309"},{"range":"310","text":"295"},"Update the dependencies array to be: [isLoggedIn, authData?.super, authData.projectId, isInitiated, logout, navigate]",{"range":"311","text":"312"},[1005,1007],"[id, setProject, setProperties]",[1453,1503],"[isLoggedIn, authData?.super, authData.projectId, logout, navigate]",[1821,1840],"[editModalOpen, editModalOpen.id]",[1351,1401],[1509,1559],[1089,1091],"[id]",[1364,1414],"[isLoggedIn, authData?.super, authData?.projectId, id, logout, navigate]",[1365,1415],[1053,1103],[1358,1408],[1551,1553],[1803,1838],"[getMetricData, period.length, project?.id]",[3776,3793],"[availableModels, project.Version, project.modelId]",[3893,3910],"[launch, modelDefinition]",[4058,4082],"[props, status, streamerStatus]",[934,936],[805,868],"[isLoggedIn, authData?.super, authData.projectId, isInitiated, logout, navigate]"]
[{"/home/andrii/immersiv-web/src/index.js":"1","/home/andrii/immersiv-web/src/App.js":"2","/home/andrii/immersiv-web/src/reportWebVitals.js":"3","/home/andrii/immersiv-web/src/context/UserContext.jsx":"4","/home/andrii/immersiv-web/src/helpers/history.js":"5","/home/andrii/immersiv-web/src/pages/Login.jsx":"6","/home/andrii/immersiv-web/src/pages/Properties.jsx":"7","/home/andrii/immersiv-web/src/pages/ProjectDetails.jsx":"8","/home/andrii/immersiv-web/src/pages/Admins.jsx":"9","/home/andrii/immersiv-web/src/pages/Constants.jsx":"10","/home/andrii/immersiv-web/src/pages/Home.jsx":"11","/home/andrii/immersiv-web/src/pages/PropertiesClient.jsx":"12","/home/andrii/immersiv-web/src/pages/Projects.jsx":"13","/home/andrii/immersiv-web/src/pages/ResetPassword.jsx":"14","/home/andrii/immersiv-web/src/layout/Layout.jsx":"15","/home/andrii/immersiv-web/src/pages/Project.jsx":"16","/home/andrii/immersiv-web/src/pages/CreateProject.jsx":"17","/home/andrii/immersiv-web/src/pages/AnalyticClient.jsx":"18","/home/andrii/immersiv-web/src/helpers/WithAxios.js":"19","/home/andrii/immersiv-web/src/services/auth.service.js":"20","/home/andrii/immersiv-web/src/services/constant.service.js":"21","/home/andrii/immersiv-web/src/helpers/useQuery.js":"22","/home/andrii/immersiv-web/src/services/admin.service.js":"23","/home/andrii/immersiv-web/src/services/project.service.js":"24","/home/andrii/immersiv-web/src/services/property.service.js":"25","/home/andrii/immersiv-web/src/services/ga.service.js":"26","/home/andrii/immersiv-web/src/components/ProjectFormFields.jsx":"27","/home/andrii/immersiv-web/src/components/ForgotPasswordModal.jsx":"28","/home/andrii/immersiv-web/src/components/ProjectView/Components/PropertiesTable.jsx":"29","/home/andrii/immersiv-web/src/api/axios.config.js":"30","/home/andrii/immersiv-web/src/components/ProjectView/Components/Loading/Loading.jsx":"31","/home/andrii/immersiv-web/src/components/ProjectView/Components/StreamView/StreamView.jsx":"32","/home/andrii/immersiv-web/src/components/ProjectView/Log.js":"33","/home/andrii/immersiv-web/src/components/ProjectView/Components/EmbededView/EmbededView.jsx":"34","/home/andrii/immersiv-web/src/components/ProjectView/Components/LoadingView/LoadingView.jsx":"35","/home/andrii/immersiv-web/src/pages/PropertiesAdmin.jsx":"36","/home/andrii/immersiv-web/src/components/DashboardItem/DataItems/index.js":"37","/home/andrii/immersiv-web/src/components/DashboardItem/DataItems/TextItem/TextItem.js":"38","/home/andrii/immersiv-web/src/components/DashboardItem/DataItems/ChartItem/ChartItem.js":"39","/home/andrii/immersiv-web/src/components/ProjectView/Layout/ProjectView.jsx":"40","/home/andrii/immersiv-web/src/components/ProjectView/Layout/Button.jsx":"41","/home/andrii/immersiv-web/src/components/ProjectView/Layout/PoweredLogo.jsx":"42","/home/andrii/immersiv-web/src/hooks/useLoginCheck.js":"43","/home/andrii/immersiv-web/src/pages/MediaAdmin.jsx":"44","/home/andrii/immersiv-web/src/services/utils.service.js":"45"},{"size":670,"mtime":1649049493702,"results":"46","hashOfConfig":"47"},{"size":3849,"mtime":1653168233925,"results":"48","hashOfConfig":"47"},{"size":362,"mtime":1640368180000,"results":"49","hashOfConfig":"47"},{"size":2031,"mtime":1652371774250,"results":"50","hashOfConfig":"47"},{"size":87,"mtime":1640368180000,"results":"51","hashOfConfig":"47"},{"size":3911,"mtime":1649049512820,"results":"52","hashOfConfig":"47"},{"size":981,"mtime":1652436572821,"results":"53","hashOfConfig":"47"},{"size":6654,"mtime":1654442494666,"results":"54","hashOfConfig":"47"},{"size":7572,"mtime":1653169417149,"results":"55","hashOfConfig":"47"},{"size":4139,"mtime":1652432586811,"results":"56","hashOfConfig":"47"},{"size":188,"mtime":1647337840944,"results":"57","hashOfConfig":"47"},{"size":4311,"mtime":1654122076973,"results":"58","hashOfConfig":"47"},{"size":8642,"mtime":1652432586947,"results":"59","hashOfConfig":"47"},{"size":5587,"mtime":1647391907329,"results":"60","hashOfConfig":"47"},{"size":805,"mtime":1649049587225,"results":"61","hashOfConfig":"47"},{"size":1211,"mtime":1649050544189,"results":"62","hashOfConfig":"47"},{"size":2976,"mtime":1652432587199,"results":"63","hashOfConfig":"47"},{"size":8153,"mtime":1654122107151,"results":"64","hashOfConfig":"47"},{"size":1488,"mtime":1652371155532,"results":"65","hashOfConfig":"47"},{"size":1319,"mtime":1652371034206,"results":"66","hashOfConfig":"47"},{"size":251,"mtime":1645578221413,"results":"67","hashOfConfig":"47"},{"size":158,"mtime":1640368180000,"results":"68","hashOfConfig":"47"},{"size":317,"mtime":1647372383591,"results":"69","hashOfConfig":"47"},{"size":989,"mtime":1653226465377,"results":"70","hashOfConfig":"47"},{"size":676,"mtime":1652436066247,"results":"71","hashOfConfig":"47"},{"size":404,"mtime":1648640064091,"results":"72","hashOfConfig":"47"},{"size":3431,"mtime":1654175940178,"results":"73","hashOfConfig":"47"},{"size":2844,"mtime":1645918040931,"results":"74","hashOfConfig":"47"},{"size":10501,"mtime":1654383141497,"results":"75","hashOfConfig":"47"},{"size":543,"mtime":1652359055992,"results":"76","hashOfConfig":"47"},{"size":2507,"mtime":1646086848631,"results":"77","hashOfConfig":"47"},{"size":10562,"mtime":1648450882096,"results":"78","hashOfConfig":"47"},{"size":107,"mtime":1645547392556,"results":"79","hashOfConfig":"47"},{"size":3606,"mtime":1648450578998,"results":"80","hashOfConfig":"47"},{"size":5021,"mtime":1646085095883,"results":"81","hashOfConfig":"47"},{"size":2404,"mtime":1652432586243,"results":"82","hashOfConfig":"47"},{"size":132,"mtime":1652371752248,"results":"83","hashOfConfig":"47"},{"size":384,"mtime":1648499991518,"results":"84","hashOfConfig":"47"},{"size":1530,"mtime":1649050189859,"results":"85","hashOfConfig":"47"},{"size":6043,"mtime":1653569722511,"results":"86","hashOfConfig":"47"},{"size":468,"mtime":1647377791994,"results":"87","hashOfConfig":"47"},{"size":483,"mtime":1645484578692,"results":"88","hashOfConfig":"47"},{"size":905,"mtime":1652360069054,"results":"89","hashOfConfig":"47"},{"size":11518,"mtime":1654119056197,"results":"90","hashOfConfig":"47"},{"size":173,"mtime":1653226467089,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"qokfro",{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180"},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187"},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190"},{"filePath":"191","messages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/andrii/immersiv-web/src/index.js",[],"/home/andrii/immersiv-web/src/App.js",[],"/home/andrii/immersiv-web/src/reportWebVitals.js",[],"/home/andrii/immersiv-web/src/context/UserContext.jsx",[],"/home/andrii/immersiv-web/src/helpers/history.js",[],"/home/andrii/immersiv-web/src/pages/Login.jsx",["193"],"// import { Button, HelperText, Input, Label } from \"@windmill/react-ui\";\r\nimport ForgotPasswordModal from \"components/ForgotPasswordModal\";\r\nimport { useUser } from \"context/UserContext\";\r\nimport Layout from \"layout/Layout\";\r\nimport React, { useState } from \"react\";\r\nimport toast from \"react-hot-toast\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport authService from \"services/auth.service\";\r\nimport { Form, Input, Button, Typography } from \"antd\";\r\nimport { UserOutlined, LockOutlined } from \"@ant-design/icons\";\r\n\r\nconst Login = () => {\r\n    const { isLoggedIn, setUserState, authData } = useUser();\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [redirectToReferrer, setRedirectToReferrer] = useState(false);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const onFinish = async (data) => {\r\n        const { email, password } = data;\r\n\r\n        try {\r\n            setIsLoading(true);\r\n            const data = await authService.login(email, password);\r\n            toast.success(\"Login successful 🔓\");\r\n\r\n            setTimeout(() => {\r\n                setUserState(data);\r\n                setRedirectToReferrer(true);\r\n                setIsLoading(false);\r\n            }, 1500);\r\n        } catch (error) {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    if (\r\n        (isLoggedIn || redirectToReferrer) &&\r\n        (authData?.super || authData?.projectId)\r\n    ) {\r\n        navigate(\"/admin\");\r\n    }\r\n\r\n    return (\r\n        <Layout title=\"Login\" loading={isLoading}>\r\n            <Form\r\n                name=\"normal_login\"\r\n                onFinish={onFinish}\r\n                style={{\r\n                    padding: \"100px 16px\",\r\n                    maxWidth: \"500px\",\r\n                    margin: \"auto\",\r\n                }}\r\n            >\r\n                <Typography.Title\r\n                    style={{ textAlign: \"center\", marginBottom: \"50px\" }}\r\n                >\r\n                    Manage IMMERSIVE\r\n                </Typography.Title>\r\n                <Form.Item\r\n                    name=\"email\"\r\n                    rules={[\r\n                        {\r\n                            type: \"email\",\r\n                            message: \"The input is not valid E-mail!\",\r\n                        },\r\n                        {\r\n                            required: true,\r\n                            message: \"Please input your E-mail!\",\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input\r\n                        prefix={\r\n                            <UserOutlined className=\"site-form-item-icon\" />\r\n                        }\r\n                        placeholder=\"Email\"\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"password\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: \"Please input your Password!\",\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input.Password\r\n                        prefix={\r\n                            <LockOutlined className=\"site-form-item-icon\" />\r\n                        }\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <a>\r\n                        <ForgotPasswordModal />\r\n                    </a>\r\n                </Form.Item>\r\n\r\n                <Form.Item>\r\n                    <Button\r\n                        type=\"primary\"\r\n                        htmlType=\"submit\"\r\n                        style={{ width: \"100%\" }}\r\n                    >\r\n                        Log in\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","/home/andrii/immersiv-web/src/pages/Properties.jsx",["194"],"import React, { useEffect } from \"react\";\n\nimport propertyService from \"services/property.service\";\nimport PropertiesTable from \"components/ProjectView/Components/PropertiesTable\";\nimport projectService from \"services/project.service\";\nimport useLoginCheck from \"hooks/useLoginCheck\";\n\nconst Properties = (props) => {\n    const { admin, id, project, properties, setProject, setProperties } = props;\n\n    useEffect(() => {\n        propertyService.getProperty(id).then((response) => {\n            setProperties(response.data);\n        });\n\n        projectService.getProject(id).then((response) => {\n            setProject(response.data);\n        });\n    }, []);\n\n    useLoginCheck();\n\n    return (\n        properties &&\n        project && (\n            <PropertiesTable\n                properties={properties}\n                setProperties={setProperties}\n                project={project}\n                admin={admin}\n            />\n        )\n    );\n};\n\nexport default Properties;\n","/home/andrii/immersiv-web/src/pages/ProjectDetails.jsx",[],"/home/andrii/immersiv-web/src/pages/Admins.jsx",["195"],"import LayoutHOC from \"layout/Layout\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\n\r\nimport {\r\n    Button,\r\n    Dropdown,\r\n    Form,\r\n    Input,\r\n    Layout,\r\n    List,\r\n    Menu,\r\n    Modal,\r\n    PageHeader,\r\n    Popconfirm,\r\n} from \"antd\";\r\nimport { Content } from \"antd/lib/layout/layout\";\r\nimport { MoreOutlined } from \"@ant-design/icons\";\r\nimport { useUser } from \"context/UserContext\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport toast from \"react-hot-toast\";\r\nimport adminService from \"services/admin.service\";\r\nimport useLoginCheck from \"hooks/useLoginCheck\";\r\n\r\nconst Admins = (props) => {\r\n    const formRef = useRef(null);\r\n    const [admins, setAdmins] = useState(null);\r\n    const [editModalOpen, setEditModalOpen] = useState(null);\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        adminService.getAdmin().then((response) => {\r\n            setAdmins(response.data);\r\n        });\r\n    }, []);\r\n\r\n    useLoginCheck();\r\n\r\n    const onFinish = async (values) => {\r\n        const response = await adminService.createAdmin(values);\r\n        if (response.data) {\r\n            toast.success(\"Saved\");\r\n            setAdmins(response.data);\r\n            setEditModalOpen(null);\r\n            if (formRef.current) formRef.current.resetFields();\r\n        }\r\n    };\r\n\r\n    const deleteAdmin = async (id) => {\r\n        const response = await adminService.deleteAdmin(id);\r\n        if (response.data) setAdmins(response.data);\r\n    };\r\n\r\n    return (\r\n        <LayoutHOC loading={!admins}>\r\n            <Layout\r\n                style={{\r\n                    height: \"100%\",\r\n                    display: \"flex\",\r\n                    flex: 1,\r\n                    background: \"white\",\r\n                }}\r\n            >\r\n                <PageHeader\r\n                    onBack={() => navigate(`/admin`)}\r\n                    title={`Admins`}\r\n                    style={{\r\n                        boxShadow: \"1px 1px 10px 1px #ccc\",\r\n                        position: \"fixed\",\r\n                        zIndex: 100,\r\n                        width: \"100%\",\r\n                    }}\r\n                />\r\n\r\n                <Content\r\n                    style={{\r\n                        flex: 1,\r\n                        overflow: \"auto\",\r\n                        padding: \"16px\",\r\n                        paddingTop: \"100px\",\r\n                        maxWidth: \"800px\",\r\n                        width: \"100%\",\r\n                        margin: \"auto\",\r\n                    }}\r\n                >\r\n                    <Button\r\n                        onClick={() => setEditModalOpen({})}\r\n                        style={{ margin: \"16px\" }}\r\n                    >\r\n                        Add admin\r\n                    </Button>\r\n                    <Modal\r\n                        visible={!!editModalOpen}\r\n                        onCancel={() => setEditModalOpen(null)}\r\n                        footer={null}\r\n                    >\r\n                        <Form\r\n                            onFinish={onFinish}\r\n                            style={{\r\n                                padding: \" 16px\",\r\n                                maxWidth: \"500px\",\r\n                                margin: \"auto\",\r\n                            }}\r\n                            ref={formRef}\r\n                        >\r\n                            <Form.Item\r\n                                name=\"email\"\r\n                                rules={[\r\n                                    {\r\n                                        required: true,\r\n                                        message: \"Please add name!\",\r\n                                        type: \"email\",\r\n                                    },\r\n                                ]}\r\n                            >\r\n                                <Input placeholder=\"Email\" />\r\n                            </Form.Item>\r\n\r\n                            <Form.Item>\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    htmlType=\"submit\"\r\n                                    style={{ width: \"100%\" }}\r\n                                >\r\n                                    Save\r\n                                </Button>\r\n                            </Form.Item>\r\n                        </Form>\r\n                    </Modal>\r\n                    {admins && (\r\n                        <List\r\n                            itemLayout=\"horizontal\"\r\n                            dataSource={admins.sort((a, b) =>\r\n                                a.name > b.name ? 1 : -1\r\n                            )}\r\n                            renderItem={(admin) => (\r\n                                <List.Item\r\n                                    actions={[\r\n                                        <Dropdown\r\n                                            overlay={\r\n                                                <Menu>\r\n                                                    <Popconfirm\r\n                                                        title=\"Are you sure to delete this admin?\"\r\n                                                        onConfirm={() =>\r\n                                                            deleteAdmin(\r\n                                                                admin.email\r\n                                                            )\r\n                                                        }\r\n                                                        okText=\"Yes\"\r\n                                                        cancelText=\"No\"\r\n                                                    >\r\n                                                        <Menu.Item\r\n                                                            key=\"3\"\r\n                                                            danger\r\n                                                        >\r\n                                                            Delete\r\n                                                        </Menu.Item>\r\n                                                    </Popconfirm>\r\n                                                </Menu>\r\n                                            }\r\n                                            trigger={[\"click\"]}\r\n                                        >\r\n                                            <MoreOutlined\r\n                                                style={{ fontSize: \"30px\" }}\r\n                                            />\r\n                                        </Dropdown>,\r\n                                    ]}\r\n                                    style={{\r\n                                        borderBottom: \"3px solid #ccc\",\r\n                                        paddingLeft: \"16px\",\r\n                                    }}\r\n                                >\r\n                                    <List.Item.Meta\r\n                                        title={admin.email}\r\n                                        description={\r\n                                            admin.locked\r\n                                                ? \"Locked\"\r\n                                                : \"Not locked\"\r\n                                        }\r\n                                    />\r\n                                </List.Item>\r\n                            )}\r\n                        />\r\n                    )}\r\n                </Content>\r\n            </Layout>\r\n        </LayoutHOC>\r\n    );\r\n};\r\n\r\nexport default Admins;\r\n","/home/andrii/immersiv-web/src/pages/Constants.jsx",[],"/home/andrii/immersiv-web/src/pages/Home.jsx",[],"/home/andrii/immersiv-web/src/pages/PropertiesClient.jsx",["196","197"],"import LayoutHOC from \"layout/Layout\";\nimport React, { useEffect, useState } from \"react\";\n\nimport { Drawer, Layout, Menu, PageHeader } from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\nimport { MenuOutlined } from \"@ant-design/icons\";\nimport { useUser } from \"context/UserContext\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport Properties from \"./Properties\";\nimport projectService from \"services/project.service\";\nimport propertyService from \"services/property.service\";\n\nconst PropertiesClient = (props) => {\n    const { id } = useParams();\n    const { logout, isLoggedIn, authData } = useUser();\n    const navigate = useNavigate();\n    const [project, setProject] = useState(null);\n    const [properties, setProperties] = useState(null);\n\n    const [openDrawer, setOpenDrawer] = useState(false);\n\n    useEffect(() => {\n        propertyService.getProperty(id).then((response) => {\n            setProperties(response.data);\n        });\n\n        projectService.getProject(id).then((response) => {\n            setProject(response.data);\n        });\n    }, []);\n\n    useEffect(() => {\n        if (\n            !isLoggedIn ||\n            (!authData?.super &&\n                id.toString() !== authData?.projectId.toString())\n        ) {\n            logout();\n            navigate(\"/login\");\n            return null;\n        }\n    }, [isLoggedIn, authData?.super, authData?.projectId]);\n\n    return (\n        <LayoutHOC loading={!properties || !project}>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => setOpenDrawer(true)}\n                    backIcon={<MenuOutlined />}\n                    title={\"Appartments\"}\n                    style={{\n                        boxShadow: \"1px 1px 10px 1px #ccc\",\n                        position: \"fixed\",\n                        zIndex: 100,\n                        width: \"100%\",\n                    }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        paddingTop: \"100px\",\n                        maxWidth: \"1200px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    <Properties\n                        id={id}\n                        setProject={setProject}\n                        setProperties={setProperties}\n                        project={project}\n                        properties={properties}\n                    />\n                </Content>\n            </Layout>\n            <Drawer\n                title=\"Menu\"\n                placement=\"left\"\n                onClose={() => setOpenDrawer(false)}\n                visible={openDrawer}\n            >\n                <Menu\n                    mode=\"inline\"\n                    style={{ width: \"100%\" }}\n                    onClick={({ item, key }) => {\n                        setOpenDrawer(false);\n                        switch (key) {\n                            case \"logout\":\n                                logout();\n                                break;\n                            case \"visit\":\n                                navigate(`/p/${project.url}`);\n                                break;\n                            case \"analytics\":\n                                navigate(`/p-admin/${project.id}/analytics`);\n                                break;\n                            default:\n                                return;\n                        }\n                    }}\n                    activeKey=\"properties\"\n                    selectedKeys={[\"properties\"]}\n                >\n                    <Menu.Item key=\"properties\">Properties</Menu.Item>\n                    <Menu.Item key=\"analytics\">Analytics</Menu.Item>\n                    <Menu.Item key=\"visit\">Visit project</Menu.Item>\n                    <Menu.Item key=\"logout\">Logout</Menu.Item>\n                </Menu>\n            </Drawer>\n        </LayoutHOC>\n    );\n};\n\nexport default PropertiesClient;\n","/home/andrii/immersiv-web/src/pages/Projects.jsx",[],"/home/andrii/immersiv-web/src/pages/ResetPassword.jsx",[],"/home/andrii/immersiv-web/src/layout/Layout.jsx",[],"/home/andrii/immersiv-web/src/pages/Project.jsx",[],"/home/andrii/immersiv-web/src/pages/CreateProject.jsx",[],"/home/andrii/immersiv-web/src/pages/AnalyticClient.jsx",["198","199","200","201","202","203"],"import LayoutHOC from \"layout/Layout\";\nimport React, { useEffect, useState } from \"react\";\n\nimport { DatePicker, Layout, PageHeader } from \"antd\";\n\nimport { Content } from \"antd/lib/layout/layout\";\n\nimport { useNavigate, useParams } from \"react-router-dom\";\n\nimport projectService from \"services/project.service\";\nimport moment from \"moment\";\nimport gaService from \"services/ga.service\";\nimport toast from \"react-hot-toast\";\nimport { ChartItem } from \"components/DashboardItem/DataItems\";\nimport useLoginCheck from \"hooks/useLoginCheck\";\nimport { useUser } from \"context/UserContext\";\n\nconst AnalyticClient = (props) => {\n    const { id } = useParams();\n\n    const [project, setProject] = useState(null);\n    const [dateData, setDateData] = useState(null);\n    const [cityData, setCityData] = useState(null);\n    const [deviceData, setDeviceData] = useState(null);\n    const [sourceData, setSourceData] = useState(null);\n    const [period, setPeriod] = useState([\n        moment().subtract(7, \"day\").format(),\n        moment().format(),\n    ]);\n    const navigate = useNavigate();\n    const { logout, isLoggedIn, authData } = useUser();\n\n    useEffect(() => {\n        if (\n            !isLoggedIn ||\n            (!authData?.super &&\n                id.toString() !== authData?.projectId.toString())\n        ) {\n            logout();\n            navigate(\"/login\");\n            return null;\n        }\n    }, [isLoggedIn, authData?.super, authData?.projectId]);\n\n    useEffect(() => {\n        projectService.getProject(id).then((response) => {\n            setProject(response.data);\n        });\n    }, []);\n\n    useEffect(() => {\n        if (period.length === 2 && project?.id) {\n            setDateData(null);\n            setCityData(null);\n            setDeviceData(null);\n            setSourceData(null);\n            getMetricData();\n        }\n    }, [period[0], period[1], project?.id]);\n\n    const getMetricData = () => {\n        gaService\n            .getGA(\n                project.id,\n                \"ga:users,ga:newUsers,ga:pageviews,ga:sessions,ga:sessionDuration\",\n                \"ga:date\",\n                period\n            )\n            .then((res) => {\n                setDateData(res.data.data);\n            })\n            .catch((err) => {\n                toast.error(\"Users analytics data not loaded\");\n            });\n\n        gaService\n            .getGA(project.id, \"ga:users\", \"ga:city\", period)\n            .then((res) => {\n                setCityData(res.data.data);\n            })\n            .catch((err) => {\n                toast.error(\"Location analytics data not loaded\");\n            });\n\n        gaService\n            .getGA(project.id, \"ga:users\", \"ga:deviceCategory\", period)\n            .then((res) => {\n                setDeviceData(res.data.data);\n            })\n            .catch((err) => {\n                toast.error(\"Device analytics data not loaded\");\n            });\n\n        gaService\n            .getGA(project.id, \"ga:users\", \"ga:source\", period)\n            .then((res) => {\n                setSourceData(res.data.data);\n            })\n            .catch((err) => {\n                toast.error(\"Source analytics data not loaded\");\n            });\n    };\n\n    return (\n        <LayoutHOC>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => navigate(`/p-admin/${id}`)}\n                    title={\n                        <>\n                            Analytics\n                            <br />\n                            <DatePicker.RangePicker\n                                size=\"large\"\n                                defaultValue={[\n                                    moment().subtract(7, \"day\"),\n                                    moment(),\n                                ]}\n                                onChange={(m) =>\n                                    setPeriod([m[0].format(), m[1].format()])\n                                }\n                                allowClear={false}\n                            />\n                        </>\n                    }\n                    style={{ borderBottom: \"1px #ccc solid\" }}\n                />\n                {project && (\n                    <Content\n                        style={{\n                            flex: 1,\n                            overflow: \"auto\",\n                            paddingTop: \"100px\",\n                            padding: \"16px\",\n\n                            width: \"100%\",\n                            margin: \"auto\",\n                        }}\n                    >\n                        <div\n                            style={{\n                                textAlign: \"center\",\n                                display: \"flex\",\n                                flexDirection: \"row\",\n                                flexWrap: \"wrap\",\n                                alignItems: \"center\",\n                                justifyContent: \"center\",\n                            }}\n                        >\n                            <ChartItem\n                                data={dateData}\n                                title=\"Users\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                column={1}\n                            />\n                            <ChartItem\n                                data={dateData}\n                                title=\"New users\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                column={2}\n                            />\n                            <ChartItem\n                                data={dateData}\n                                title=\"Page views\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                column={3}\n                            />\n                            <ChartItem\n                                data={dateData}\n                                title=\"Sessions\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                column={4}\n                            />\n                            <ChartItem\n                                data={dateData}\n                                title=\"Session duration (minutes)\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                column={5}\n                                seconds\n                            />\n                            <ChartItem\n                                data={deviceData}\n                                title=\"Device type\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                type=\"PieChart\"\n                                column={1}\n                                seconds\n                                isDate={false}\n                            />\n                            <ChartItem\n                                data={sourceData}\n                                title=\"Source\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                type=\"BarChart\"\n                                column={1}\n                                isDate={false}\n                            />\n                            <ChartItem\n                                data={cityData}\n                                title=\"Source\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                type=\"Table\"\n                                column={1}\n                                isDate={false}\n                            />\n                        </div>\n                    </Content>\n                )}\n            </Layout>\n        </LayoutHOC>\n    );\n};\n\nexport default AnalyticClient;\n","/home/andrii/immersiv-web/src/helpers/WithAxios.js",["204"],"import { useEffect } from \"react\";\nimport API from \"api/axios.config\";\nimport { useUser } from \"context/UserContext\";\nimport history from \"helpers/history\";\n\nconst WithAxios = ({ children }) => {\n    const { isInitiated, logout } = useUser();\n\n    useEffect(() => {\n        API.interceptors.response.use(\n            (response) => response,\n            async (error) => {\n                const originalRequest = error.config;\n                if (\n                    error.response.status === 401 &&\n                    originalRequest.url === \"/auth/refresh-token\"\n                ) {\n                    return new Promise((resolve, reject) => {\n                        logout();\n                        history.push(\"/login\");\n                        reject(error);\n                    });\n                }\n\n                if (error.response.status === 401 && !originalRequest._retry) {\n                    try {\n                        originalRequest._retry = true;\n                        const res = await API.post(\"/auth/refresh-token\");\n                        localStorage.setItem(\"token\", res.data.token);\n                        return API(originalRequest);\n                    } catch (error) {\n                        logout();\n                        history.push(\"/login\");\n                    }\n                }\n                return Promise.reject(error);\n            }\n        );\n    }, []);\n\n    return isInitiated ? children : null;\n};\n\nexport default WithAxios;\n","/home/andrii/immersiv-web/src/services/auth.service.js",[],"/home/andrii/immersiv-web/src/services/constant.service.js",[],"/home/andrii/immersiv-web/src/helpers/useQuery.js",[],"/home/andrii/immersiv-web/src/services/admin.service.js",[],"/home/andrii/immersiv-web/src/services/project.service.js",[],"/home/andrii/immersiv-web/src/services/property.service.js",[],"/home/andrii/immersiv-web/src/services/ga.service.js",[],"/home/andrii/immersiv-web/src/components/ProjectFormFields.jsx",[],"/home/andrii/immersiv-web/src/components/ForgotPasswordModal.jsx",[],"/home/andrii/immersiv-web/src/components/ProjectView/Components/PropertiesTable.jsx",["205","206"],"/home/andrii/immersiv-web/src/api/axios.config.js",[],"/home/andrii/immersiv-web/src/components/ProjectView/Components/Loading/Loading.jsx",[],"/home/andrii/immersiv-web/src/components/ProjectView/Components/StreamView/StreamView.jsx",["207","208","209"],"import {\n    ModelDefinition,\n    PlatformNext,\n    UndefinedModelDefinition,\n    DefaultStreamerOptions,\n    StreamerStatus,\n} from \"@pureweb/platform-sdk\";\n\nimport {\n    useStreamer,\n    useLaunchRequest,\n    System,\n} from \"@pureweb/platform-sdk-react\";\n\nimport React, { useEffect, useState } from \"react\";\nimport useAsyncEffect from \"use-async-effect\";\nimport \"./StreamView.css\";\n\nimport { EmbeddedView } from \"../EmbededView/EmbededView\";\n\nimport logger from \"../../Log\";\nimport { isMobile as isMobileAgent } from \"react-device-detect\";\n\nconst audio = new Audio();\naudio.autoplay = true;\naudio.volume = 0.5;\n\n// Initialize platform reference\nconst platform = new PlatformNext();\nplatform.initialize({\n    endpoint: \"https://api.pureweb.io\",\n});\n\nconst StreamView = (props) => {\n    const { project } = props;\n\n    const [modelDefinitionUnavailable, setModelDefinitionUnavailable] =\n        useState(false);\n    const [modelDefinition, setModelDefinition] = useState(\n        new UndefinedModelDefinition()\n    );\n    const [availableModels, setAvailableModels] = useState();\n    const [launchRequestError, setLaunchRequestError] = useState();\n    const streamerOptions = DefaultStreamerOptions;\n\n    const [status, launchRequest, queueLaunchRequest] = useLaunchRequest(\n        platform,\n        modelDefinition,\n        {}\n    );\n    const [streamerStatus, emitter, videoStream, audioStream] = useStreamer(\n        platform,\n        launchRequest,\n        streamerOptions\n    );\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        if (streamerStatus === StreamerStatus.Failed) {\n            platform.disconnect();\n        }\n    }, [streamerStatus]);\n\n    if (audioStream) {\n        audio.srcObject = audioStream;\n    }\n\n    const launch = async () => {\n        setLoading(true);\n        audio.load();\n\n        if (project.LaunchType !== \"local\") {\n            try {\n                await queueLaunchRequest();\n            } catch (err) {\n                setLaunchRequestError(err);\n            }\n        }\n    };\n    useAsyncEffect(async () => {\n        if (project.projectId) {\n            logger.info(\"Initializing available models: \" + project.projectId);\n            try {\n                await platform.useAnonymousCredentials(project.projectId);\n                await platform.connect();\n                logger.info(\"Agent Connected: \" + platform.agent.id);\n                streamerOptions.iceServers =\n                    platform.agent.serviceCredentials.iceServers;\n                streamerOptions.forceRelay = project.ForceRelay;\n                const models = await platform.getModels();\n                setAvailableModels(models);\n                logger.debug(\"Available models\", models);\n            } catch (err) {\n                logger.error(err);\n            }\n        }\n    }, [project]);\n    useEffect(() => {\n        if (availableModels?.length) {\n            const selectedModels = availableModels.filter(function (\n                model: ModelDefinition\n            ): boolean {\n                if (project.modelId === model.id) {\n                    // If there is a version specified and we encounter it\n                    if (project.Version && project.Version === model.version) {\n                        return true;\n                    }\n                    // If there is no version specified and we find the primary version\n                    if (!project.Version && model.active) {\n                        return true;\n                    }\n                }\n                return false;\n            });\n            if (selectedModels?.length) {\n                setModelDefinition(selectedModels[0]);\n            } else {\n                setModelDefinitionUnavailable(true);\n            }\n        }\n    }, [availableModels]);\n\n    useEffect(() => {\n        if (modelDefinition.type === 0) return;\n\n        launch();\n    }, [modelDefinition]);\n\n    // Log status messages\n    useEffect(() => {\n        logger.info(\"Status\", status, streamerStatus);\n        props.setStatus(status);\n    }, [status, streamerStatus]);\n    // Notify user of missing or errors in configuration\n    if (!project.modelId || !project.projectId) {\n        props.setLoaded(true);\n        return (\n            <div\n                style={{\n                    display: \"flex\",\n                    height: \"100%\",\n                    overflow: \"none\",\n                    textAlign: \"center\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    flex: 1,\n                }}\n            >\n                <p>\n                    Your client has one or more configuration errors. Please\n                    consult the{\" \"}\n                    <a href=\"https://www.npmjs.com/package/@pureweb/cra-template-pureweb-client\">\n                        {\" \"}\n                        README{\" \"}\n                    </a>{\" \"}\n                    for details on how to configure the client template.\n                </p>\n            </div>\n        );\n    }\n\n    if (modelDefinitionUnavailable) {\n        props.setLoaded(true);\n        return (\n            <div\n                style={{\n                    display: \"flex\",\n                    height: \"100%\",\n                    overflow: \"none\",\n                    textAlign: \"center\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    flex: 1,\n                }}\n            >\n                <span>The model that you have requested does not exist</span>\n            </div>\n        );\n    }\n\n    if (launchRequestError) {\n        props.setLoaded(true);\n        return (\n            <div\n                style={{\n                    display: \"flex\",\n                    height: \"100%\",\n                    overflow: \"none\",\n                    textAlign: \"center\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    flex: 1,\n                }}\n            >\n                <span>\n                    {process.env.NODE_ENV === \"development\"\n                        ? `There was an error with the launch request: ${launchRequestError}`\n                        : \"It appears the requested model is currently not online as per your set schedule. Please contact support if it should be available.\"}\n                </span>\n            </div>\n        );\n    }\n\n    // Begin connection\n    if (streamerStatus === StreamerStatus.Disconnected) {\n        props.setLoaded(true);\n        return (\n            <div\n                style={{\n                    display: \"flex\",\n                    height: \"100%\",\n                    overflow: \"none\",\n                    textAlign: \"center\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    flex: 1,\n                }}\n            >\n                <h2>Disconnected from stream</h2>\n            </div>\n        );\n    }\n\n    if (streamerStatus === StreamerStatus.Failed) {\n        props.setLoaded(true);\n        return (\n            <div\n                style={{\n                    display: \"flex\",\n                    height: \"100%\",\n                    overflow: \"none\",\n                    textAlign: \"center\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    flex: 1,\n                }}\n            >\n                <h2>Failure during stream</h2>\n                <h2>Please refresh to request a new session</h2>\n            </div>\n        );\n    }\n\n    if (streamerStatus === StreamerStatus.Withdrawn) {\n        props.setLoaded(true);\n        return (\n            <div\n                style={{\n                    display: \"flex\",\n                    height: \"100%\",\n                    overflow: \"none\",\n                    textAlign: \"center\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    flex: 1,\n                }}\n            >\n                <h2>Streamer contribution withdrawn</h2>\n            </div>\n        );\n    }\n\n    if (loading) {\n        const useNativeTouchEvents =\n            !!project[\n                isMobileAgent ? \"mobileNativeEvents\" : \"desktopNativeEvents\"\n            ];\n        return (\n            <EmbeddedView\n                VideoStream={videoStream}\n                StreamerStatus={streamerStatus}\n                LaunchRequestStatus={status}\n                InputEmitter={emitter}\n                UseNativeTouchEvents={useNativeTouchEvents}\n                UsePointerLock={project.UsePointerLock}\n                PointerLockRelease={project.PointerLockRelease}\n                setLoaded={props.setLoaded}\n            />\n        );\n    } else if (project.LaunchType !== \"local\" && !availableModels) {\n        return (\n            <div\n                style={{\n                    display: \"flex\",\n                    height: \"100%\",\n                    overflow: \"none\",\n                    textAlign: \"center\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    flex: 1,\n                }}\n            >\n                <h2>Initializing...</h2>\n            </div>\n        );\n    } else if (project.LaunchType !== \"local\" && !availableModels?.length) {\n        props.setLoaded(true);\n        return (\n            <div\n                style={{\n                    display: \"flex\",\n                    height: \"100%\",\n                    overflow: \"none\",\n                    textAlign: \"center\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    flex: 1,\n                }}\n            >\n                <h2>No models are currently available in this environment.</h2>\n            </div>\n        );\n    } else {\n        return null;\n    }\n};\n\nconst StreamViewWrapper = (props) => {\n    return System.IsBrowserSupported() ? (\n        <div\n            style={{\n                backgroundColor: \"black\",\n                height: \"100%\",\n                flex: 1,\n                display: \"flex\",\n                color: \"white\",\n            }}\n        >\n            <StreamView\n                setLoaded={props.setLoaded}\n                setStatus={props.setStatus}\n                project={props.project}\n            />\n        </div>\n    ) : (\n        <div className=\"ui red segment center aligned basic\">\n            <h2 className=\"header\">Your browser is currently unsupported</h2>\n        </div>\n    );\n};\n\nexport default StreamViewWrapper;\n","/home/andrii/immersiv-web/src/components/ProjectView/Log.js",[],"/home/andrii/immersiv-web/src/components/ProjectView/Components/EmbededView/EmbededView.jsx",[],"/home/andrii/immersiv-web/src/components/ProjectView/Components/LoadingView/LoadingView.jsx",[],"/home/andrii/immersiv-web/src/pages/PropertiesAdmin.jsx",["210"],"import React, { useEffect, useState } from \"react\";\n\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport Properties from \"./Properties\";\nimport LayoutHOC from \"layout/Layout\";\nimport { Layout, PageHeader } from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\nimport propertyService from \"services/property.service\";\nimport projectService from \"services/project.service\";\nimport useLoginCheck from \"hooks/useLoginCheck\";\n\nconst PropertiesAdmin = (props) => {\n    const { id } = useParams();\n\n    const navigate = useNavigate();\n    const [project, setProject] = useState(null);\n    const [properties, setProperties] = useState(null);\n    useLoginCheck();\n\n    useEffect(() => {\n        propertyService.getProperty(id).then((response) => {\n            setProperties(response.data);\n        });\n\n        projectService.getProject(id).then((response) => {\n            setProject(response.data);\n        });\n    }, []);\n    return (\n        <LayoutHOC>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => navigate(`/admin/projects/${id}`)}\n                    title={`Properties of project id: ${id}`}\n                    style={{\n                        boxShadow: \"1px 1px 10px 1px #ccc\",\n                        position: \"fixed\",\n                        zIndex: 100,\n                        width: \"100%\",\n                    }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        paddingTop: \"100px\",\n                        maxWidth: \"1200px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    <Properties\n                        admin\n                        id={id}\n                        setProject={setProject}\n                        setProperties={setProperties}\n                        project={project}\n                        properties={properties}\n                    />\n                </Content>\n            </Layout>\n        </LayoutHOC>\n    );\n};\n\nexport default PropertiesAdmin;\n","/home/andrii/immersiv-web/src/components/DashboardItem/DataItems/index.js",[],"/home/andrii/immersiv-web/src/components/DashboardItem/DataItems/TextItem/TextItem.js",[],"/home/andrii/immersiv-web/src/components/DashboardItem/DataItems/ChartItem/ChartItem.js",[],"/home/andrii/immersiv-web/src/components/ProjectView/Layout/ProjectView.jsx",["211","212","213"],"import React, { useState } from \"react\";\nimport { Button } from \"./Button\";\n\nimport StreamViewWrapper from \"../Components/StreamView/StreamView\";\nimport { PoweredLogo } from \"./PoweredLogo\";\n\nimport styles from \"./ProjectView.module.css\";\nimport { MailFilled, PhoneFilled } from \"@ant-design/icons\";\nimport { isMobile as isMobileAgent } from \"react-device-detect\";\n\nimport { useWindowSize } from \"@react-hook/window-size\";\nimport { Loading } from \"components/ProjectView/Components/Loading/Loading\";\nconst ProjectView = (props) => {\n    const { project, constant } = props;\n    const [width, height] = useWindowSize();\n    // const isMobile = isMobileAgent || width < 1200 || height < 700;\n    const isMobile = true;\n    const [loaded, setLoaded] = useState(false);\n    const [status, setStatus] = useState(false);\n\n    return (\n        <>\n            <div className={isMobile ? styles.flex1 : styles.wrap}>\n                {!isMobile && <div className={styles.top}>{project.name}</div>}\n                <div className={isMobile ? styles.flex1 : styles.center}>\n                    {!isMobile && <PoweredLogo invisible />}\n                    <div className={isMobile ? styles.flex1 : styles.viewWrap}>\n                        <div\n                            className={\n                                isMobile ? styles.flex1 : styles.viewInner\n                            }\n                        >\n                            <StreamViewWrapper\n                                setLoaded={setLoaded}\n                                setStatus={setStatus}\n                                project={project}\n                            />\n                            {isMobile && (\n                                <>\n                                    {loaded && (\n                                        <img\n                                            src=\"/images/logo-white.png\"\n                                            alt=\"logo\"\n                                            className={styles.mLogo}\n                                        />\n                                    )}\n                                    <div className={styles.mCenter}>\n                                        <Button\n                                            link={`tel:${constant.call}`}\n                                            name=\"phone\"\n                                        ></Button>\n                                        <Button\n                                            link={`mailto:${constant.email}`}\n                                            name=\"mail\"\n                                        ></Button>\n                                    </div>\n                                </>\n                            )}\n                        </div>\n                    </div>\n                    {!isMobile && <PoweredLogo />}\n                </div>\n                {!isMobile && (\n                    <div className={styles.bottomWrap}>\n                        <PoweredLogo invisible />\n\n                        <div className={styles.bottomCenter}>\n                            <div className={styles.bottomCenterLeft}>\n                                <img\n                                    src=\"/images/controls.png\"\n                                    alt=\"logo\"\n                                    style={{ width: \"100%\" }}\n                                />\n                            </div>\n                            <div className={styles.bottomCenterCenter}>\n                                {project.logo && (\n                                    <img\n                                        src=\"/images/imperial-logo.png\"\n                                        alt=\"logo\"\n                                        style={{ height: \"120px\" }}\n                                    />\n                                )}\n                            </div>\n                            <div className={styles.bottomCenterRight}>\n                                <a\n                                    href={`tel:${constant.call}`}\n                                    className={styles.contactWrap}\n                                >\n                                    <div className={styles.contactIconWrap}>\n                                        <PhoneFilled\n                                            name=\"phone\"\n                                            className={styles.contactIcon}\n                                        />\n                                    </div>\n                                    <div style={{ width: \"10px\" }}></div>\n                                    <div className={styles.contactText}>\n                                        {constant.phone}\n                                    </div>\n                                </a>\n                                {/* <div style={{ height: \"20px\" }}></div> */}\n                                <a\n                                    href={`mailto:${constant.email}`}\n                                    className={styles.contactWrap}\n                                >\n                                    <div className={styles.contactIconWrap}>\n                                        <MailFilled\n                                            name=\"mail\"\n                                            size=\"small\"\n                                            className={styles.contactIcon}\n                                        />\n                                    </div>\n                                    <div style={{ width: \"10px\" }}></div>\n                                    <div className={styles.contactText}>\n                                        {constant.email}\n                                    </div>\n                                </a>\n                            </div>\n                        </div>\n                        <PoweredLogo invisible />\n                    </div>\n                )}\n            </div>\n            <Loading loaded={loaded} status={status} />\n        </>\n    );\n};\n\nexport default ProjectView;\n","/home/andrii/immersiv-web/src/components/ProjectView/Layout/Button.jsx",[],"/home/andrii/immersiv-web/src/components/ProjectView/Layout/PoweredLogo.jsx",[],"/home/andrii/immersiv-web/src/hooks/useLoginCheck.js",["214"],"import { useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useUser } from \"context/UserContext\";\n\nconst useLoginCheck = () => {\n    const navigate = useNavigate();\n    const { isLoggedIn, authData, logout, isInitiated } = useUser();\n    useEffect(() => {\n        if (isInitiated) {\n            if (!isLoggedIn) {\n                logout();\n                navigate(\"/login\");\n                return null;\n            }\n\n            if (!authData?.super) {\n                if (authData?.projectId) {\n                    navigate(`/p-admin/${authData.projectId}`);\n                    return null;\n                } else {\n                    logout();\n                    navigate(\"/login\");\n                    return null;\n                }\n            }\n        }\n    }, [isLoggedIn, authData?.super, authData?.projectId, isInitiated]);\n};\n\nexport default useLoginCheck;\n","/home/andrii/immersiv-web/src/pages/MediaAdmin.jsx",["215","216"],"import React, { useEffect, useState, useRef } from \"react\";\n\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport LayoutHOC from \"layout/Layout\";\nimport {\n    Button,\n    Form,\n    Input,\n    Layout,\n    List,\n    PageHeader,\n    Popconfirm,\n    Select,\n    Space,\n    Typography,\n    Upload,\n} from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\nimport projectService from \"services/project.service\";\nimport useLoginCheck from \"hooks/useLoginCheck\";\nimport toast from \"react-hot-toast\";\nimport YouTube from \"react-youtube\";\nimport { UploadOutlined } from \"@ant-design/icons\";\nimport axios from \"axios\";\nimport utilsService from \"services/utils.service\";\n\nconst MediaAdmin = (props) => {\n    const { id } = useParams();\n    const formRef = useRef(null);\n\n    const navigate = useNavigate();\n    const [project, setProject] = useState(null);\n    useLoginCheck();\n\n    useEffect(() => {\n        projectService.getProject(id).then((response) => {\n            setProject(response.data);\n        });\n    }, []);\n\n    const onFinish = async (values) => {\n        const response = await projectService.addMedia(id, values);\n        if (response.data) {\n            toast.success(\"Saved\");\n            setProject(response.data);\n            if (formRef.current) formRef.current.resetFields();\n        }\n    };\n    const handleMove = async (mediaId, down) => {\n        const response = await projectService.moveMedia(id, mediaId, down);\n        if (response.data) {\n            toast.success(\"Moved\");\n            setProject(response.data);\n        }\n    };\n    const handleDelete = async (mediaId) => {\n        const response = await projectService.deleteMedia(id, mediaId);\n        if (response.data) {\n            toast.success(\"Deleted\");\n            setProject(response.data);\n        }\n    };\n\n    const customUpload = async ({\n        action,\n        data,\n        file,\n        filename,\n        headers,\n        onError,\n        onProgress,\n        onSuccess,\n        withCredentials,\n    }) => {\n        try {\n            const res = await utilsService.signUrl();\n\n            axios\n                .put(res.data.signedRequest, file, {\n                    headers: {\n                        \"Content-Type\": file.type,\n                    },\n                })\n                .then((s3res) => {\n                    if (formRef.current) {\n                        formRef.current.setFieldsValue({\n                            ...formRef.current.values,\n                            url: res.data.url,\n                            thumbnail: res.data.thumbnail,\n                        });\n                        onSuccess(data.response, file);\n                    }\n                })\n                .catch((err) => {\n                    console.log(err.message);\n                    onError();\n                });\n        } catch (error) {\n            onError();\n            toast.error(error.message);\n        }\n    };\n    return (\n        <LayoutHOC>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => navigate(`/admin/projects/${id}`)}\n                    title={`Media of project id: ${id}`}\n                    style={{\n                        boxShadow: \"1px 1px 10px 1px #ccc\",\n                        position: \"fixed\",\n                        zIndex: 100,\n                        width: \"100%\",\n                    }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        paddingTop: \"100px\",\n                        maxWidth: \"1200px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    {project && project.media && (\n                        <div>\n                            <List\n                                itemLayout=\"vertical\"\n                                size=\"large\"\n                                dataSource={project.media}\n                                renderItem={(item, index) => (\n                                    <List.Item\n                                        key={item.id}\n                                        actions={[\n                                            <Button\n                                                size=\"small\"\n                                                key=\"up\"\n                                                onClick={() =>\n                                                    handleMove(item.id, false)\n                                                }\n                                            >\n                                                Move up\n                                            </Button>,\n                                            <Button\n                                                size=\"small\"\n                                                key=\"down\"\n                                                onClick={() =>\n                                                    handleMove(item.id, true)\n                                                }\n                                            >\n                                                Move down\n                                            </Button>,\n                                            <Popconfirm\n                                                title=\"Are you sure to delete this media?\"\n                                                onConfirm={() =>\n                                                    handleDelete(item.id)\n                                                }\n                                                okText=\"Yes\"\n                                                cancelText=\"No\"\n                                                key=\"delete\"\n                                            >\n                                                <Button size=\"small\" danger>\n                                                    Delete\n                                                </Button>\n                                            </Popconfirm>,\n                                        ]}\n                                        extra={\n                                            item.type === \"video\" ? (\n                                                <YouTube\n                                                    videoId={item.url}\n                                                    className=\"youtubeContainer\"\n                                                />\n                                            ) : (\n                                                <img\n                                                    width=\"100%\"\n                                                    style={{\n                                                        maxWidth: \"300px\",\n                                                    }}\n                                                    alt=\"logo\"\n                                                    src={item.url}\n                                                />\n                                            )\n                                        }\n                                    >\n                                        <List.Item.Meta\n                                            description={item.type}\n                                            title={`${index + 1}. ${\n                                                item.name || \"no name\"\n                                            }`}\n                                        />\n                                        {item.url}\n                                    </List.Item>\n                                )}\n                            />\n                            <Form\n                                onFinish={onFinish}\n                                style={{\n                                    padding: \" 16px\",\n                                    maxWidth: \"500px\",\n                                    margin: \"auto\",\n                                    backgroundColor: \"#eee\",\n                                }}\n                                ref={formRef}\n                            >\n                                <Typography.Title level={4}>\n                                    Add new media\n                                </Typography.Title>\n                                <Form.Item\n                                    name=\"type\"\n                                    rules={[{ required: true }]}\n                                >\n                                    <Select placeholder=\"Choose type\">\n                                        <Select.Option value=\"photo\">\n                                            Photo\n                                        </Select.Option>\n                                        <Select.Option value=\"plan\">\n                                            Plan\n                                        </Select.Option>\n                                        <Select.Option value=\"video\">\n                                            Video\n                                        </Select.Option>\n                                    </Select>\n                                </Form.Item>\n                                <Form.Item\n                                    name=\"name\"\n                                    rules={[{ required: true }]}\n                                >\n                                    <Input placeholder=\"Name\" />\n                                </Form.Item>\n                                <Form.Item\n                                    name=\"url\"\n                                    rules={[{ required: true }]}\n                                >\n                                    <Input placeholder=\"Url/Video id\" />\n                                </Form.Item>\n                                <Form.Item name=\"thumbnail\" hidden>\n                                    <Input placeholder=\"Thumbnail\" />\n                                </Form.Item>\n                                <Form.Item>\n                                    <Upload\n                                        accept=\"image/*\"\n                                        listType=\"picture\"\n                                        maxCount={1}\n                                        customRequest={customUpload}\n                                    >\n                                        <Button icon={<UploadOutlined />}>\n                                            Upload (Max: 1)\n                                        </Button>\n                                    </Upload>\n                                </Form.Item>\n\n                                <Form.Item>\n                                    <Button\n                                        type=\"primary\"\n                                        htmlType=\"submit\"\n                                        style={{ width: \"100%\" }}\n                                    >\n                                        Add media\n                                    </Button>\n                                </Form.Item>\n                            </Form>\n                        </div>\n                    )}\n                </Content>\n            </Layout>\n        </LayoutHOC>\n    );\n};\n\nexport default MediaAdmin;\n","/home/andrii/immersiv-web/src/services/utils.service.js",[],{"ruleId":"217","severity":1,"message":"218","line":98,"column":21,"nodeType":"219","endLine":98,"endColumn":24},{"ruleId":"220","severity":1,"message":"221","line":19,"column":8,"nodeType":"222","endLine":19,"endColumn":10,"suggestions":"223"},{"ruleId":"224","severity":1,"message":"225","line":18,"column":10,"nodeType":"226","messageId":"227","endLine":18,"endColumn":17},{"ruleId":"220","severity":1,"message":"228","line":30,"column":8,"nodeType":"222","endLine":30,"endColumn":10,"suggestions":"229"},{"ruleId":"220","severity":1,"message":"230","line":42,"column":8,"nodeType":"222","endLine":42,"endColumn":58,"suggestions":"231"},{"ruleId":"224","severity":1,"message":"232","line":15,"column":8,"nodeType":"226","messageId":"227","endLine":15,"endColumn":21},{"ruleId":"220","severity":1,"message":"230","line":43,"column":8,"nodeType":"222","endLine":43,"endColumn":58,"suggestions":"233"},{"ruleId":"220","severity":1,"message":"228","line":49,"column":8,"nodeType":"222","endLine":49,"endColumn":10,"suggestions":"234"},{"ruleId":"220","severity":1,"message":"235","line":59,"column":8,"nodeType":"222","endLine":59,"endColumn":43,"suggestions":"236"},{"ruleId":"220","severity":1,"message":"237","line":59,"column":9,"nodeType":"238","endLine":59,"endColumn":18},{"ruleId":"220","severity":1,"message":"237","line":59,"column":20,"nodeType":"238","endLine":59,"endColumn":29},{"ruleId":"220","severity":1,"message":"239","line":39,"column":8,"nodeType":"222","endLine":39,"endColumn":10,"suggestions":"240"},{"ruleId":"224","severity":1,"message":"241","line":6,"column":5,"nodeType":"226","messageId":"227","endLine":6,"endColumn":15},{"ruleId":"224","severity":1,"message":"242","line":103,"column":56,"nodeType":"226","messageId":"227","endLine":103,"endColumn":72},{"ruleId":"220","severity":1,"message":"243","line":121,"column":8,"nodeType":"222","endLine":121,"endColumn":25,"suggestions":"244"},{"ruleId":"220","severity":1,"message":"245","line":127,"column":8,"nodeType":"222","endLine":127,"endColumn":25,"suggestions":"246"},{"ruleId":"220","severity":1,"message":"247","line":133,"column":8,"nodeType":"222","endLine":133,"endColumn":32,"suggestions":"248"},{"ruleId":"220","severity":1,"message":"228","line":28,"column":8,"nodeType":"222","endLine":28,"endColumn":10,"suggestions":"249"},{"ruleId":"224","severity":1,"message":"250","line":9,"column":22,"nodeType":"226","messageId":"227","endLine":9,"endColumn":35},{"ruleId":"224","severity":1,"message":"251","line":15,"column":12,"nodeType":"226","messageId":"227","endLine":15,"endColumn":17},{"ruleId":"224","severity":1,"message":"252","line":15,"column":19,"nodeType":"226","messageId":"227","endLine":15,"endColumn":25},{"ruleId":"220","severity":1,"message":"253","line":27,"column":8,"nodeType":"222","endLine":27,"endColumn":71,"suggestions":"254"},{"ruleId":"224","severity":1,"message":"255","line":14,"column":5,"nodeType":"226","messageId":"227","endLine":14,"endColumn":10},{"ruleId":"220","severity":1,"message":"228","line":39,"column":8,"nodeType":"222","endLine":39,"endColumn":10,"suggestions":"256"},"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'id', 'setProject', and 'setProperties'. Either include them or remove the dependency array.","ArrayExpression",["257"],"no-unused-vars","'useUser' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["258"],"React Hook useEffect has missing dependencies: 'id', 'logout', and 'navigate'. Either include them or remove the dependency array.",["259"],"'useLoginCheck' is defined but never used.",["260"],["261"],"React Hook useEffect has missing dependencies: 'getMetricData' and 'period.length'. Either include them or remove the dependency array.",["262"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","MemberExpression","React Hook useEffect has a missing dependency: 'logout'. Either include it or remove the dependency array.",["263"],"'Popconfirm' is defined but never used.","'setEditModalOpen' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'project.Version' and 'project.modelId'. Either include them or remove the dependency array.",["264"],"React Hook useEffect has a missing dependency: 'launch'. Either include it or remove the dependency array.",["265"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["266"],["267"],"'isMobileAgent' is defined but never used.","'width' is assigned a value but never used.","'height' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'logout' and 'navigate'. Either include them or remove the dependency array.",["268"],"'Space' is defined but never used.",["269"],{"desc":"270","fix":"271"},{"desc":"272","fix":"273"},{"desc":"274","fix":"275"},{"desc":"274","fix":"276"},{"desc":"272","fix":"277"},{"desc":"278","fix":"279"},{"desc":"280","fix":"281"},{"desc":"282","fix":"283"},{"desc":"284","fix":"285"},{"desc":"286","fix":"287"},{"desc":"272","fix":"288"},{"desc":"289","fix":"290"},{"desc":"272","fix":"291"},"Update the dependencies array to be: [id, setProject, setProperties]",{"range":"292","text":"293"},"Update the dependencies array to be: [id]",{"range":"294","text":"295"},"Update the dependencies array to be: [isLoggedIn, authData?.super, authData?.projectId, id, logout, navigate]",{"range":"296","text":"297"},{"range":"298","text":"297"},{"range":"299","text":"295"},"Update the dependencies array to be: [getMetricData, period.length, project?.id]",{"range":"300","text":"301"},"Update the dependencies array to be: [logout]",{"range":"302","text":"303"},"Update the dependencies array to be: [availableModels, project.Version, project.modelId]",{"range":"304","text":"305"},"Update the dependencies array to be: [launch, modelDefinition]",{"range":"306","text":"307"},"Update the dependencies array to be: [props, status, streamerStatus]",{"range":"308","text":"309"},{"range":"310","text":"295"},"Update the dependencies array to be: [isLoggedIn, authData?.super, authData.projectId, isInitiated, logout, navigate]",{"range":"311","text":"312"},{"range":"313","text":"295"},[655,657],"[id, setProject, setProperties]",[1089,1091],"[id]",[1364,1414],"[isLoggedIn, authData?.super, authData?.projectId, id, logout, navigate]",[1407,1457],[1600,1602],[1852,1887],"[getMetricData, period.length, project?.id]",[1410,1412],"[logout]",[3776,3793],"[availableModels, project.Version, project.modelId]",[3893,3910],"[launch, modelDefinition]",[4058,4082],"[props, status, streamerStatus]",[934,936],[805,868],"[isLoggedIn, authData?.super, authData.projectId, isInitiated, logout, navigate]",[1026,1028]]